{
 "cells": [
  {
   "cell_type": "raw",
   "id": "1e4876f3",
   "metadata": {},
   "source": [
    "---\n",
    "title: \"Week 4: {{< var w04.title >}}\"\n",
    "subtitle: \"*DSAN 5500: Data Structures, Objects, and Algorithms in Python*\"\n",
    "date: \"Monday, February 5, 2024\"\n",
    "date-format: full\n",
    "author: \"Jeff Jacobs\"\n",
    "institute: \"<a href='mailto:jj1088@georgetown.edu' target='_blank'>`jj1088@georgetown.edu`</a>\"\n",
    "lecnum: 4\n",
    "categories:\n",
    "  - \"Class Sessions\"\n",
    "format:\n",
    "  revealjs:\n",
    "    df-print: kable\n",
    "    output-file: \"slides.html\"\n",
    "    footer: \"DSAN 5500 Week 4: {{< var w04.footer >}}\"\n",
    "    echo: true\n",
    "    code-fold: show\n",
    "    scrollable: true\n",
    "    slide-number: true\n",
    "    html-math-method: mathjax\n",
    "    include-in-header:\n",
    "      text: \"<link rel='stylesheet' href='https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css'>\"\n",
    "    theme: [\"../_jjslides.scss\"]\n",
    "    simplemenu:\n",
    "      flat: true\n",
    "      barhtml:\n",
    "        header: \"<div class='menubar'><span style='position: absolute; left: 8; padding-left: 8px;'><a href='./index.html'>&larr; Return to Notes</a></span><ul class='menu'></ul></div>\"\n",
    "      scale: 0.5\n",
    "    revealjs-plugins:\n",
    "      - simplemenu\n",
    "  html:\n",
    "    df-print: kable\n",
    "    output-file: \"index.html\"\n",
    "    echo: true\n",
    "    code-fold: show\n",
    "    html-math-method: mathjax\n",
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6b2abf29",
   "metadata": {},
   "source": [
    "::: {.content-visible unless-format=\"revealjs\"}\n",
    "\n",
    "<center>\n",
    "<a class=\"h2\" href=\"./slides.html\" target=\"_blank\">Open slides in new window &rarr;</a>\n",
    "</center>\n",
    "\n",
    ":::\n",
    "\n",
    "# HW1 Postmortem {data-stack-name=\"HW1 Postmortem\"}\n",
    "\n",
    "## THANK YOU!!!\n",
    "\n",
    "* Thank you all SO so much for your patience\n",
    "* I know it doesn't help **present-day you** to hear this, but\n",
    "* **Future you** will have less stress now that I have a big server log containing all of the issues with the grading server, which I'll use to **fix the server** for HW2 onwards!\n",
    "\n",
    "## The Devil is in the Details\n",
    "\n",
    "![From <a href='https://www.prweek.com/article/1368808/pr-ethics-asia-patchwork-values' target='_blank'>*PR Week*</a>, 19 Oct 2015](images/devil_details.png){fig-align=\"center\"}\n",
    "\n",
    "## *Objects* vs. Their *(String) Representations* {.smaller .crunch-title .title-11 .crunch-quarto-layout-panel .crunch-images}\n",
    "\n",
    "::: {layout=\"[1,1]\" layout-valign=\"center\" layout-align=\"center\"}\n",
    "\n",
    "::: {#xbox-left}\n",
    "\n",
    "![From <a href='https://www.vice.com/en/article/4w7vab/XBOX-One-From-Ebay-Turned-Out-to-be-a-Shitty-Photo-of-an-XBOX-One' target='_blank'>*Vice* News</a>](images/xbox.jpeg){fig-align=\"center\"}\n",
    "\n",
    ":::\n",
    "::: {#xbox-right}\n",
    "\n",
    "![](images/xbox_photo.jpeg){fig-align=\"center\" width=\"350\"}\n",
    "\n",
    "![](images/xbox_result.jpg){fig-align=\"center\" width=\"350\"}\n",
    "\n",
    ":::\n",
    ":::\n",
    "\n",
    "## In Art\n",
    "\n",
    "![Ren√© Magritte, <a href='https://en.wikipedia.org/wiki/The_Treachery_of_Images' target='_blank'>*The Treachery of Images*</a> (1929)](images/magritte.jpg){fig-align=\"center\"}\n",
    "\n",
    "## In Python {.smaller}\n",
    "\n",
    "::: {.columns}\n",
    "::: {.column width=\"50%\"}\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "ee7c9468",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2\n",
      "2\n"
     ]
    }
   ],
   "source": [
    "#| error: true\n",
    "x = 1 + 1\n",
    "y = str(x)\n",
    "print(x)\n",
    "print(y)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2f0f0e4e",
   "metadata": {},
   "source": [
    "* So far so good...\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "136a6826",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3\n"
     ]
    },
    {
     "ename": "TypeError",
     "evalue": "can only concatenate str (not \"int\") to str",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[2], line 2\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[38;5;28mprint\u001b[39m(x\u001b[38;5;241m+\u001b[39m\u001b[38;5;241m1\u001b[39m)\n\u001b[0;32m----> 2\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[43my\u001b[49m\u001b[38;5;241;43m+\u001b[39;49m\u001b[38;5;241;43m1\u001b[39;49m)\n",
      "\u001b[0;31mTypeError\u001b[0m: can only concatenate str (not \"int\") to str"
     ]
    }
   ],
   "source": [
    "#| error: true\n",
    "print(x+1)\n",
    "print(y+1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c5109efb",
   "metadata": {},
   "source": [
    ":::\n",
    "::: {.column width=\"50%\"}\n",
    "\n",
    "<center>\n",
    "**...What Happened??**\n",
    "</center>\n",
    "\n",
    "* The value assigned to `x` is an `int`\n",
    "  * `int` $\\implies$ thing you can **do arithmetic addition with**\n",
    "* The value assigned to `y` is a `str`\n",
    "  * `str` $\\implies$ thing you **cannot** do arithmetic addition with\n",
    "  * (Though we can **overload** the `+` operator to represent **concatenation** when applied to **two `str` objects**)\n",
    "\n",
    ":::\n",
    ":::\n",
    "\n",
    "## In HW1 {.crunch-title}\n",
    "\n",
    "::: {.callout-note title=\"<i class='bi bi-exclamation-triangle-fill' style='font-size: 1.333rem;'></i> Objects vs. Their Representations\" icon=\"false\"}\n",
    "\n",
    "<center style='margin: 20px;'>\n",
    "\n",
    "$$\n",
    "\\begin{align*}\n",
    "\\overbrace{\\boxed{\\texttt{int}\\text{ object}}}^{\\text{addition defined}} &\\neq \\overbrace{\\boxed{\\texttt{str}\\text{ representation of }\\texttt{int}\\text{ object}}}^{\\text{addition not defined}} \\\\\n",
    "\\underbrace{\\boxed{\\texttt{SwimStyle}\\text{ object}}}_{\\texttt{.name}\\text{ defined}} &\\neq \\underbrace{\\boxed{\\texttt{str}\\text{ representation of }\\texttt{SwimStyle}\\text{ object}}}_{\\texttt{.name}\\text{ not defined}}\n",
    "\\end{align*}\n",
    "$$\n",
    "\n",
    "</center>\n",
    "\n",
    ":::\n",
    "\n",
    "## Other Possible Representations! {.smaller .crunch-title .crunch-ul .crunch-details}\n",
    "\n",
    "::: {.columns}\n",
    "::: {.column width=\"50%\"}\n",
    "\n",
    "1. `str`s are just lists of **characters**...\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "0625dc7b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Ceci n'est pas une string\n",
      "<class 'str'>\n",
      "['C', 'e', 'c', 'i', ' ', 'n', \"'\", 'e', 's', 't', ' ', 'p', 'a', 's', ' ', 'u', 'n', 'e', ' ', 's', 't', 'r', 'i', 'n', 'g']\n"
     ]
    }
   ],
   "source": [
    "x = \"Ceci n'est pas une string\"\n",
    "print(x)\n",
    "print(type(x))\n",
    "print(list(x))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cad09e56",
   "metadata": {},
   "source": [
    ":::\n",
    "::: {.column width=\"50%\"}\n",
    "\n",
    "$\\leadsto$ 2. **Characters** are stored in Python memory as **`int` values** (ASCII encodings)...\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "572926b8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "b\"Ceci n'est pas une string\"\n",
      "<class 'bytes'>\n",
      "[67, 101, 99, 105, 32, 110, 39, 101, 115, 116, 32, 112, 97, 115, 32, 117, 110, 101, 32, 115, 116, 114, 105, 110, 103]\n"
     ]
    }
   ],
   "source": [
    "y = b\"Ceci n'est pas une string\"\n",
    "print(y)\n",
    "print(type(y))\n",
    "print(list(y))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4086bfe8",
   "metadata": {},
   "source": [
    ":::\n",
    ":::\n",
    "\n",
    "$\\leadsto$ 3. Each `int` value is stored in **computer memory** as a **byte** (8 **bits** $b_i \\in \\{0, 1\\}$):\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "89980cb0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['1000011', '1100101', '1100011', '1101001', '100000', '1101110', '100111', '1100101', '1110011', '1110100', '100000', '1110000', '1100001', '1110011', '100000', '1110101', '1101110', '1100101', '100000', '1110011', '1110100', '1110010', '1101001', '1101110', '1100111']\n"
     ]
    }
   ],
   "source": [
    "print([format(character, 'b') for character in y])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e31169fe",
   "metadata": {},
   "source": [
    "## So What is the \"Right\" Representation? {.title-12 .smaller .crunch-title .crunch-quarto-layout-panel}\n",
    "\n",
    "::: {layout=\"[1,1]\"}\n",
    "::: {#best-repr-left}\n",
    "\n",
    "* No single \"best\" choice!\n",
    "* Different choices more/less helpful for different goals (think of `datetime.datetime` example)\n",
    "* That's exactly **why** Python has **two different** \"default\" ways to generate representations: `__str__()` and `__repr__()`\n",
    "* Different \"pictures\" of an object (from different angles) may **reveal some properties** while **hiding others**\n",
    "* What is the \"right\" photo of this statue? &rarr;\n",
    "\n",
    ":::\n",
    "::: {#best-repr-right}\n",
    "\n",
    "![James Hopkins, <a href='https://blog.re-title.com/features/2014/06/james-hopkins-123.html' target='_blank'>*123*</a> (2014)](images/hopkins_123.jpg){fig-align=\"center\" width=\"360\"}\n",
    "\n",
    ":::\n",
    ":::\n",
    "\n",
    "## Different Representations, Different Information About the Object {.crunch-title}\n",
    "\n",
    "![](images/hopkins_123_angles.png){fig-align=\"center\"}\n",
    "\n",
    "## Parallel Computing Preview {.smaller .crunch-title .crunch-figures .crunch-figcaption}\n",
    "\n",
    "![](images/shared_memory_updated.gif){fig-align=\"center\" width=\"580\"}\n",
    "\n",
    "![From <a href='https://cvw.cac.cornell.edu/parallel/memory-access/multithreading' target='_blank'>Cornell Virtual Workshop on Parallel Programming</a>](images/shared_memory_outcomes.gif){fig-align=\"center\" width=\"580\"}\n",
    "\n",
    "## Why Is This A Big Deal? {.smaller .crunch-title .crunch-ul}\n",
    "\n",
    "* You've been tasked with writing **bank software**\n",
    "* $A$ has $500, $B$ has $500, $A$ fills out form to send $300 to $B$ but **clicks \"Submit\" twice**...\n",
    "\n",
    "![From Baeldung on Computer Science, <a href='https://www.baeldung.com/cs/race-conditions' target='_blank'>*What is a Race Condition?*</a>](images/race_conditions.webp){fig-align=\"center\"}\n",
    "\n",
    "## And on the Autograder Server... {.smaller}\n",
    "\n",
    "![](images/deadlock.webp){.nostretch fig-align=\"center\" width=\"600\"}\n",
    "\n",
    "## Swim Club with Data Science Hats {.smaller .crunch-title}\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "09fb9a00",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>age</th>\n",
       "      <th>distance</th>\n",
       "      <th>style</th>\n",
       "      <th>time</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Abi</td>\n",
       "      <td>10</td>\n",
       "      <td>50m</td>\n",
       "      <td>Back</td>\n",
       "      <td>41050</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Abi</td>\n",
       "      <td>10</td>\n",
       "      <td>50m</td>\n",
       "      <td>Back</td>\n",
       "      <td>43058</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Abi</td>\n",
       "      <td>10</td>\n",
       "      <td>50m</td>\n",
       "      <td>Back</td>\n",
       "      <td>42035</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Abi</td>\n",
       "      <td>10</td>\n",
       "      <td>50m</td>\n",
       "      <td>Back</td>\n",
       "      <td>43035</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Abi</td>\n",
       "      <td>10</td>\n",
       "      <td>50m</td>\n",
       "      <td>Back</td>\n",
       "      <td>39085</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  name  age distance style   time\n",
       "0  Abi   10      50m  Back  41050\n",
       "1  Abi   10      50m  Back  43058\n",
       "2  Abi   10      50m  Back  42035\n",
       "3  Abi   10      50m  Back  43035\n",
       "4  Abi   10      50m  Back  39085"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "swim_df = pd.read_csv(\"assets/swimdata.csv\", index_col=0)\n",
    "swim_df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c4b56282",
   "metadata": {},
   "source": [
    "## Fastest Per Style {.smaller .crunch-title .crunch-ul .crunch-details .crunch-code .smaller-table}\n",
    "\n",
    "::: {.columns}\n",
    "::: {.column width=\"50%\"}\n",
    "\n",
    "<center>\n",
    "**Short Events**\n",
    "</center>\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "78779854",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>distance</th>\n",
       "      <th>style</th>\n",
       "      <th>time</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>101</th>\n",
       "      <td>Calvin</td>\n",
       "      <td>50m</td>\n",
       "      <td>Back</td>\n",
       "      <td>37085</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>Abi</td>\n",
       "      <td>50m</td>\n",
       "      <td>Breast</td>\n",
       "      <td>45071</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>111</th>\n",
       "      <td>Calvin</td>\n",
       "      <td>50m</td>\n",
       "      <td>Fly</td>\n",
       "      <td>37018</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>65</th>\n",
       "      <td>Aurora</td>\n",
       "      <td>50m</td>\n",
       "      <td>Free</td>\n",
       "      <td>28086</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       name distance   style   time\n",
       "101  Calvin      50m    Back  37085\n",
       "18      Abi      50m  Breast  45071\n",
       "111  Calvin      50m     Fly  37018\n",
       "65   Aurora      50m    Free  28086"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "short_df = swim_df[swim_df['distance'] == \"50m\"].copy()\n",
    "short_df.sort_values(['style', 'time'], ascending=True).groupby('style').head(1).drop(columns=\"age\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c37569cd",
   "metadata": {},
   "source": [
    ":::\n",
    "::: {.column wiudth=\"50%\"}\n",
    "\n",
    "<center>\n",
    "**Long Events**\n",
    "</center>\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "c38ce6f1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>distance</th>\n",
       "      <th>style</th>\n",
       "      <th>time</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>72</th>\n",
       "      <td>Bill</td>\n",
       "      <td>100m</td>\n",
       "      <td>Back</td>\n",
       "      <td>65075</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>276</th>\n",
       "      <td>Tasmin</td>\n",
       "      <td>100m</td>\n",
       "      <td>Breast</td>\n",
       "      <td>80059</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>241</th>\n",
       "      <td>Mike</td>\n",
       "      <td>100m</td>\n",
       "      <td>Fly</td>\n",
       "      <td>68038</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>151</th>\n",
       "      <td>Dave</td>\n",
       "      <td>100m</td>\n",
       "      <td>Free</td>\n",
       "      <td>58067</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       name distance   style   time\n",
       "72     Bill     100m    Back  65075\n",
       "276  Tasmin     100m  Breast  80059\n",
       "241    Mike     100m     Fly  68038\n",
       "151    Dave     100m    Free  58067"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "long_df = swim_df[swim_df['distance'] == \"100m\"].copy()\n",
    "long_df.sort_values(['style', 'time'], ascending=True).groupby('style').head(1).drop(columns=\"age\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b2835d3f",
   "metadata": {},
   "source": [
    ":::\n",
    ":::\n",
    "\n",
    "* This works well for **you**, as a data scientist, **manually analyzing** the data via code cells\n",
    "* What if **the public** is accessing your data **hundreds of times per second** (e.g., for a <a href='https://www.espn.com/olympics/summer/2024/medals' target='_blank'>**live-updating data dashboard**</a>)? Should we (1) filter, (2) sort, (3) group by style, (4) filter (choose top entry), (5) drop column **every time data is accessed?**\n",
    "* (*Every* DSAN student can do this with Pandas... **YOU** will know how to do it with exponentially-greater efficiency, and **mathematically prove it** üòé)\n",
    "\n",
    "# Onwards and Upwards: Fancier Algorithms {data-stack-name=\"Even Fancier Linked Lists\"}\n",
    "\n",
    "## LinkedList: Foundation for Most(?) Data Structures! {.smaller .crunch-title .title-10 .crunch-quarto-layout-panel .crunch-images .crunch-figures}\n",
    "\n",
    "::: {layout=\"[1,3]\" layout-valign=\"center\"}\n",
    "\n",
    "![](images/bored_pooh.jpeg){fig-align=\"left\" width=\"210\"}\n",
    "\n",
    "::: {#bored-pooh}\n",
    "\n",
    "::: {.columns}\n",
    "::: {.column width=\"50%\"}\n",
    "\n",
    "```python\n",
    "class LinkedList:\n",
    "  @property\n",
    "  def root(self):\n",
    "    return self.__root\n",
    "```\n",
    "\n",
    ":::\n",
    "::: {.column width=\"50%\"}\n",
    "\n",
    "```python\n",
    "class LinkedListNode:\n",
    "  @property content\n",
    "  @property next\n",
    "```\n",
    "\n",
    ":::\n",
    ":::\n",
    "\n",
    ":::\n",
    ":::\n",
    "\n",
    "::: {layout=\"[1,3]\" layout-valign=\"center\"}\n",
    "\n",
    "![](images/fancy_pooh_single.jpeg){fig-align=\"left\" width=\"210\"}\n",
    "\n",
    "::: {#fancy-pooh}\n",
    "\n",
    "::: {.columns}\n",
    "::: {.column width=\"50%\"}\n",
    "\n",
    "```python\n",
    "class BinaryTree:\n",
    "  @property\n",
    "  def root(self):\n",
    "    return self.__root\n",
    "```\n",
    "\n",
    ":::\n",
    "::: {.column width=\"50%\"}\n",
    "\n",
    "```python\n",
    "class BinaryTreeNode:\n",
    "  @property content\n",
    "  @property left\n",
    "  @property right\n",
    "```\n",
    "\n",
    ":::\n",
    ":::\n",
    "\n",
    ":::\n",
    ":::\n",
    "\n",
    "::: {layout=\"[1,3]\" layout-valign=\"center\"}\n",
    "\n",
    "![](images/fanciest_pooh.jpeg){fig-align=\"left\" width=\"210\"}\n",
    "\n",
    "::: {#fanciest-pooh}\n",
    "\n",
    "::: {.columns}\n",
    "::: {.column width=\"50%\"}\n",
    "\n",
    "```python\n",
    "class QuadTree:\n",
    "  @property\n",
    "  def root(self):\n",
    "    return self.__root\n",
    "```\n",
    "\n",
    ":::\n",
    "::: {.column width=\"50%\"}\n",
    "\n",
    "```python\n",
    "class QuadTreeNode:\n",
    "  @property content\n",
    "  @property nw\n",
    "  @property ne\n",
    "  @property sw\n",
    "  @property se\n",
    "```\n",
    "\n",
    ":::\n",
    ":::\n",
    "\n",
    ":::\n",
    ":::\n",
    "\n",
    "## So Then... Why Is This a Whole DSAN Class? {.smaller .crunch-title .title-12}\n",
    "\n",
    "* The **core structures** are identical, but we can optimize **different goals** (efficient insertion, sorting, retrieval, deletion, ...) by changing the **invariants** maintained by the algorithms **internal to** our structure\n",
    "* Crucial [Insertion-Sort]{.alg} invariant: $\\textsf{Sorted}(1,i)$ true when we go to process entry $i + 1$ (`key`)\n",
    "* Crucial HW1 invariant: $\\textsf{Up-To-Date-Favorite}(1,i-1)$ true when we go to process entry $i + 1$ (next result in dataset)\n",
    "* $\\implies$ Efficiency of obtaining favorite style **guaranteed to be constant-time**, $O(1)$!\n",
    "* Otherwise, would be $O(n) > O(1)$ (linear approach) or at best $O(\\log_2(n)) > O(1)$ (divide-and-conquer)\n",
    "\n",
    "# Hash Tables {data-stack-name=\"Hash Tables\"}\n",
    "\n",
    "* *(Spoiler alert, so you know I'm not lying to you: this is a **LinkedList** with some **additional structure!**)\n",
    "* You just got hired as a **cashier** (Safeway cashiering alum myself ü´°)\n",
    "* The scanner is broken (spoiler #2: the scanner uses a hash table), so you start writing down **items** along with their **prices**, one-by-one, as items come in...\n",
    "\n",
    "## Our List of (Item, Price) Pairs {.crunch-title .crunch-details .crunch-ul .small-summary}\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "a1f83b9d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('Banana', 10), ('Apple', 2), ('Four Loko', 5)]"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "price_list = []\n",
    "price_list.append(('Banana', 10))\n",
    "price_list.append(('Apple', 2))\n",
    "price_list.append(('Four Loko', 5))\n",
    "price_list"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a5b84b63",
   "metadata": {},
   "source": [
    "* As the list gets longer, it gets harder and harder to **find where you wrote down a specific item and its price**\n",
    "* As you now know, you could use **linear search**, $O(n)$, or if you ensure alphabetical order (an **invariant!**), you could use **binary, divide-and-conquer search**, $O(\\log_2(n))$\n",
    "* We can do **even better**: $O(1)$. First w/magic, but then math\n",
    "\n",
    "## Strange-At-First Technique for Algorithm Analysis: Oracles\n",
    "\n",
    "* What if we had a magical wizard who could just **tell us** where to find an item we were looking for?\n",
    "* Sounds like I'm joking or saying \"what if we had a billion $ and infinite rizz and we could fly and walk through walls\"\n",
    "* And yet, through the magic of math and computer science, there are concrete **hashing algorithms** which ensure (in a mathematically-provable way!) \"almost certain\" $O(1)$ lookup time\n",
    "\n",
    "## Mathematical Strategy of Oracles {.crunch-title .crunch-math .math-85 .crunch-ul}\n",
    "\n",
    "* We'll use a **concrete**, **simplified hash function** to illustrate\n",
    "* Mathematically we'll be able to get something like\n",
    "\n",
    "$$\n",
    "T(n) = O(1 + \\underbrace{\\epsilon}_{\\mathclap{\\text{Collision rate}}} \\cdot n)\n",
    "$$\n",
    "\n",
    "* Which tells us: **if** we had an oracle who could ensure near-0 collision rates, **then** $T(n) = O(1)$.\n",
    "* And, by a beautiful division-of-labor, **other** computer scientists figure out the near-0 collision rates part, giving us\n",
    "\n",
    "$$\n",
    "p^{‚úÖ} = [T(n) = O(1 + \\epsilon n)], q^{‚úÖ} = [\\epsilon \\approx 0],\\text{ so } p \\wedge q \\implies T(n) \\overset{‚úÖ}{=} O(1).\n",
    "$$\n",
    "\n",
    "## Back to the Price List {.crunch-title .crunch-math .crunch-ul}\n",
    "\n",
    "* Our hash function: **`hash(item)`** = **first letter of `item`**\n",
    "\n",
    "$$\n",
    "h(\\texttt{x}) = \\texttt{x[0]}\n",
    "$$\n",
    "\n",
    "* `h('Banana') = 'B'`, `h('Monkey') = 'M'`\n",
    "* With this function in hand, we can create a length-26 **array**, one slot for each letter in alphabet, and then **write down (item, price) pairs** in **whatever slot `item` hashes to**\n",
    "\n",
    "## The Importance of Differentiating Operations: *Insertion* vs. *Lookup*\n",
    "\n",
    "* So far, we have $O(1)$ **insertion** via hashing\n",
    "* We also get $O(1)$ **lookup!**\n",
    "* When customer hands us an item (say, `'Banana'`), we compute the hash (`B`), look in that slot, and obtain the price for bananas.\n",
    "* We also get $O(1)$ **updating** (hash to find the old price, update it to have new price) and $O(1)$ **deletion** (hash to find the slot containing the item, then erase it from that slot)\n",
    "\n",
    "## So What's the Catch???\n",
    "\n",
    "* **BLUEBERRIES** show up to ruin our day (as usual üòû)\n",
    "* We hash, so far so good: `h('Blueberries') = 'B'`\n",
    "* But then we go to the `B` slot and see that `(Bananas, 10)` is already there!!! Wtf do we do here... don't panic!\n",
    "* The answer? We open our HW1 from DSAN 5500 and remember that we have our lovely friend the `LinkedList` that we can use whenever and however we want!\n",
    "\n",
    "## Arrays vs. Linked Lists\n",
    "\n",
    "* Jeff is hiding something here... Why jump to `LinkedList`? Why not just... another length-26 array, for example?\n",
    "* For this we open up our Week 1 slides and remember the **stack** vs. **heap** distinction: we **know** how many letters in the alphabet, we **don't know** how many items starting with `B` (or, if we do, we want to be able to expand/contract our price list to handle new/discontinued items)\n",
    "* Terminology for this kind of \"hybrid\" data structure: `HashTable` is an `Array` that **\"degenerates into\"** a `LinkedList` (when there are **collisions**)\n",
    "\n",
    "## Look How Far We Came!\n",
    "\n",
    "* Beginning of class: Only structure we knew allowing insertion (`LinkedList`) was $O(n)$ for everythihg\n",
    "* End of class: New structure where suddenly everything is $O(1)$, except in \"unlucky\" cases, in which it partially **\"degenerates\"** into a `LinkedList`\n",
    "* $\\implies$ The \"inevitable\" $O(n)$ runtime has transformed into the unlucky worst-case **upper bound**\n",
    "* $\\implies$ By taking **core** data structures/algorithms from your toolkit, you can \"piece together\" **hybrid structures** whose *whole (runtime) is better than the sum of its parts*\n",
    "\n",
    "## Taking This Idea and Running With It\n",
    "\n",
    "* Next week we'll look at `BinarySearchTree` (`BST`)\n",
    "* Since it's just a glorified `LinkedList`, we'll be able to take our `HashMap` from today and \"drop in\" the `BST` to play the role the `LinkedList` is playing right now\n",
    "* i.e., when there's a collision, we'll create a `BST` with its $O(\\log(n))$ operations, rather than a `LinkedList` with its $O(n)$ operations\n",
    "* $\\implies$ `HashMap` will go from [$O(1)$ best-case / $O(n)$ worst-case] to [$O(1)$ best-case / $O(\\log_2(n))$ worst-case]! Stay tuned...\n",
    "\n",
    "## References\n",
    "\n",
    "::: {#refs}\n",
    ":::"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3",
   "path": "/Users/jpj/.pyenv/versions/3.11.5/share/jupyter/kernels/python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
