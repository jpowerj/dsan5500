[
  {
    "objectID": "w14/slides.html#hw3-why-are-counts-insufficient",
    "href": "w14/slides.html#hw3-why-are-counts-insufficient",
    "title": "Week 14: Applications in Bioinformatics",
    "section": "HW3: Why Are Counts Insufficient?",
    "text": "HW3: Why Are Counts Insufficient?\n\nYou shall know a word by the company it keeps"
  },
  {
    "objectID": "w14/slides.html#map-reduce-for-counts",
    "href": "w14/slides.html#map-reduce-for-counts",
    "title": "Week 14: Applications in Bioinformatics",
    "section": "Map-Reduce for Counts",
    "text": "Map-Reduce for Counts"
  },
  {
    "objectID": "w14/slides.html#references",
    "href": "w14/slides.html#references",
    "title": "Week 14: Applications in Bioinformatics",
    "section": "References",
    "text": "References"
  },
  {
    "objectID": "w14/index.html",
    "href": "w14/index.html",
    "title": "Week 14: Applications in Bioinformatics",
    "section": "",
    "text": "Open slides in new window ‚Üí",
    "crumbs": [
      "Week 14: {{< var w14.date-md >}}"
    ]
  },
  {
    "objectID": "w14/index.html#hw3-why-are-counts-insufficient",
    "href": "w14/index.html#hw3-why-are-counts-insufficient",
    "title": "Week 14: Applications in Bioinformatics",
    "section": "HW3: Why Are Counts Insufficient?",
    "text": "HW3: Why Are Counts Insufficient?\n\nYou shall know a word by the company it keeps",
    "crumbs": [
      "Week 14: {{< var w14.date-md >}}"
    ]
  },
  {
    "objectID": "w14/index.html#map-reduce-for-counts",
    "href": "w14/index.html#map-reduce-for-counts",
    "title": "Week 14: Applications in Bioinformatics",
    "section": "Map-Reduce for Counts",
    "text": "Map-Reduce for Counts",
    "crumbs": [
      "Week 14: {{< var w14.date-md >}}"
    ]
  },
  {
    "objectID": "w14/index.html#references",
    "href": "w14/index.html#references",
    "title": "Week 14: Applications in Bioinformatics",
    "section": "References",
    "text": "References",
    "crumbs": [
      "Week 14: {{< var w14.date-md >}}"
    ]
  },
  {
    "objectID": "w12/slides.html#how-do-i-pick-a-topic",
    "href": "w12/slides.html#how-do-i-pick-a-topic",
    "title": "Week 12: Final Projects, Interfaces",
    "section": "How Do I Pick A Topic?",
    "text": "How Do I Pick A Topic?\n\nI know that ‚Äúwhatever is interesting to you‚Äù can be way overly-vague!\nSo, one approach is: imagine yourself in a job interview for your dream job, and they bring up DSAN 5450: ‚ÄúInteresting, what did you do in that class?‚Äù\n[Insert final project elevator pitch] ‚ÄúWow, that‚Äôs such a cool project, we really want someone who can [say] take a data-driven approach to a policy question like that. You‚Äôre hired!‚Äù\n(Jeff gets a commission: 10% of your salary)"
  },
  {
    "objectID": "w12/slides.html#getting-from-here-to-there",
    "href": "w12/slides.html#getting-from-here-to-there",
    "title": "Week 12: Final Projects, Interfaces",
    "section": "Getting From Here to There",
    "text": "Getting From Here to There\n\n\nMinimum Viable Product (MVP)\n\\(\\leadsto\\) Final Product (but‚Ä¶ Hofstadter‚Äôs Law)\n\n\n\n\n\n Hofstadter‚Äôs Law (Paraphrase)\n\n\nThe pieces of your DSAN final project will take longer than you expect, even if you take Hofstadter‚Äôs Law into account"
  },
  {
    "objectID": "w12/slides.html#a-deeper-dive",
    "href": "w12/slides.html#a-deeper-dive",
    "title": "Week 12: Final Projects, Interfaces",
    "section": "1. A Deeper Dive",
    "text": "1. A Deeper Dive\n\nExample 1.3: Creating an interactive visualization (using Streamlit, for example) of a data structure or algorithm. (Streamlit demo coming in next section of slides!)"
  },
  {
    "objectID": "w12/slides.html#fixing-an-issue",
    "href": "w12/slides.html#fixing-an-issue",
    "title": "Week 12: Final Projects, Interfaces",
    "section": "2. Fixing an Issue",
    "text": "2. Fixing an Issue\n\nExample 2.2: As you saw in the Midterm, hash tables ‚Äúdegenerate‚Äù from (approximate) \\(O(1)\\) efficiency to \\(O(\\log_2(n))\\) efficiency if the hashing function we use is not efficient or not collision-resistant.\nSo, your project could be to:\n\nExplore and summarize how efficient and collision-resistant hash functions work, and then\nImplement one such hash function in Python."
  },
  {
    "objectID": "w12/slides.html#exploring-applications",
    "href": "w12/slides.html#exploring-applications",
    "title": "Week 12: Final Projects, Interfaces",
    "section": "3. Exploring Applications",
    "text": "3. Exploring Applications\n\nExample 3.2: We learned Breadth-First Search (BFS) and Depth-First Search (DFS) in somewhat of a hurry, as a way to traverse over the nodes in a Binary Search Tree, but they both have many more exciting applications!\nFor example, if you‚Äôre interested in web scraping, you could adapt the HW2 code to create a polymorphic web-scraper:\n\nEach node is a webpage\nProcessing a node means adding each link in that page to the ThingContainer."
  },
  {
    "objectID": "w12/slides.html#proving-things",
    "href": "w12/slides.html#proving-things",
    "title": "Week 12: Final Projects, Interfaces",
    "section": "4. Proving Things",
    "text": "4. Proving Things\n\nExample 4.2: We were able to gradually improve retrieval:\n\n\n\n\n\n\n\n\n\n\n\nLinear\n\nLogarithmic\n\nConstant\n\n\n\n\nLinkedList\\(O(n)\\)\n\\(\\rightarrow\\)\nBST\\(O(\\log_2(n))\\)\n\\(\\rightarrow\\)\nHashTable\\(O(1 + \\varepsilon)\\)\n\n\n\n\nBut then for search, something was missing üßê:\n\n\n\n\n\n\n\n\n\n\n\nLinear\n\nLogarithmic\n\nConstant\n\n\n\n\nInsertion-Sort\\(O(n^2)\\)\n\\(\\rightarrow\\)\nMerge-Sort\\(O(n\\log_2(n))\\)\n\\(\\rightarrow\\)\n???\n\n\n\n\nProve that it‚Äôs not possible to make the additional ‚Äújump‚Äù to constant-time search in \\(O(n)\\), except in very special cases."
  },
  {
    "objectID": "w12/slides.html#building-an-etl-pipeline",
    "href": "w12/slides.html#building-an-etl-pipeline",
    "title": "Week 12: Final Projects, Interfaces",
    "section": "5. Building an ETL Pipeline",
    "text": "5. Building an ETL Pipeline\n\nExample 5.2: If there are particular APIs and Database solutions that you‚Äôve been hoping to explore, now‚Äôs your chance! Create an ETL pipeline which Extracts data from the API, Transforms it in some interesting way, then Loads it into (for example) an SQL or MongoDB database."
  },
  {
    "objectID": "w12/slides.html#fake-data",
    "href": "w12/slides.html#fake-data",
    "title": "Week 12: Final Projects, Interfaces",
    "section": "Fake Data!",
    "text": "Fake Data!\n\nWhen developing (as opposed to deploying) your projects, real data can add additional complexity beyond the MVP!: It might cost $$$, it might be rate-limited, or they might catch you scraping their website and ban you ‚ò†Ô∏è\n\n(Also: might be too complicated to handle in the time available, even if you use Prefect üòâ)\n\nInstead, use Faker!\nIn particular, see Standard Providers page for listing of all the types of data you can fake!"
  },
  {
    "objectID": "w12/slides.html#visual-interfaces",
    "href": "w12/slides.html#visual-interfaces",
    "title": "Week 12: Final Projects, Interfaces",
    "section": "Visual Interfaces",
    "text": "Visual Interfaces\n\nA good number of you are interested in visualizing or allowing interaction with the structures/algorithms from class\nOne quick way to allow this: Streamlit!\nHowever, Streamlit‚Äôs ‚Äúdefault‚Äù is form-based interaction (form in sidebar \\(\\rightarrow\\) results in main panel); a bit more work required to make everything interactive\nDemo to see what I mean, code that you can steal!"
  },
  {
    "objectID": "w12/slides.html#a-reminder-w10",
    "href": "w12/slides.html#a-reminder-w10",
    "title": "Week 12: Final Projects, Interfaces",
    "section": "A Reminder (W10)",
    "text": "A Reminder (W10)\n\nHumans are not capable of true multitasking! In CS terms, this would be called multiprocessing (more on this later)\nWe are capable, however, of various modes of concurrency!\n\n\n\n\n\n\n\n\n\n\nMultithreading\nAsynchronous Execution\n\n\n\n\nUnconsciously(you do it already, ‚Äúnaturally‚Äù)\nFocus on one speaker within a loud room, with tons of other conversations entering your ears\nPut something in oven, set alarm, go do something else, take out of oven once alarm goes off\n\n\nConsciously(you can do it with effort/practice)\nPat head (up and down) and rub stomach (circular motion) ‚Äúsimultaneously‚Äù\nThrow a ball in the air, clap 3 times, catch ball"
  },
  {
    "objectID": "w12/slides.html#parallel-in-python-the-hard-way",
    "href": "w12/slides.html#parallel-in-python-the-hard-way",
    "title": "Week 12: Final Projects, Interfaces",
    "section": "Parallel in Python: The Hard Way",
    "text": "Parallel in Python: The Hard Way\n\nthreading\nmultiprocessing\nasyncio"
  },
  {
    "objectID": "w12/slides.html#joblib",
    "href": "w12/slides.html#joblib",
    "title": "Week 12: Final Projects, Interfaces",
    "section": "‚Ä¶Joblib",
    "text": "‚Ä¶Joblib"
  },
  {
    "objectID": "w12/slides.html#in-action",
    "href": "w12/slides.html#in-action",
    "title": "Week 12: Final Projects, Interfaces",
    "section": "In Action",
    "text": "In Action\n\nimport time\nfrom sympy.ntheory import factorint\nfrom joblib import Parallel, delayed\nparallel_runner = Parallel(n_jobs=4)\nstart, end = 500, 580\ndef find_prime_factors(num):\n  time.sleep(.01)\n  return factorint(num, multiple=True)\ndisp_time = lambda start, end: print('{:.4f} s'.format(end - start))\n\n\n\n\n\nCode\nserial_start = time.time()\nresult = [\n  (i,find_prime_factors(i))\n  for i in range(start, end+1)\n]\nserial_end = time.time()\ndisp_time(serial_start, serial_end)\n\n\n0.9837 s\n\n\n\n\n\nCode\npar_start = time.time()\nresult = parallel_runner(\n  delayed(find_prime_factors)(i)\n  for i in range(start, end+1)\n)\npar_end = time.time()\ndisp_time(par_start, par_end)\n\n\n2.2902 s"
  },
  {
    "objectID": "w12/slides.html#python-rightarrow-prefect",
    "href": "w12/slides.html#python-rightarrow-prefect",
    "title": "Week 12: Final Projects, Interfaces",
    "section": "Python \\(\\rightarrow\\) Prefect",
    "text": "Python \\(\\rightarrow\\) Prefect\n\nCan think of code on prev slide as (implicitly) submitting numbers to the find_prime_factors() task‚Ä¶\nSo, let‚Äôs make this explicit by using Prefect‚Äôs @task annotation!\nLab Time!"
  },
  {
    "objectID": "w12/slides.html#hw4",
    "href": "w12/slides.html#hw4",
    "title": "Week 12: Final Projects, Interfaces",
    "section": "HW4",
    "text": "HW4\n\nDo that but for quotes!\nScrape (one, and then many) page(s) from the default interface, in parallel!"
  },
  {
    "objectID": "w12/slides.html#references",
    "href": "w12/slides.html#references",
    "title": "Week 12: Final Projects, Interfaces",
    "section": "References",
    "text": "References"
  },
  {
    "objectID": "w12/index.html",
    "href": "w12/index.html",
    "title": "Week 12: Final Projects, Interfaces",
    "section": "",
    "text": "Open slides in new window ‚Üí",
    "crumbs": [
      "Week 12: {{< var w12.date-md >}}"
    ]
  },
  {
    "objectID": "w12/index.html#how-do-i-pick-a-topic",
    "href": "w12/index.html#how-do-i-pick-a-topic",
    "title": "Week 12: Final Projects, Interfaces",
    "section": "How Do I Pick A Topic?",
    "text": "How Do I Pick A Topic?\n\nI know that ‚Äúwhatever is interesting to you‚Äù can be way overly-vague!\nSo, one approach is: imagine yourself in a job interview for your dream job, and they bring up DSAN 5450: ‚ÄúInteresting, what did you do in that class?‚Äù\n[Insert final project elevator pitch] ‚ÄúWow, that‚Äôs such a cool project, we really want someone who can [say] take a data-driven approach to a policy question like that. You‚Äôre hired!‚Äù\n(Jeff gets a commission: 10% of your salary)",
    "crumbs": [
      "Week 12: {{< var w12.date-md >}}"
    ]
  },
  {
    "objectID": "w12/index.html#getting-from-here-to-there",
    "href": "w12/index.html#getting-from-here-to-there",
    "title": "Week 12: Final Projects, Interfaces",
    "section": "Getting From Here to There",
    "text": "Getting From Here to There\n\n\nMinimum Viable Product (MVP)\n\\(\\leadsto\\) Final Product (but‚Ä¶ Hofstadter‚Äôs Law)\n\n\n\n\n\n\n\n Hofstadter‚Äôs Law (Paraphrase)\n\n\n\nThe pieces of your DSAN final project will take longer than you expect, even if you take Hofstadter‚Äôs Law into account",
    "crumbs": [
      "Week 12: {{< var w12.date-md >}}"
    ]
  },
  {
    "objectID": "w12/index.html#a-deeper-dive",
    "href": "w12/index.html#a-deeper-dive",
    "title": "Week 12: Final Projects, Interfaces",
    "section": "1. A Deeper Dive",
    "text": "1. A Deeper Dive\n\nExample 1.3: Creating an interactive visualization (using Streamlit, for example) of a data structure or algorithm. (Streamlit demo coming in next section of slides!)",
    "crumbs": [
      "Week 12: {{< var w12.date-md >}}"
    ]
  },
  {
    "objectID": "w12/index.html#fixing-an-issue",
    "href": "w12/index.html#fixing-an-issue",
    "title": "Week 12: Final Projects, Interfaces",
    "section": "2. Fixing an Issue",
    "text": "2. Fixing an Issue\n\nExample 2.2: As you saw in the Midterm, hash tables ‚Äúdegenerate‚Äù from (approximate) \\(O(1)\\) efficiency to \\(O(\\log_2(n))\\) efficiency if the hashing function we use is not efficient or not collision-resistant.\nSo, your project could be to:\n\nExplore and summarize how efficient and collision-resistant hash functions work, and then\nImplement one such hash function in Python.",
    "crumbs": [
      "Week 12: {{< var w12.date-md >}}"
    ]
  },
  {
    "objectID": "w12/index.html#exploring-applications",
    "href": "w12/index.html#exploring-applications",
    "title": "Week 12: Final Projects, Interfaces",
    "section": "3. Exploring Applications",
    "text": "3. Exploring Applications\n\nExample 3.2: We learned Breadth-First Search (BFS) and Depth-First Search (DFS) in somewhat of a hurry, as a way to traverse over the nodes in a Binary Search Tree, but they both have many more exciting applications!\nFor example, if you‚Äôre interested in web scraping, you could adapt the HW2 code to create a polymorphic web-scraper:\n\nEach node is a webpage\nProcessing a node means adding each link in that page to the ThingContainer.",
    "crumbs": [
      "Week 12: {{< var w12.date-md >}}"
    ]
  },
  {
    "objectID": "w12/index.html#proving-things",
    "href": "w12/index.html#proving-things",
    "title": "Week 12: Final Projects, Interfaces",
    "section": "4. Proving Things",
    "text": "4. Proving Things\n\nExample 4.2: We were able to gradually improve retrieval:\n\n\n\n\n\n\n\n\n\n\n\nLinear\n\nLogarithmic\n\nConstant\n\n\n\n\nLinkedList\\(O(n)\\)\n\\(\\rightarrow\\)\nBST\\(O(\\log_2(n))\\)\n\\(\\rightarrow\\)\nHashTable\\(O(1 + \\varepsilon)\\)\n\n\n\n\nBut then for search, something was missing üßê:\n\n\n\n\n\n\n\n\n\n\n\nLinear\n\nLogarithmic\n\nConstant\n\n\n\n\nInsertion-Sort\\(O(n^2)\\)\n\\(\\rightarrow\\)\nMerge-Sort\\(O(n\\log_2(n))\\)\n\\(\\rightarrow\\)\n???\n\n\n\n\nProve that it‚Äôs not possible to make the additional ‚Äújump‚Äù to constant-time search in \\(O(n)\\), except in very special cases.",
    "crumbs": [
      "Week 12: {{< var w12.date-md >}}"
    ]
  },
  {
    "objectID": "w12/index.html#building-an-etl-pipeline",
    "href": "w12/index.html#building-an-etl-pipeline",
    "title": "Week 12: Final Projects, Interfaces",
    "section": "5. Building an ETL Pipeline",
    "text": "5. Building an ETL Pipeline\n\nExample 5.2: If there are particular APIs and Database solutions that you‚Äôve been hoping to explore, now‚Äôs your chance! Create an ETL pipeline which Extracts data from the API, Transforms it in some interesting way, then Loads it into (for example) an SQL or MongoDB database.",
    "crumbs": [
      "Week 12: {{< var w12.date-md >}}"
    ]
  },
  {
    "objectID": "w12/index.html#fake-data",
    "href": "w12/index.html#fake-data",
    "title": "Week 12: Final Projects, Interfaces",
    "section": "Fake Data!",
    "text": "Fake Data!\n\nWhen developing (as opposed to deploying) your projects, real data can add additional complexity beyond the MVP!: It might cost $$$, it might be rate-limited, or they might catch you scraping their website and ban you ‚ò†Ô∏è\n\n(Also: might be too complicated to handle in the time available, even if you use Prefect üòâ)\n\nInstead, use Faker!\nIn particular, see Standard Providers page for listing of all the types of data you can fake!",
    "crumbs": [
      "Week 12: {{< var w12.date-md >}}"
    ]
  },
  {
    "objectID": "w12/index.html#visual-interfaces",
    "href": "w12/index.html#visual-interfaces",
    "title": "Week 12: Final Projects, Interfaces",
    "section": "Visual Interfaces",
    "text": "Visual Interfaces\n\nA good number of you are interested in visualizing or allowing interaction with the structures/algorithms from class\nOne quick way to allow this: Streamlit!\nHowever, Streamlit‚Äôs ‚Äúdefault‚Äù is form-based interaction (form in sidebar \\(\\rightarrow\\) results in main panel); a bit more work required to make everything interactive\nDemo to see what I mean, code that you can steal!",
    "crumbs": [
      "Week 12: {{< var w12.date-md >}}"
    ]
  },
  {
    "objectID": "w12/index.html#a-reminder-w10",
    "href": "w12/index.html#a-reminder-w10",
    "title": "Week 12: Final Projects, Interfaces",
    "section": "A Reminder (W10)",
    "text": "A Reminder (W10)\n\nHumans are not capable of true multitasking! In CS terms, this would be called multiprocessing (more on this later)\nWe are capable, however, of various modes of concurrency!\n\n\n\n\n\n\n\n\n\n\nMultithreading\nAsynchronous Execution\n\n\n\n\nUnconsciously(you do it already, ‚Äúnaturally‚Äù)\nFocus on one speaker within a loud room, with tons of other conversations entering your ears\nPut something in oven, set alarm, go do something else, take out of oven once alarm goes off\n\n\nConsciously(you can do it with effort/practice)\nPat head (up and down) and rub stomach (circular motion) ‚Äúsimultaneously‚Äù\nThrow a ball in the air, clap 3 times, catch ball",
    "crumbs": [
      "Week 12: {{< var w12.date-md >}}"
    ]
  },
  {
    "objectID": "w12/index.html#parallel-in-python-the-hard-way",
    "href": "w12/index.html#parallel-in-python-the-hard-way",
    "title": "Week 12: Final Projects, Interfaces",
    "section": "Parallel in Python: The Hard Way",
    "text": "Parallel in Python: The Hard Way\n\nthreading\nmultiprocessing\nasyncio",
    "crumbs": [
      "Week 12: {{< var w12.date-md >}}"
    ]
  },
  {
    "objectID": "w12/index.html#joblib",
    "href": "w12/index.html#joblib",
    "title": "Week 12: Final Projects, Interfaces",
    "section": "‚Ä¶Joblib",
    "text": "‚Ä¶Joblib",
    "crumbs": [
      "Week 12: {{< var w12.date-md >}}"
    ]
  },
  {
    "objectID": "w12/index.html#in-action",
    "href": "w12/index.html#in-action",
    "title": "Week 12: Final Projects, Interfaces",
    "section": "In Action",
    "text": "In Action\n\nimport time\nfrom sympy.ntheory import factorint\nfrom joblib import Parallel, delayed\nparallel_runner = Parallel(n_jobs=4)\nstart, end = 500, 580\ndef find_prime_factors(num):\n  time.sleep(.01)\n  return factorint(num, multiple=True)\ndisp_time = lambda start, end: print('{:.4f} s'.format(end - start))\n\n\n\n\n\nCode\nserial_start = time.time()\nresult = [\n  (i,find_prime_factors(i))\n  for i in range(start, end+1)\n]\nserial_end = time.time()\ndisp_time(serial_start, serial_end)\n\n\n0.9728 s\n\n\n\n\n\nCode\npar_start = time.time()\nresult = parallel_runner(\n  delayed(find_prime_factors)(i)\n  for i in range(start, end+1)\n)\npar_end = time.time()\ndisp_time(par_start, par_end)\n\n\n2.2737 s",
    "crumbs": [
      "Week 12: {{< var w12.date-md >}}"
    ]
  },
  {
    "objectID": "w12/index.html#python-rightarrow-prefect",
    "href": "w12/index.html#python-rightarrow-prefect",
    "title": "Week 12: Final Projects, Interfaces",
    "section": "Python \\(\\rightarrow\\) Prefect",
    "text": "Python \\(\\rightarrow\\) Prefect\n\nCan think of code on prev slide as (implicitly) submitting numbers to the find_prime_factors() task‚Ä¶\nSo, let‚Äôs make this explicit by using Prefect‚Äôs @task annotation!\nLab Time!",
    "crumbs": [
      "Week 12: {{< var w12.date-md >}}"
    ]
  },
  {
    "objectID": "w12/index.html#hw4",
    "href": "w12/index.html#hw4",
    "title": "Week 12: Final Projects, Interfaces",
    "section": "HW4",
    "text": "HW4\n\nDo that but for quotes!\nScrape (one, and then many) page(s) from the default interface, in parallel!",
    "crumbs": [
      "Week 12: {{< var w12.date-md >}}"
    ]
  },
  {
    "objectID": "w12/index.html#references",
    "href": "w12/index.html#references",
    "title": "Week 12: Final Projects, Interfaces",
    "section": "References",
    "text": "References",
    "crumbs": [
      "Week 12: {{< var w12.date-md >}}"
    ]
  },
  {
    "objectID": "syllabus.html",
    "href": "syllabus.html",
    "title": "Syllabus",
    "section": "",
    "text": "Welcome to DSAN 5500: Data Structures, Objects, and Algorithms in Python! The course meets on Thursdays from 6:30pm to 9:00pm in Healy Room 104.",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "syllabus.html#course-staff",
    "href": "syllabus.html#course-staff",
    "title": "Syllabus",
    "section": "Course Staff",
    "text": "Course Staff\n\nProf.¬†Jeff Jacobs, jj1088@georgetown.edu\n\nOffice hours (Click to reserve): Tuesdays 3-6pm, Car Barn 207-03\n\nTA Renee DeMaio, jrd154@georgetown.edu\n\nOffice hours TBD\n\nTA Jiatong Liu, jl3081@georgetown.edu\n\nOffice hours TBD",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "syllabus.html#course-overview",
    "href": "syllabus.html#course-overview",
    "title": "Syllabus",
    "section": "Course Overview",
    "text": "Course Overview\nMy goal, in creating the course, is to take the general, language-agnostic data science concepts you‚Äôve learned in (e.g.) DSAN 5000 and work through how to implement these concepts efficiently in Python, where we can define ‚Äúefficient‚Äù in different ways based on different goals that we may have in different settings while working as Data Scientists.\nThe graded components for the course consist of five homework assignments, an in-class midterm, and a final project. Grades will be allocated as follows:\n\n\n\nCategory\nPercent of Final Grade\n\n\n\n\nIn-Class Midterm\n30%\n\n\nFinal Project\n30%\n\n\nHomeworks\n40%\n\n\nHW1: Python Fundamentals\n8%\n\n\nHW2: Object-Oriented Programming\n8%\n\n\nHW3: Data Structures, Algorithms, and Complexity\n8%\n\n\nHW4: Data-Processing Pipelines\n8%\n\n\nHW5: Parallel Computing\n8%\n\n\n\nThe course does not have any ‚Äúofficial‚Äù prerequisites, but a general comfort with Python is strongly recommended. If you have never used Python before, however (or if you haven‚Äôt used it in a while and feel like your skills are rusty), you can browse the materials on the Resources page!",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "syllabus.html#course-topics-calendar",
    "href": "syllabus.html#course-topics-calendar",
    "title": "Syllabus",
    "section": "Course Topics / Calendar",
    "text": "Course Topics / Calendar\nThe following is a rough map of what we will work through together throughout the semester; given that everyone learns at a different pace, my aim is to leave us with a good amount of flexibility in terms of how much time we spend on each topic: if I find that it takes me longer than a week to convey a certain topic in sufficient depth, for example, then I view it as a strength rather than a weakness of the course that we can then rearrange the calendar below by adding an extra week on that particular topic! Similarly, if it seems like I am spending too much time on a topic, to the point that students seem bored or impatient to move onto the next topic, we can move a topic intended for the next week to the current week!\n\n\n\nUnit\nWeek\nDate\nTopic\n\n\n\n\nUnit 1: Python Fundamentals\n1\nJan 9\nCourse Intro and Motivation\n\n\n\n2\nJan 16\nSoftware Design Patterns and Object-Oriented Programming\n\n\nUnit 2: Object-Oriented Programming\n3\nJan 23\nData Structures and Computational Complexity\n\n\n\n\nJan 27 (Monday), 11:59pm EST\nHW1 (Python Fundamentals) Due\n\n\n\n4\nJan 30\nData Structures from Scratch with OOP\n\n\nUnit 3: Data Structures, Algorithms, and Complexity\n5\nFeb 6\nBinary Search Trees\n\n\n\n\nFeb 7 (Friday), 5:59pm EST\nHW2 (Object-Oriented Programming) Due\n\n\n\n6\nFeb 13\nDepth-First and Breadth-First Search\n\n\n\n7\nFeb 20\nCode Examples and Midterm Prep\n\n\n\n\nFeb 21 (Friday), 5:59pm EST\nHW3 (Data Structures, Algorithms, and Complexity) Due\n\n\nMidterm\n8\nFeb 27\nIn-Class Midterm\n\n\n\n\nMar 6\nNo Class (Spring Break)\n\n\nUnit 4: Data-Processing Pipelines\n9\nMar 13\nData Validation, Data Processing Pipelines\n\n\n\n10\nMar 20\nData Pipeline Orchestration\n\n\n\n\nMar 21 (Friday), 5:59pm EDT\nHW4 (Data-Processing Pipelines) Due\n\n\n\n11\nMar 27\nMoving from Serial to Parallel Pipelines\n\n\n\n12\nApr 3\nParallel Pipelines and Map-Reduce\n\n\n\n\nApr 4 (Friday), 5:59pm EDT\nHW5 (Parallel Computing) Due\n\n\nUnit 5: Final Project Topics and Applications\n13\nApr 10\nFinal Projects, Interfaces\n\n\n\n14\nApr 24\nApplications: NLP and Bioinformatics\n\n\n\n15\nMay 1\nFinal Projects Celebration\n\n\n\n\nMay 3 (Friday), 11:59pm EST\nFinal Project Due",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "syllabus.html#assignment-distribution-submission-and-grading",
    "href": "syllabus.html#assignment-distribution-submission-and-grading",
    "title": "Syllabus",
    "section": "Assignment Distribution, Submission, and Grading",
    "text": "Assignment Distribution, Submission, and Grading\nThe programming assignments for the course will be managed through Google Classroom. This means that, to work on and submit the assignments, you will use the following workflow:\n\nOpen the .ipynb file for the assignment from within Google Classroom\nWork on the problems within the file, saving your progress early and often! You can try things out or create drafts of your solutions however you‚Äôd like (for example, in VSCode or JupyterLab or any other IDE), but your final response to each question must be included in your Colab notebook as accessed through Google Classroom!\nSubmit the completed version of the assignment by clicking the ‚ÄúSubmit‚Äù button generated by the last cell in each assignment‚Äôs Colab notebook.",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "syllabus.html#late-policy",
    "href": "syllabus.html#late-policy",
    "title": "Syllabus",
    "section": "Late Policy",
    "text": "Late Policy\nAfter the due date, for each homework assignment, you will have a grace period of 24 hours to submit the assignment without a lateness penalty. After this 24 hour grace period, late penalties will be applied up until 66 hours after the due date. Specifically, late penalties will be applied based on the following scale (unless you obtain an excused lateness from one of the instructional staff!):\n\n0 to 24 hours after due date: no penalty\n24 to 30 hours after due date: 2.5% penalty\n30 to 42 hours after due date: 5% penalty\n42 to 54 hours after due date: 10% penalty\n54 to 66 hours after due date: 20% penalty\nMore than 66 hours after due date: Assignment submissions no longer accepted (without instructor approval)",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "syllabus.html#final-letter-grade-determination",
    "href": "syllabus.html#final-letter-grade-determination",
    "title": "Syllabus",
    "section": "Final Letter Grade Determination",
    "text": "Final Letter Grade Determination\nOnce all assignments have been graded, we will compute your final numeric grade according to the above weighting, rounded to two decimal places. The letter grade that we report to Georgetown on the basis of this numeric grade will then follow the DSAN letter grade policy as follows, where the start and end points for each range are inclusive:\n\n\n\nRange Start\nRange End\nLetter Grade\n\n\n\n\n92.50\n100.00\nA\n\n\n89.50\n92.49\nA-\n\n\n87.99\n89.49\nB+\n\n\n81.50\n87.98\nB\n\n\n79.50\n81.49\nB-\n\n\n69.50\n79.49\nC\n\n\n59.50\n69.49\nD\n\n\n0.00\n59.49\nF",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "syllabus.html#official-course-description",
    "href": "syllabus.html#official-course-description",
    "title": "Syllabus",
    "section": "Official Course Description",
    "text": "Official Course Description\nThe Data Structures, Objects, and Algorithms in Python course will look at built-in data structures, such as dictionaries, lists, tuples, sets, strings, and frozen sets. The course will also cover objects and classes in Python, as well as building new structures and objects. The class will cover algorithms including runtime, recurrence, and development. Applications will include data science problems. Prerequisite: A working or intermediate knowledge of Python. 3 credits.",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "syllabus.html#title-ixsexual-misconduct-statement",
    "href": "syllabus.html#title-ixsexual-misconduct-statement",
    "title": "Syllabus",
    "section": "Title IX/Sexual Misconduct Statement",
    "text": "Title IX/Sexual Misconduct Statement\nGeorgetown University and its faculty are committed to supporting survivors and those impacted by sexual misconduct, which includes sexual assault, sexual harassment, relationship violence, and stalking. Georgetown requires faculty members, unless otherwise designated as confidential, to report all disclosures of sexual misconduct to the University Title IX Coordinator or a Deputy Title IX Coordinator.\nIf you disclose an incident of sexual misconduct to a professor in or outside of the classroom (with the exception of disclosures in papers), that faculty member must report the incident to the Title IX Coordinator, or Deputy Title IX Coordinator. The coordinator will, in turn, reach out to the student to provide support, resources, and the option to meet. [Please note that the student is not required to meet with the Title IX coordinator.]. More information about reporting options and resources can be found in the Sexual Misconduct Resource Center.\nIf you would prefer to speak to someone confidentially, Georgetown has a number of fully confidential professional resources that can provide support and assistance. These resources include:\n\nHealth Education Services for Sexual Assault Response and Prevention: Confidential email sarp@georgetown.edu\nCounseling and Psychiatric Services (CAPS): 202-687-6985\n\nAfter hours you can call 833-960-3006 to reach Fonemed, a telehealth service, and ask for the on-call CAPS clinician",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "syllabus.html#gsas-resources-and-policies-for-students",
    "href": "syllabus.html#gsas-resources-and-policies-for-students",
    "title": "Syllabus",
    "section": "GSAS Resources and Policies for Students",
    "text": "GSAS Resources and Policies for Students\nYou can find a collection of relevant resources and policies for students on the GSAS website, and the Provost‚Äôs policy on accommodating students‚Äô religious observances on the Campus Ministry website.\nYou can also make use of the Student Academic Resource Center. In particular, within the Resource Center there is a link to Georgetown‚Äôs Disability Support page. If you believe you have a disability, you can contact the Academic Resource Center (arc@georgetown.edu) for further information. The ARC is located in the Leavey Center, Suite 335 (202-687-8354), and it is the campus office responsible for reviewing documentation provided by students with disabilities and for determining reasonable accommodations in accordance with the Americans with Disabilities Act (ADA) and University policies.",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "w06/slides.html#hammers-vs.-structures-built-whammers",
    "href": "w06/slides.html#hammers-vs.-structures-built-whammers",
    "title": "Week 6: Depth-First and Breadth-First Search",
    "section": "Hammers vs.¬†Structures Built w/Hammers",
    "text": "Hammers vs.¬†Structures Built w/Hammers\n\n\nHow I see the course title:\n\nData Structures!\nObjects!, and\nAlgorithms! (in Python)\n\nHow people I‚Äôm trying to meet halfway see the title(?): (Data Structures, Objects, and Algorithms) in Python!"
  },
  {
    "objectID": "w06/slides.html#many-many-education-systems-including-dcps",
    "href": "w06/slides.html#many-many-education-systems-including-dcps",
    "title": "Week 6: Depth-First and Breadth-First Search",
    "section": "Many, Many Education Systems (including DCPS)",
    "text": "Many, Many Education Systems (including DCPS)\n\n‚ÄúThis is the correct way to do _________‚Äù\n\nRegurgitate it: ‚úÖüíØ‚úÖ (Didn‚Äôt get hit with stick üòé)\nFail to regurgitate it: ‚ùåüëé‚ùå (Got hit with stick üòî)"
  },
  {
    "objectID": "w06/slides.html#studies-of-learning-motivation",
    "href": "w06/slides.html#studies-of-learning-motivation",
    "title": "Week 6: Depth-First and Breadth-First Search",
    "section": "Studies of Learning + Motivation",
    "text": "Studies of Learning + Motivation\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nApproach 1\n\n\nFocus attention on (sufficiently interesting) structure\n\\(\\implies\\) students‚Äô comfort with tools ‚Äúarises out of‚Äù wanting to build it\n\\(\\implies\\) students discover ways to use tools that ‚Äúclick‚Äù w/them specifically (serotonin spike: tool \\(\\leftrightarrow\\) thing they built)\n\n\nApproach 2\n\n\nTell students correct and incorrect ways to use tools\n\\(\\implies\\) students learn ‚Äúcorrect‚Äù and ‚Äúincorrect‚Äù as rules\n\\(\\implies\\) (a) lower retention, (b) less adaptability to new tools"
  },
  {
    "objectID": "w06/slides.html#applies-equally-well-whether",
    "href": "w06/slides.html#applies-equally-well-whether",
    "title": "Week 6: Depth-First and Breadth-First Search",
    "section": "Applies Equally Well Whether‚Ä¶",
    "text": "Applies Equally Well Whether‚Ä¶\n\n\nYou‚Äôre in Cuba‚Ä¶\n\n\n\n\n\n\n‚Ä¶OR u just want that data sci BAG! üí∞"
  },
  {
    "objectID": "w06/slides.html#midterm-metadata",
    "href": "w06/slides.html#midterm-metadata",
    "title": "Week 6: Depth-First and Breadth-First Search",
    "section": "Midterm Metadata",
    "text": "Midterm Metadata\n\nCoding Portion: Modifications of LinkedList (Circular / jump-to-end / doubly-linked); non-scary OOP skeleton üôà\nMultiple Choice Portion: Lots more to cover‚Ä¶\nHash Tables: \\(O(1 + \\epsilon \\log_2(n))\\), but think about it as:\n\\(1 + (\\text{Collision rate}) \\cdot (\\text{Collision handler efficiency})\\)\nLinked List \\(\\rightarrow\\) Binary Search Tree\nDepth-First vs.¬†Breadth-First: Picture of a tree \\(\\rightarrow\\) (a) what is BFS result, (b) what is (in/pre/post)-order DFS result?\nLastly: Cormen, Leiserson, Rivest, Stein (CLRS), pgs. 17-106"
  },
  {
    "objectID": "w06/slides.html#bst-building-blocks-on-hw3",
    "href": "w06/slides.html#bst-building-blocks-on-hw3",
    "title": "Week 6: Depth-First and Breadth-First Search",
    "section": "BST Building Blocks on HW3",
    "text": "BST Building Blocks on HW3\n\nFor HW3, we provide you with an InventoryItem class\nTwo instance variables: item_name and price\nEquivalence relations:\n\n__eq__(other), __ne__(other)\n\nOrdering relations:\n\n__lt__(other), __le__(other), __gt__(other), __ge__(other)\n\nBonus: __repr__() and __str__()"
  },
  {
    "objectID": "w06/slides.html#lls-rightarrow-bsts-the-hard-part",
    "href": "w06/slides.html#lls-rightarrow-bsts-the-hard-part",
    "title": "Week 6: Depth-First and Breadth-First Search",
    "section": "LLs \\(\\rightarrow\\) BSTs: The Hard Part",
    "text": "LLs \\(\\rightarrow\\) BSTs: The Hard Part\n\nWhen we were working with LinkedLists, we could access all items by just ‚Äúlooping through‚Äù, from one element to the next, printing as we go along.\nBut‚Ä¶ for a BST, our structure can now branch as we traverse it‚Ä¶ How do we ‚Äúloop through‚Äù a BST?\nTwo fundamentally different ways to traverse every node\n‚ÄúOpposites‚Äù of each other, so that one is often extremely efficient and the other extremely inefficient for a given task\nYour job as a data scientist is to think carefully about which one is more efficient for a given goal!"
  },
  {
    "objectID": "w06/slides.html#two-ways-to-traverse-irl-version",
    "href": "w06/slides.html#two-ways-to-traverse-irl-version",
    "title": "Week 6: Depth-First and Breadth-First Search",
    "section": "Two Ways to Traverse: IRL Version",
    "text": "Two Ways to Traverse: IRL Version\n\nImagine we‚Äôre trying to learn about a topic \\(\\tau\\) using Wikipedia, so we find its article \\(\\tau_0\\)\nThere are two ‚Äúextremes‚Äù in terms of strategies we could follow for learning, given the contents of the article as well as the links it contains to other articles\n\n\n\n\n\n Depth-First Search (DFS)\n\n\n\nOpen \\(\\tau_0\\) and start reading; When we encounter a link we always click it, immediately start reading the new article.\nIf we hit an article with no links (or a dead end/broken link), we finish reading it and click the back button, picking up where we left off in the previous article. When we reach the end of \\(\\tau_0\\), we‚Äôre done!\n\n\n\n\n\n\n\n\n\n Breadth-First Search (BFS)\n\n\n\nBookmark \\(\\tau_0\\) in a folder called ‚ÄúLevel 0 Articles‚Äù; open and start reading it\nWhen we encounter a link, we put it in a ‚ÄúLevel 1 Articles‚Äù folder, but continue reading \\(\\tau_0\\) until we reach the end.\nWe then open all ‚ÄúLevel 1 Articles‚Äù in new tabs, placing links we encounter in these articles into a ‚ÄúLevel 2 Articles‚Äù folder, that we only start reading once all ‚ÄúLevel 1 Articles‚Äù are read\nWe continue like this, reading ‚ÄúLevel 3 Articles‚Äù once we‚Äôre done with ‚ÄúLevel 2 Articles‚Äù, ‚ÄúLevel 4 Articles‚Äù once we‚Äôre done with ‚ÄúLevel 3 Articles‚Äù, and so on. (Can you see a sense in which this is the ‚Äúopposite‚Äù of DFS?)\n\n\n\n\n\n\n‚Ä¶Let‚Äôs try them out! I clicked ‚ÄúRandom Article‚Äù and got Eustache de Saint Pierre"
  },
  {
    "objectID": "w06/slides.html#two-ways-to-traverse-picture-version",
    "href": "w06/slides.html#two-ways-to-traverse-picture-version",
    "title": "Week 6: Depth-First and Breadth-First Search",
    "section": "Two Ways to Traverse: Picture Version",
    "text": "Two Ways to Traverse: Picture Version\n\n\n\n\nCode\nfrom hw2 import LinkedList, InventoryItem, BinarySearchTree\nbst = BinarySearchTree()\nitem1 = InventoryItem('Mango', 50)\nbst.add(item1)\nitem2 = InventoryItem('Pickle', 60)\nbst.add(item2)\nitem3 = InventoryItem('Artichoke', 55)\nbst.add(item3)\nitem5 = InventoryItem('Banana', 123)\nbst.add(item5)\nitem6 = InventoryItem('Aardvark', 11)\nbst.add(item6)\nHTML(visualize(bst))\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nfrom hw2 import IterAlgorithm, NodeProcessor\nprint(\"DFS:\")\ndfs_processor = NodeProcessor(IterAlgorithm.DEPTH_FIRST)\n#print(type(dfs_processor.node_container))\ndfs_processor.iterate_over(bst)\n\nprint(\"\\nBFS:\")\nbfs_processor = NodeProcessor(IterAlgorithm.BREADTH_FIRST)\n#print(type(bfs_processor.node_container))\nbfs_processor.iterate_over(bst)\n\n\nDFS:\nInventoryItem[item_name=Mango,price=50]\nInventoryItem[item_name=Pickle,price=60]\nInventoryItem[item_name=Artichoke,price=55]\nInventoryItem[item_name=Banana,price=123]\nInventoryItem[item_name=Aardvark,price=11]\n\nBFS:\nInventoryItem[item_name=Mango,price=50]\nInventoryItem[item_name=Artichoke,price=55]\nInventoryItem[item_name=Pickle,price=60]\nInventoryItem[item_name=Aardvark,price=11]\nInventoryItem[item_name=Banana,price=123]"
  },
  {
    "objectID": "w06/slides.html#two-ways-to-traverse-in-words-version",
    "href": "w06/slides.html#two-ways-to-traverse-in-words-version",
    "title": "Week 6: Depth-First and Breadth-First Search",
    "section": "Two Ways to Traverse: In-Words Version",
    "text": "Two Ways to Traverse: In-Words Version\n\nDepth-First Search (DFS): With this approach, we iterate through the BST by always taking the left child as the ‚Äúnext‚Äù child until we hit a leaf node (which means, we cannot follow this left-child pointer any longer, since a leaf node does not have a left child or a right child!), and only at that point do we back up and take the right children we skipped.\nBreadth-First Search (BFS): This is the ‚Äúopposite‚Äù of DFS in the sense that we traverse the tree level-by-level, never moving to the next level of the tree until we‚Äôre sure that we have visited every node on the current level."
  },
  {
    "objectID": "w06/slides.html#two-ways-to-traverse-animated-version",
    "href": "w06/slides.html#two-ways-to-traverse-animated-version",
    "title": "Week 6: Depth-First and Breadth-First Search",
    "section": "Two Ways to Traverse: Animated Version",
    "text": "Two Ways to Traverse: Animated Version\n\n\n\n\n\n\n\n\n\nDepth-First Search (from Wikimedia Commons)\n\n\n\n\n\n\n\nBreadth-First Search (from Wikimedia Commons)"
  },
  {
    "objectID": "w06/slides.html#two-ways-to-traverse-underlying-data-structures",
    "href": "w06/slides.html#two-ways-to-traverse-underlying-data-structures",
    "title": "Week 6: Depth-First and Breadth-First Search",
    "section": "Two Ways to Traverse: Underlying Data Structures",
    "text": "Two Ways to Traverse: Underlying Data Structures\n\nNow that you have some intuition, you may be thinking that they might require very different code to implement ü§î\nThis is where mathematically-formal link between the two becomes ultra helpful!\nIt turns out (and a full-on algorithmic theory course makes you prove) that\n\nDepth-First Search can be accomplished by processing nodes in an order determined by adding each to a stack, while\nBreadth-First Search can be accomplished by processing nodes in an order determined by adding each to a queue!\n\n\\(\\implies\\) Literally identical code, ‚Äúpulling out‚Äù the word stack and replacing it with the word queue within your code (or vice-versa).\nPut your Software Engineer Hat on: this calls for an abstraction layer!\n\n(OOP hint: Notice how we‚Äôre not teaching you how Queue and Stack work, and not asking you to implement it ü§®)"
  },
  {
    "objectID": "w06/slides.html#two-ways-to-traverse-hw3-version",
    "href": "w06/slides.html#two-ways-to-traverse-hw3-version",
    "title": "Week 6: Depth-First and Breadth-First Search",
    "section": "Two Ways to Traverse: HW3 Version",
    "text": "Two Ways to Traverse: HW3 Version\n\nYou‚Äôll make a class called NodeProcessor, with a single iterate_over(tree) function\nThis function‚Äîwithout any changes in the code or even any if statements!‚Äîwill be capable of both DFS and BFS\n\nThat‚Äôs a hint: lose points if there‚Äôs an if statement! üëÄ (bc, the whole point of OOP! Encapsulation, abstraction)\n\nConstructor takes in a ThingContainer (could be a stack or a queue, you won‚Äôt know which), with two functions:\n\nput_new_thing_in(new_thing)\ntake_existing_thing_out()"
  },
  {
    "objectID": "w06/slides.html#thingcontainer-the-oop-structure-you-see",
    "href": "w06/slides.html#thingcontainer-the-oop-structure-you-see",
    "title": "Week 6: Depth-First and Breadth-First Search",
    "section": "ThingContainer: The OOP Structure You See",
    "text": "ThingContainer: The OOP Structure You See"
  },
  {
    "objectID": "w06/slides.html#secret-full-oop-structure-you-dont-see",
    "href": "w06/slides.html#secret-full-oop-structure-you-dont-see",
    "title": "Week 6: Depth-First and Breadth-First Search",
    "section": "Secret Full OOP Structure You Don‚Äôt See",
    "text": "Secret Full OOP Structure You Don‚Äôt See"
  },
  {
    "objectID": "w06/slides.html#one-animal-in-the-bfs-species",
    "href": "w06/slides.html#one-animal-in-the-bfs-species",
    "title": "Week 6: Depth-First and Breadth-First Search",
    "section": "One Animal in the BFS Species",
    "text": "One Animal in the BFS Species\n\nFor this and next slide, constant-time preliminary step: ‚ÄúAdd root to container‚Äù (a ThingContainer object)\n\n\n\n\n\n\n\n\nProcedure\nAlgorithm\n\n\n\n\nBreadth-First Search\nwhile [container not empty]:¬†¬†¬†¬†1. Take thing out¬†¬†¬†¬†2. Print thing content¬†¬†¬†¬†3. Add left child to container¬†¬†¬†¬†4. Add right child to container"
  },
  {
    "objectID": "w06/slides.html#three-animals-in-the-dfs-species",
    "href": "w06/slides.html#three-animals-in-the-dfs-species",
    "title": "Week 6: Depth-First and Breadth-First Search",
    "section": "Three Animals in the DFS Species",
    "text": "Three Animals in the DFS Species\n\n\n\n\n\n\n\nDFS Procedure\nAlgorithm\n\n\n\n\nPre-Order Traversal\n1. Print node2. DFS left subtree3. DFS right subtree\n\n\nIn-Order Traversal üßê‚ÄºÔ∏è\n1. DFS left subtree2. Print node3. DFS right subtree\n\n\nPost-Order Traversal\n1. DFS left subtree2. DFS right subtree3. Print node"
  },
  {
    "objectID": "w06/slides.html#the-three-animals-traverse-our-inventory-tree",
    "href": "w06/slides.html#the-three-animals-traverse-our-inventory-tree",
    "title": "Week 6: Depth-First and Breadth-First Search",
    "section": "The Three Animals Traverse our Inventory Tree",
    "text": "The Three Animals Traverse our Inventory Tree\n\n\nCode\nvisualize(bst)"
  },
  {
    "objectID": "w06/slides.html#more-memory-more-performance",
    "href": "w06/slides.html#more-memory-more-performance",
    "title": "Week 6: Depth-First and Breadth-First Search",
    "section": "More Memory, More Performance",
    "text": "More Memory, More Performance\n\nThe last part challenges you to ask: why stop at a hash based on just the first letter of the key?\nWe could just as easily use the first two letters:\nh('AA') = 0, h('AB') = 1, ‚Ä¶, h('AZ') = 25,\nh('BA') = 26, h('BB') = 27, ‚Ä¶, h('BZ') = 51,\nh('CA') = 52, ‚Ä¶, h('ZZ') = 675.\nYou will see how this gets us even closer to the elusive \\(O(1)\\)! And we could get even closer with three letters, four letters, ‚Ä¶ ü§îü§îü§î"
  },
  {
    "objectID": "w06/slides.html#alphahasher-vs.-customhasher",
    "href": "w06/slides.html#alphahasher-vs.-customhasher",
    "title": "Week 6: Depth-First and Breadth-First Search",
    "section": "AlphaHasher vs.¬†CustomHasher",
    "text": "AlphaHasher vs.¬†CustomHasher\n# @title define-alpha-hasher\nfrom abc import ABC, abstractmethod\nimport string\n\nclass CustomHasher(ABC):\n  @abstractmethod\n  def __init__(self):\n    pass\n\n  @abstractmethod\n  def get_alphabet_size(self):\n    pass\n\n  @abstractmethod\n  def hash(self, str_to_hash: str) -&gt; int:\n    pass\n\n  @abstractmethod\n  def compute_position_in_alphabet(self, uppercase_key: str) -&gt; int:\n    pass\n\n  @abstractmethod\n  def compute_key_for_index(self, index: int) -&gt; str:\n    pass\n\nclass AlphaHasher(CustomHasher):\n  def __init__(self):\n    self.alphabet_size = 26\n\n  def get_alphabet_size(self):\n    return self.alphabet_size\n\n  def hash(self, str_to_hash: str) -&gt; int:\n    if len(str_to_hash) == 0:\n      first_letter = 'A'\n    else:\n      first_letter = str_to_hash.upper()[0]\n    # And return its index in the alphabet:\n    # 'A' has index 0, 'B' has index 1, etc.\n    return self.compute_position_in_alphabet(first_letter)\n\n  def compute_position_in_alphabet(self, uppercase_key: str) -&gt; int:\n    return string.ascii_uppercase.index(uppercase_key)\n\n  def compute_key_for_index(self, index: int) -&gt; str:\n    return string.ascii_uppercase[index]"
  },
  {
    "objectID": "w06/slides.html#linkedlist-via-polymorphicnode",
    "href": "w06/slides.html#linkedlist-via-polymorphicnode",
    "title": "Week 6: Depth-First and Breadth-First Search",
    "section": "LinkedList via PolymorphicNode",
    "text": "LinkedList via PolymorphicNode\n\nEmptyNode \\(\\rightarrow\\) ContentNode\n\n# @title define-linked-list\nfrom abc import ABC, abstractmethod\n\nclass LinkedList:\n  def __init__(self):\n    self.root = EmptyNode()\n\n  def append(self, item):\n    self.root = self.root.append(item)\n\n  def find_item_steps(self, item):\n    return self.root.find_item_steps(item)\n\n  def to_string(self, recurse: bool):\n    return f'LinkedList[{self.root.to_string(recurse)}]'\n\n  def __repr__(self):\n    return self.to_string(recurse=True)\n\n  def __str__(self):\n    return self.to_string(recurse=False)\n\nclass PolymorphicNode(ABC):\n  @abstractmethod\n  def __init__(self):\n    pass\n\n  @abstractmethod\n  def append(self, item):\n    pass\n\n  @abstractmethod\n  def find_item_steps(self, item):\n    pass\n\n  @abstractmethod\n  def to_string(self, recurse: bool):\n    pass\n\n  def __repr__(self):\n    return self.to_string(recurse=True)\n\n  def __str__(self):\n    return self.to_string(recurse=False)\n\nclass EmptyNode(PolymorphicNode):\n  def __init__(self):\n    super().__init__()\n\n  def append(self, item):\n    \"\"\"\n    This is the only weird part of EmptyNode: because we want to utilize\n    *polymorphism*, when append() is called on an EmptyNode it\n    is \"transformed into\" a FilledNode! That is why, in the\n    LinkedList's append() function, we have self.root = self.root.append(),\n    and why the FilledNode's append() function works the same way\n    \"\"\"\n    #print(\"EmptyLinkedListNode.append()\")\n    new_form = ContentNode(item)\n    return new_form\n\n  def find_item_steps(self, item):\n    return np.inf\n\n  def __len__(self):\n    return 0\n\n  def to_string(self, recurse: bool):\n    return ''\n\nclass ContentNode(PolymorphicNode):\n  def __init__(self, content_arg):\n    super().__init__()\n    self.content = content_arg\n    self.next = EmptyNode()\n\n  def append(self, item):\n    self.next = self.next.append(item)\n    # Return just *self*, since we *haven't* transformed the type of\n    # FilledLinkedListNode by appending another element to it\n    return self\n\n  def find_item_steps(self, item):\n    if self.content == item or self.content[0] == item:\n      return 1\n    return 1 + self.next.find_item_steps(item)\n\n  def get_content(self):\n    return self.content\n\n  def __len__(self):\n    return 1 + len(self.next)\n\n  def to_string(self, recurse: bool):\n    content_str = f'ContentNode[{str(self.get_content())}] '\n    if not recurse:\n      return content_str\n    next_str = str(self.next)\n    return f'{content_str}{self.next.to_string(recurse)}'"
  },
  {
    "objectID": "w06/slides.html#tuple-vs.-inventoryitem-part-3.1",
    "href": "w06/slides.html#tuple-vs.-inventoryitem-part-3.1",
    "title": "Week 6: Depth-First and Breadth-First Search",
    "section": "Tuple vs.¬†InventoryItem (Part 3.1)",
    "text": "Tuple vs.¬†InventoryItem (Part 3.1)\n# @title define-inventory-item\nclass InventoryItem:\n  def __init__(self, item_name_arg, price_arg):\n    self.item_name = item_name_arg\n    self.price = price_arg\n\n  def __lt__(self, other): # -&gt; [NotImplemented | bool]:\n    if isinstance(other, InventoryItem):\n      return self.item_name &lt; other.item_name\n    if isinstance(other, str):\n      return self.item_name &lt; other\n    return NotImplemented\n\n  def __le__(self, other): # -&gt; [NotImplemented | bool]\n    if isinstance(other, InventoryItem):\n      return self.item_name &lt;= other.item_name\n    if isinstance(other, str):\n      return self.item_name &lt;= other\n    return NotImplemented\n\n  def __gt__(self, other): # -&gt; [NotImplemented | bool]\n    if isinstance(other, InventoryItem):\n      return self.item_name &gt; other.item_name\n    if isinstance(other, str):\n      return self.item_name &gt; other\n    return NotImplemented\n\n  def __ge__(self, other): # -&gt; [NotImplemented | bool]\n    if isinstance(other, InventoryItem):\n      return self.item_name &gt;= other.item_name\n    if isinstance(other, str):\n      return self.item_name &gt;= other\n    return NotImplemented\n\n  def __eq__(self, other): # -&gt; [NotImplemented | bool]\n    if isinstance(other, InventoryItem):\n      return self.item_name == other.item_name\n    if isinstance(other, str):\n      return self.item_name == other\n    return NotImplemented\n\n  def __ne__(self, other): # -&gt; [NotImplemented | bool]\n    if isinstance(other, InventoryItem):\n      return self.item_name != other.item_name\n    if isinstance(other, str):\n      return self.item_name != other\n    return NotImplemented\n\n  def __repr__(self) -&gt; str:\n    return self.__str__()\n\n  def __str__(self) -&gt; str:\n    return f'InventoryItem[item_name={self.item_name},price={self.price}]'"
  },
  {
    "objectID": "w06/slides.html#thingcontainer-part-3.2",
    "href": "w06/slides.html#thingcontainer-part-3.2",
    "title": "Week 6: Depth-First and Breadth-First Search",
    "section": "ThingContainer (Part 3.2)",
    "text": "ThingContainer (Part 3.2)\n# @title define-thing-container\nclass ThingContainer:\n  def __init__(self):\n    self.internal_list = []\n\n  @abstractmethod\n  def put_new_thing_in(self, item):\n    pass\n\n  def is_empty(self) -&gt; bool:\n    return self.__len__() == 0\n\n  def __len__(self):\n    return len(self.internal_list)\n\n  @abstractmethod\n  def take_existing_thing_out(self):\n    pass\n\nclass Stack(ThingContainer):\n  def __init__(self):\n    super().__init__()\n\n  def __push(self, item):\n    self.internal_list.append(item)\n\n  def __pop(self):\n    return self.internal_list.pop()\n\n  def put_new_thing_in(self, item):\n    return self.__push(item)\n\n  def take_existing_thing_out(self):\n    return self.__pop()\n\nclass Queue(ThingContainer):\n  def __init__(self):\n    super().__init__()\n\n  def put_new_thing_in(self, item):\n    return self.__enqueue(item)\n\n  def __enqueue(self, item):\n    self.internal_list.insert(0, item)\n\n  def __dequeue(self):\n    return self.internal_list.pop()\n\n  def take_existing_thing_out(self):\n    return self.__dequeue()"
  },
  {
    "objectID": "w06/slides.html#alphahasher2-part-5",
    "href": "w06/slides.html#alphahasher2-part-5",
    "title": "Week 6: Depth-First and Breadth-First Search",
    "section": "AlphaHasher2 (Part 5)",
    "text": "AlphaHasher2 (Part 5)\n# @title define-alpha-hasher-2\nclass AlphaHasher2(CustomHasher):\n  def __init__(self):\n    self.alphabet_size = 26 * 26\n\n  def get_alphabet_size(self):\n    return self.alphabet_size\n\n  def hash(self, str_to_hash: str) -&gt; int:\n    if len(str_to_hash) == 0:\n      first_two_letters = 'AA'\n    elif len(str_to_hash) == 1:\n      first_letter = str_to_hash.upper()[0]\n      second_letter = 'A'\n    else:\n      first_letter = str_to_hash.upper()[0]\n      second_letter = str_to_hash.upper()[1]\n    #print(f'First two letters for {str_to_hash}: {first_letter}{second_letter}')\n    # And return its index:\n    # 'AA' has index 0, 'AB' has index 1, etc.\n    first_letter_pos = AlphaHasher2.compute_position_in_alphabet(first_letter)\n    second_letter_pos = AlphaHasher2.compute_position_in_alphabet(second_letter)\n    # The position in the two-letter alphabet is just 26*first + second\n    final_pos = 26 * first_letter_pos + second_letter_pos\n    return final_pos\n\n  def compute_position_in_alphabet(self, uppercase_key: str) -&gt; int:\n    if uppercase_key in string.ascii_uppercase:\n      return string.ascii_uppercase.index(uppercase_key)\n    return 0\n\n  def compute_key_for_index(self, index: int) -&gt; str:\n    first_letter_part = int(index / 26)\n    second_letter_part = index % 26\n    # In case you need to debug!\n    #print(f'alpha2_index: {index}, first_letter_part: {first_letter_part}, second_letter_part: {second_letter_part}')\n    return string.ascii_uppercase[first_letter_part] + string.ascii_uppercase[second_letter_part]"
  },
  {
    "objectID": "w06/index.html",
    "href": "w06/index.html",
    "title": "Week 6: Depth-First and Breadth-First Search",
    "section": "",
    "text": "Open slides in new window ‚Üí",
    "crumbs": [
      "Week 6: {{< var w06.date-md >}}"
    ]
  },
  {
    "objectID": "w06/index.html#hammers-vs.-structures-built-whammers",
    "href": "w06/index.html#hammers-vs.-structures-built-whammers",
    "title": "Week 6: Depth-First and Breadth-First Search",
    "section": "Hammers vs.¬†Structures Built w/Hammers",
    "text": "Hammers vs.¬†Structures Built w/Hammers\n\n\nHow I see the course title:\n\nData Structures!\nObjects!, and\nAlgorithms! (in Python)\n\nHow people I‚Äôm trying to meet halfway see the title(?): (Data Structures, Objects, and Algorithms) in Python!",
    "crumbs": [
      "Week 6: {{< var w06.date-md >}}"
    ]
  },
  {
    "objectID": "w06/index.html#many-many-education-systems-including-dcps",
    "href": "w06/index.html#many-many-education-systems-including-dcps",
    "title": "Week 6: Depth-First and Breadth-First Search",
    "section": "Many, Many Education Systems (including DCPS)",
    "text": "Many, Many Education Systems (including DCPS)\n\n‚ÄúThis is the correct way to do _________‚Äù\n\nRegurgitate it: ‚úÖüíØ‚úÖ (Didn‚Äôt get hit with stick üòé)\nFail to regurgitate it: ‚ùåüëé‚ùå (Got hit with stick üòî)",
    "crumbs": [
      "Week 6: {{< var w06.date-md >}}"
    ]
  },
  {
    "objectID": "w06/index.html#studies-of-learning-motivation",
    "href": "w06/index.html#studies-of-learning-motivation",
    "title": "Week 6: Depth-First and Breadth-First Search",
    "section": "Studies of Learning + Motivation",
    "text": "Studies of Learning + Motivation\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nApproach 1\n\n\nFocus attention on (sufficiently interesting) structure\n\\(\\implies\\) students‚Äô comfort with tools ‚Äúarises out of‚Äù wanting to build it\n\\(\\implies\\) students discover ways to use tools that ‚Äúclick‚Äù w/them specifically (serotonin spike: tool \\(\\leftrightarrow\\) thing they built)\n\n\nApproach 2\n\n\nTell students correct and incorrect ways to use tools\n\\(\\implies\\) students learn ‚Äúcorrect‚Äù and ‚Äúincorrect‚Äù as rules\n\\(\\implies\\) (a) lower retention, (b) less adaptability to new tools",
    "crumbs": [
      "Week 6: {{< var w06.date-md >}}"
    ]
  },
  {
    "objectID": "w06/index.html#applies-equally-well-whether",
    "href": "w06/index.html#applies-equally-well-whether",
    "title": "Week 6: Depth-First and Breadth-First Search",
    "section": "Applies Equally Well Whether‚Ä¶",
    "text": "Applies Equally Well Whether‚Ä¶\n\n\nYou‚Äôre in Cuba‚Ä¶\n\n\n\n\n\n\n‚Ä¶OR u just want that data sci BAG! üí∞",
    "crumbs": [
      "Week 6: {{< var w06.date-md >}}"
    ]
  },
  {
    "objectID": "w06/index.html#midterm-metadata",
    "href": "w06/index.html#midterm-metadata",
    "title": "Week 6: Depth-First and Breadth-First Search",
    "section": "Midterm Metadata",
    "text": "Midterm Metadata\n\nCoding Portion: Modifications of LinkedList (Circular / jump-to-end / doubly-linked); non-scary OOP skeleton üôà\nMultiple Choice Portion: Lots more to cover‚Ä¶\nHash Tables: \\(O(1 + \\epsilon \\log_2(n))\\), but think about it as:\n\\(1 + (\\text{Collision rate}) \\cdot (\\text{Collision handler efficiency})\\)\nLinked List \\(\\rightarrow\\) Binary Search Tree\nDepth-First vs.¬†Breadth-First: Picture of a tree \\(\\rightarrow\\) (a) what is BFS result, (b) what is (in/pre/post)-order DFS result?\nLastly: Cormen, Leiserson, Rivest, Stein (CLRS), pgs. 17-106",
    "crumbs": [
      "Week 6: {{< var w06.date-md >}}"
    ]
  },
  {
    "objectID": "w06/index.html#bst-building-blocks-on-hw3",
    "href": "w06/index.html#bst-building-blocks-on-hw3",
    "title": "Week 6: Depth-First and Breadth-First Search",
    "section": "BST Building Blocks on HW3",
    "text": "BST Building Blocks on HW3\n\nFor HW3, we provide you with an InventoryItem class\nTwo instance variables: item_name and price\nEquivalence relations:\n\n__eq__(other), __ne__(other)\n\nOrdering relations:\n\n__lt__(other), __le__(other), __gt__(other), __ge__(other)\n\nBonus: __repr__() and __str__()",
    "crumbs": [
      "Week 6: {{< var w06.date-md >}}"
    ]
  },
  {
    "objectID": "w06/index.html#lls-rightarrow-bsts-the-hard-part",
    "href": "w06/index.html#lls-rightarrow-bsts-the-hard-part",
    "title": "Week 6: Depth-First and Breadth-First Search",
    "section": "LLs \\(\\rightarrow\\) BSTs: The Hard Part",
    "text": "LLs \\(\\rightarrow\\) BSTs: The Hard Part\n\nWhen we were working with LinkedLists, we could access all items by just ‚Äúlooping through‚Äù, from one element to the next, printing as we go along.\nBut‚Ä¶ for a BST, our structure can now branch as we traverse it‚Ä¶ How do we ‚Äúloop through‚Äù a BST?\nTwo fundamentally different ways to traverse every node\n‚ÄúOpposites‚Äù of each other, so that one is often extremely efficient and the other extremely inefficient for a given task\nYour job as a data scientist is to think carefully about which one is more efficient for a given goal!",
    "crumbs": [
      "Week 6: {{< var w06.date-md >}}"
    ]
  },
  {
    "objectID": "w06/index.html#two-ways-to-traverse-irl-version",
    "href": "w06/index.html#two-ways-to-traverse-irl-version",
    "title": "Week 6: Depth-First and Breadth-First Search",
    "section": "Two Ways to Traverse: IRL Version",
    "text": "Two Ways to Traverse: IRL Version\n\nImagine we‚Äôre trying to learn about a topic \\(\\tau\\) using Wikipedia, so we find its article \\(\\tau_0\\)\nThere are two ‚Äúextremes‚Äù in terms of strategies we could follow for learning, given the contents of the article as well as the links it contains to other articles\n\n\n\n\n\n\n\n Depth-First Search (DFS)\n\n\n\n\nOpen \\(\\tau_0\\) and start reading; When we encounter a link we always click it, immediately start reading the new article.\nIf we hit an article with no links (or a dead end/broken link), we finish reading it and click the back button, picking up where we left off in the previous article. When we reach the end of \\(\\tau_0\\), we‚Äôre done!\n\n\n\n\n\n\n\n\n\n Breadth-First Search (BFS)\n\n\n\n\nBookmark \\(\\tau_0\\) in a folder called ‚ÄúLevel 0 Articles‚Äù; open and start reading it\nWhen we encounter a link, we put it in a ‚ÄúLevel 1 Articles‚Äù folder, but continue reading \\(\\tau_0\\) until we reach the end.\nWe then open all ‚ÄúLevel 1 Articles‚Äù in new tabs, placing links we encounter in these articles into a ‚ÄúLevel 2 Articles‚Äù folder, that we only start reading once all ‚ÄúLevel 1 Articles‚Äù are read\nWe continue like this, reading ‚ÄúLevel 3 Articles‚Äù once we‚Äôre done with ‚ÄúLevel 2 Articles‚Äù, ‚ÄúLevel 4 Articles‚Äù once we‚Äôre done with ‚ÄúLevel 3 Articles‚Äù, and so on. (Can you see a sense in which this is the ‚Äúopposite‚Äù of DFS?)\n\n\n\n\n‚Ä¶Let‚Äôs try them out! I clicked ‚ÄúRandom Article‚Äù and got Eustache de Saint Pierre",
    "crumbs": [
      "Week 6: {{< var w06.date-md >}}"
    ]
  },
  {
    "objectID": "w06/index.html#two-ways-to-traverse-picture-version",
    "href": "w06/index.html#two-ways-to-traverse-picture-version",
    "title": "Week 6: Depth-First and Breadth-First Search",
    "section": "Two Ways to Traverse: Picture Version",
    "text": "Two Ways to Traverse: Picture Version\n\n\n\n\nCode\nfrom hw2 import LinkedList, InventoryItem, BinarySearchTree\nbst = BinarySearchTree()\nitem1 = InventoryItem('Mango', 50)\nbst.add(item1)\nitem2 = InventoryItem('Pickle', 60)\nbst.add(item2)\nitem3 = InventoryItem('Artichoke', 55)\nbst.add(item3)\nitem5 = InventoryItem('Banana', 123)\nbst.add(item5)\nitem6 = InventoryItem('Aardvark', 11)\nbst.add(item6)\nHTML(visualize(bst))\n\n\nWarning: node None_0, port f1 unrecognized\nWarning: node None_1, port f1 unrecognized\nWarning: node None_2, port f1 unrecognized\nWarning: node None_3, port f1 unrecognized\nWarning: node None_4, port f1 unrecognized\nWarning: node None_5, port f1 unrecognized\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nfrom hw2 import IterAlgorithm, NodeProcessor\nprint(\"DFS:\")\ndfs_processor = NodeProcessor(IterAlgorithm.DEPTH_FIRST)\n#print(type(dfs_processor.node_container))\ndfs_processor.iterate_over(bst)\n\nprint(\"\\nBFS:\")\nbfs_processor = NodeProcessor(IterAlgorithm.BREADTH_FIRST)\n#print(type(bfs_processor.node_container))\nbfs_processor.iterate_over(bst)\n\n\nDFS:\nInventoryItem[item_name=Mango,price=50]\nInventoryItem[item_name=Pickle,price=60]\nInventoryItem[item_name=Artichoke,price=55]\nInventoryItem[item_name=Banana,price=123]\nInventoryItem[item_name=Aardvark,price=11]\n\nBFS:\nInventoryItem[item_name=Mango,price=50]\nInventoryItem[item_name=Artichoke,price=55]\nInventoryItem[item_name=Pickle,price=60]\nInventoryItem[item_name=Aardvark,price=11]\nInventoryItem[item_name=Banana,price=123]",
    "crumbs": [
      "Week 6: {{< var w06.date-md >}}"
    ]
  },
  {
    "objectID": "w06/index.html#two-ways-to-traverse-in-words-version",
    "href": "w06/index.html#two-ways-to-traverse-in-words-version",
    "title": "Week 6: Depth-First and Breadth-First Search",
    "section": "Two Ways to Traverse: In-Words Version",
    "text": "Two Ways to Traverse: In-Words Version\n\nDepth-First Search (DFS): With this approach, we iterate through the BST by always taking the left child as the ‚Äúnext‚Äù child until we hit a leaf node (which means, we cannot follow this left-child pointer any longer, since a leaf node does not have a left child or a right child!), and only at that point do we back up and take the right children we skipped.\nBreadth-First Search (BFS): This is the ‚Äúopposite‚Äù of DFS in the sense that we traverse the tree level-by-level, never moving to the next level of the tree until we‚Äôre sure that we have visited every node on the current level.",
    "crumbs": [
      "Week 6: {{< var w06.date-md >}}"
    ]
  },
  {
    "objectID": "w06/index.html#two-ways-to-traverse-animated-version",
    "href": "w06/index.html#two-ways-to-traverse-animated-version",
    "title": "Week 6: Depth-First and Breadth-First Search",
    "section": "Two Ways to Traverse: Animated Version",
    "text": "Two Ways to Traverse: Animated Version\n\n\n\n\n\n\n\n\n\nDepth-First Search (from Wikimedia Commons)\n\n\n\n\n\n\n\nBreadth-First Search (from Wikimedia Commons)",
    "crumbs": [
      "Week 6: {{< var w06.date-md >}}"
    ]
  },
  {
    "objectID": "w06/index.html#two-ways-to-traverse-underlying-data-structures",
    "href": "w06/index.html#two-ways-to-traverse-underlying-data-structures",
    "title": "Week 6: Depth-First and Breadth-First Search",
    "section": "Two Ways to Traverse: Underlying Data Structures",
    "text": "Two Ways to Traverse: Underlying Data Structures\n\nNow that you have some intuition, you may be thinking that they might require very different code to implement ü§î\nThis is where mathematically-formal link between the two becomes ultra helpful!\nIt turns out (and a full-on algorithmic theory course makes you prove) that\n\nDepth-First Search can be accomplished by processing nodes in an order determined by adding each to a stack, while\nBreadth-First Search can be accomplished by processing nodes in an order determined by adding each to a queue!\n\n\\(\\implies\\) Literally identical code, ‚Äúpulling out‚Äù the word stack and replacing it with the word queue within your code (or vice-versa).\nPut your Software Engineer Hat on: this calls for an abstraction layer!\n\n(OOP hint: Notice how we‚Äôre not teaching you how Queue and Stack work, and not asking you to implement it ü§®)",
    "crumbs": [
      "Week 6: {{< var w06.date-md >}}"
    ]
  },
  {
    "objectID": "w06/index.html#two-ways-to-traverse-hw3-version",
    "href": "w06/index.html#two-ways-to-traverse-hw3-version",
    "title": "Week 6: Depth-First and Breadth-First Search",
    "section": "Two Ways to Traverse: HW3 Version",
    "text": "Two Ways to Traverse: HW3 Version\n\nYou‚Äôll make a class called NodeProcessor, with a single iterate_over(tree) function\nThis function‚Äîwithout any changes in the code or even any if statements!‚Äîwill be capable of both DFS and BFS\n\nThat‚Äôs a hint: lose points if there‚Äôs an if statement! üëÄ (bc, the whole point of OOP! Encapsulation, abstraction)\n\nConstructor takes in a ThingContainer (could be a stack or a queue, you won‚Äôt know which), with two functions:\n\nput_new_thing_in(new_thing)\ntake_existing_thing_out()",
    "crumbs": [
      "Week 6: {{< var w06.date-md >}}"
    ]
  },
  {
    "objectID": "w06/index.html#thingcontainer-the-oop-structure-you-see",
    "href": "w06/index.html#thingcontainer-the-oop-structure-you-see",
    "title": "Week 6: Depth-First and Breadth-First Search",
    "section": "ThingContainer: The OOP Structure You See",
    "text": "ThingContainer: The OOP Structure You See",
    "crumbs": [
      "Week 6: {{< var w06.date-md >}}"
    ]
  },
  {
    "objectID": "w06/index.html#secret-full-oop-structure-you-dont-see",
    "href": "w06/index.html#secret-full-oop-structure-you-dont-see",
    "title": "Week 6: Depth-First and Breadth-First Search",
    "section": "Secret Full OOP Structure You Don‚Äôt See",
    "text": "Secret Full OOP Structure You Don‚Äôt See",
    "crumbs": [
      "Week 6: {{< var w06.date-md >}}"
    ]
  },
  {
    "objectID": "w06/index.html#one-animal-in-the-bfs-species",
    "href": "w06/index.html#one-animal-in-the-bfs-species",
    "title": "Week 6: Depth-First and Breadth-First Search",
    "section": "One Animal in the BFS Species",
    "text": "One Animal in the BFS Species\n\nFor this and next slide, constant-time preliminary step: ‚ÄúAdd root to container‚Äù (a ThingContainer object)\n\n\n\n\n\n\n\n\nProcedure\nAlgorithm\n\n\n\n\nBreadth-First Search\nwhile [container not empty]:¬†¬†¬†¬†1. Take thing out¬†¬†¬†¬†2. Print thing content¬†¬†¬†¬†3. Add left child to container¬†¬†¬†¬†4. Add right child to container",
    "crumbs": [
      "Week 6: {{< var w06.date-md >}}"
    ]
  },
  {
    "objectID": "w06/index.html#three-animals-in-the-dfs-species",
    "href": "w06/index.html#three-animals-in-the-dfs-species",
    "title": "Week 6: Depth-First and Breadth-First Search",
    "section": "Three Animals in the DFS Species",
    "text": "Three Animals in the DFS Species\n\n\n\n\n\n\n\nDFS Procedure\nAlgorithm\n\n\n\n\nPre-Order Traversal\n1. Print node2. DFS left subtree3. DFS right subtree\n\n\nIn-Order Traversal üßê‚ÄºÔ∏è\n1. DFS left subtree2. Print node3. DFS right subtree\n\n\nPost-Order Traversal\n1. DFS left subtree2. DFS right subtree3. Print node",
    "crumbs": [
      "Week 6: {{< var w06.date-md >}}"
    ]
  },
  {
    "objectID": "w06/index.html#the-three-animals-traverse-our-inventory-tree",
    "href": "w06/index.html#the-three-animals-traverse-our-inventory-tree",
    "title": "Week 6: Depth-First and Breadth-First Search",
    "section": "The Three Animals Traverse our Inventory Tree",
    "text": "The Three Animals Traverse our Inventory Tree\n\n\nCode\nvisualize(bst)\n\n\nWarning: node None_0, port f1 unrecognized\nWarning: node None_1, port f1 unrecognized\nWarning: node None_2, port f1 unrecognized\nWarning: node None_3, port f1 unrecognized\nWarning: node None_4, port f1 unrecognized\nWarning: node None_5, port f1 unrecognized",
    "crumbs": [
      "Week 6: {{< var w06.date-md >}}"
    ]
  },
  {
    "objectID": "w06/index.html#more-memory-more-performance",
    "href": "w06/index.html#more-memory-more-performance",
    "title": "Week 6: Depth-First and Breadth-First Search",
    "section": "More Memory, More Performance",
    "text": "More Memory, More Performance\n\nThe last part challenges you to ask: why stop at a hash based on just the first letter of the key?\nWe could just as easily use the first two letters:\nh('AA') = 0, h('AB') = 1, ‚Ä¶, h('AZ') = 25,\nh('BA') = 26, h('BB') = 27, ‚Ä¶, h('BZ') = 51,\nh('CA') = 52, ‚Ä¶, h('ZZ') = 675.\nYou will see how this gets us even closer to the elusive \\(O(1)\\)! And we could get even closer with three letters, four letters, ‚Ä¶ ü§îü§îü§î",
    "crumbs": [
      "Week 6: {{< var w06.date-md >}}"
    ]
  },
  {
    "objectID": "w06/index.html#alphahasher-vs.-customhasher",
    "href": "w06/index.html#alphahasher-vs.-customhasher",
    "title": "Week 6: Depth-First and Breadth-First Search",
    "section": "AlphaHasher vs.¬†CustomHasher",
    "text": "AlphaHasher vs.¬†CustomHasher\n# @title define-alpha-hasher\nfrom abc import ABC, abstractmethod\nimport string\n\nclass CustomHasher(ABC):\n  @abstractmethod\n  def __init__(self):\n    pass\n\n  @abstractmethod\n  def get_alphabet_size(self):\n    pass\n\n  @abstractmethod\n  def hash(self, str_to_hash: str) -&gt; int:\n    pass\n\n  @abstractmethod\n  def compute_position_in_alphabet(self, uppercase_key: str) -&gt; int:\n    pass\n\n  @abstractmethod\n  def compute_key_for_index(self, index: int) -&gt; str:\n    pass\n\nclass AlphaHasher(CustomHasher):\n  def __init__(self):\n    self.alphabet_size = 26\n\n  def get_alphabet_size(self):\n    return self.alphabet_size\n\n  def hash(self, str_to_hash: str) -&gt; int:\n    if len(str_to_hash) == 0:\n      first_letter = 'A'\n    else:\n      first_letter = str_to_hash.upper()[0]\n    # And return its index in the alphabet:\n    # 'A' has index 0, 'B' has index 1, etc.\n    return self.compute_position_in_alphabet(first_letter)\n\n  def compute_position_in_alphabet(self, uppercase_key: str) -&gt; int:\n    return string.ascii_uppercase.index(uppercase_key)\n\n  def compute_key_for_index(self, index: int) -&gt; str:\n    return string.ascii_uppercase[index]",
    "crumbs": [
      "Week 6: {{< var w06.date-md >}}"
    ]
  },
  {
    "objectID": "w06/index.html#linkedlist-via-polymorphicnode",
    "href": "w06/index.html#linkedlist-via-polymorphicnode",
    "title": "Week 6: Depth-First and Breadth-First Search",
    "section": "LinkedList via PolymorphicNode",
    "text": "LinkedList via PolymorphicNode\n\nEmptyNode \\(\\rightarrow\\) ContentNode\n\n# @title define-linked-list\nfrom abc import ABC, abstractmethod\n\nclass LinkedList:\n  def __init__(self):\n    self.root = EmptyNode()\n\n  def append(self, item):\n    self.root = self.root.append(item)\n\n  def find_item_steps(self, item):\n    return self.root.find_item_steps(item)\n\n  def to_string(self, recurse: bool):\n    return f'LinkedList[{self.root.to_string(recurse)}]'\n\n  def __repr__(self):\n    return self.to_string(recurse=True)\n\n  def __str__(self):\n    return self.to_string(recurse=False)\n\nclass PolymorphicNode(ABC):\n  @abstractmethod\n  def __init__(self):\n    pass\n\n  @abstractmethod\n  def append(self, item):\n    pass\n\n  @abstractmethod\n  def find_item_steps(self, item):\n    pass\n\n  @abstractmethod\n  def to_string(self, recurse: bool):\n    pass\n\n  def __repr__(self):\n    return self.to_string(recurse=True)\n\n  def __str__(self):\n    return self.to_string(recurse=False)\n\nclass EmptyNode(PolymorphicNode):\n  def __init__(self):\n    super().__init__()\n\n  def append(self, item):\n    \"\"\"\n    This is the only weird part of EmptyNode: because we want to utilize\n    *polymorphism*, when append() is called on an EmptyNode it\n    is \"transformed into\" a FilledNode! That is why, in the\n    LinkedList's append() function, we have self.root = self.root.append(),\n    and why the FilledNode's append() function works the same way\n    \"\"\"\n    #print(\"EmptyLinkedListNode.append()\")\n    new_form = ContentNode(item)\n    return new_form\n\n  def find_item_steps(self, item):\n    return np.inf\n\n  def __len__(self):\n    return 0\n\n  def to_string(self, recurse: bool):\n    return ''\n\nclass ContentNode(PolymorphicNode):\n  def __init__(self, content_arg):\n    super().__init__()\n    self.content = content_arg\n    self.next = EmptyNode()\n\n  def append(self, item):\n    self.next = self.next.append(item)\n    # Return just *self*, since we *haven't* transformed the type of\n    # FilledLinkedListNode by appending another element to it\n    return self\n\n  def find_item_steps(self, item):\n    if self.content == item or self.content[0] == item:\n      return 1\n    return 1 + self.next.find_item_steps(item)\n\n  def get_content(self):\n    return self.content\n\n  def __len__(self):\n    return 1 + len(self.next)\n\n  def to_string(self, recurse: bool):\n    content_str = f'ContentNode[{str(self.get_content())}] '\n    if not recurse:\n      return content_str\n    next_str = str(self.next)\n    return f'{content_str}{self.next.to_string(recurse)}'",
    "crumbs": [
      "Week 6: {{< var w06.date-md >}}"
    ]
  },
  {
    "objectID": "w06/index.html#tuple-vs.-inventoryitem-part-3.1",
    "href": "w06/index.html#tuple-vs.-inventoryitem-part-3.1",
    "title": "Week 6: Depth-First and Breadth-First Search",
    "section": "Tuple vs.¬†InventoryItem (Part 3.1)",
    "text": "Tuple vs.¬†InventoryItem (Part 3.1)\n# @title define-inventory-item\nclass InventoryItem:\n  def __init__(self, item_name_arg, price_arg):\n    self.item_name = item_name_arg\n    self.price = price_arg\n\n  def __lt__(self, other): # -&gt; [NotImplemented | bool]:\n    if isinstance(other, InventoryItem):\n      return self.item_name &lt; other.item_name\n    if isinstance(other, str):\n      return self.item_name &lt; other\n    return NotImplemented\n\n  def __le__(self, other): # -&gt; [NotImplemented | bool]\n    if isinstance(other, InventoryItem):\n      return self.item_name &lt;= other.item_name\n    if isinstance(other, str):\n      return self.item_name &lt;= other\n    return NotImplemented\n\n  def __gt__(self, other): # -&gt; [NotImplemented | bool]\n    if isinstance(other, InventoryItem):\n      return self.item_name &gt; other.item_name\n    if isinstance(other, str):\n      return self.item_name &gt; other\n    return NotImplemented\n\n  def __ge__(self, other): # -&gt; [NotImplemented | bool]\n    if isinstance(other, InventoryItem):\n      return self.item_name &gt;= other.item_name\n    if isinstance(other, str):\n      return self.item_name &gt;= other\n    return NotImplemented\n\n  def __eq__(self, other): # -&gt; [NotImplemented | bool]\n    if isinstance(other, InventoryItem):\n      return self.item_name == other.item_name\n    if isinstance(other, str):\n      return self.item_name == other\n    return NotImplemented\n\n  def __ne__(self, other): # -&gt; [NotImplemented | bool]\n    if isinstance(other, InventoryItem):\n      return self.item_name != other.item_name\n    if isinstance(other, str):\n      return self.item_name != other\n    return NotImplemented\n\n  def __repr__(self) -&gt; str:\n    return self.__str__()\n\n  def __str__(self) -&gt; str:\n    return f'InventoryItem[item_name={self.item_name},price={self.price}]'",
    "crumbs": [
      "Week 6: {{< var w06.date-md >}}"
    ]
  },
  {
    "objectID": "w06/index.html#thingcontainer-part-3.2",
    "href": "w06/index.html#thingcontainer-part-3.2",
    "title": "Week 6: Depth-First and Breadth-First Search",
    "section": "ThingContainer (Part 3.2)",
    "text": "ThingContainer (Part 3.2)\n# @title define-thing-container\nclass ThingContainer:\n  def __init__(self):\n    self.internal_list = []\n\n  @abstractmethod\n  def put_new_thing_in(self, item):\n    pass\n\n  def is_empty(self) -&gt; bool:\n    return self.__len__() == 0\n\n  def __len__(self):\n    return len(self.internal_list)\n\n  @abstractmethod\n  def take_existing_thing_out(self):\n    pass\n\nclass Stack(ThingContainer):\n  def __init__(self):\n    super().__init__()\n\n  def __push(self, item):\n    self.internal_list.append(item)\n\n  def __pop(self):\n    return self.internal_list.pop()\n\n  def put_new_thing_in(self, item):\n    return self.__push(item)\n\n  def take_existing_thing_out(self):\n    return self.__pop()\n\nclass Queue(ThingContainer):\n  def __init__(self):\n    super().__init__()\n\n  def put_new_thing_in(self, item):\n    return self.__enqueue(item)\n\n  def __enqueue(self, item):\n    self.internal_list.insert(0, item)\n\n  def __dequeue(self):\n    return self.internal_list.pop()\n\n  def take_existing_thing_out(self):\n    return self.__dequeue()",
    "crumbs": [
      "Week 6: {{< var w06.date-md >}}"
    ]
  },
  {
    "objectID": "w06/index.html#alphahasher2-part-5",
    "href": "w06/index.html#alphahasher2-part-5",
    "title": "Week 6: Depth-First and Breadth-First Search",
    "section": "AlphaHasher2 (Part 5)",
    "text": "AlphaHasher2 (Part 5)\n# @title define-alpha-hasher-2\nclass AlphaHasher2(CustomHasher):\n  def __init__(self):\n    self.alphabet_size = 26 * 26\n\n  def get_alphabet_size(self):\n    return self.alphabet_size\n\n  def hash(self, str_to_hash: str) -&gt; int:\n    if len(str_to_hash) == 0:\n      first_two_letters = 'AA'\n    elif len(str_to_hash) == 1:\n      first_letter = str_to_hash.upper()[0]\n      second_letter = 'A'\n    else:\n      first_letter = str_to_hash.upper()[0]\n      second_letter = str_to_hash.upper()[1]\n    #print(f'First two letters for {str_to_hash}: {first_letter}{second_letter}')\n    # And return its index:\n    # 'AA' has index 0, 'AB' has index 1, etc.\n    first_letter_pos = AlphaHasher2.compute_position_in_alphabet(first_letter)\n    second_letter_pos = AlphaHasher2.compute_position_in_alphabet(second_letter)\n    # The position in the two-letter alphabet is just 26*first + second\n    final_pos = 26 * first_letter_pos + second_letter_pos\n    return final_pos\n\n  def compute_position_in_alphabet(self, uppercase_key: str) -&gt; int:\n    if uppercase_key in string.ascii_uppercase:\n      return string.ascii_uppercase.index(uppercase_key)\n    return 0\n\n  def compute_key_for_index(self, index: int) -&gt; str:\n    first_letter_part = int(index / 26)\n    second_letter_part = index % 26\n    # In case you need to debug!\n    #print(f'alpha2_index: {index}, first_letter_part: {first_letter_part}, second_letter_part: {second_letter_part}')\n    return string.ascii_uppercase[first_letter_part] + string.ascii_uppercase[second_letter_part]",
    "crumbs": [
      "Week 6: {{< var w06.date-md >}}"
    ]
  },
  {
    "objectID": "w08/index.html",
    "href": "w08/index.html",
    "title": "Week 8: In-Class Midterm",
    "section": "",
    "text": "Link to midterm will be posted on Google Classroom.",
    "crumbs": [
      "Week 8: {{< var w08.date-md >}}"
    ]
  },
  {
    "objectID": "w07/slides.html#the-great-wheel-of-data-structural-and-algorithmic-fate",
    "href": "w07/slides.html#the-great-wheel-of-data-structural-and-algorithmic-fate",
    "title": "Week 7: Code Examples and Midterm Review",
    "section": "The Great Wheel of Data-Structural and Algorithmic Fate",
    "text": "The Great Wheel of Data-Structural and Algorithmic Fate\n\n\n\nFull Topics (20 mins):\n\n\nLinkedList variations\nObject-Oriented Design\nCollision-Resistant Hashing\nSorting\n\n\n\nMini Topics (10 mins):\n\n\nStack-Heap Distinction\nBig-\\(\\overline{O}\\) Notation\nData Validation\nLinear vs.¬†Logarithmic Design\nBSTs: DFS vs.¬†BFS\nTrees vs.¬†Graphs (Cycles)\n\n\n\n\n\nhttps://wheelofnames.com/"
  },
  {
    "objectID": "w07/slides.html#stack-heap-distinction",
    "href": "w07/slides.html#stack-heap-distinction",
    "title": "Week 7: Code Examples and Midterm Review",
    "section": "Stack-Heap Distinction",
    "text": "Stack-Heap Distinction\n\nThe Stack (\\(\\neq\\) Stack data structure)\n\nFixed-length things go here, including Pointers to Heap\n\nThe Heap (\\(\\neq\\) Heap data structure)\n\nVariable-length things go here\n\nHeap elves manage The Heap, by‚Ä¶\n\nConstantly ‚Äúclaiming‚Äù additional memory from the OS (malloc()), in case objects need to grow\n‚ÄúFreeing‚Äù memory back for use by the OS (free()), when objects shrink / deleted / Python execution ends"
  },
  {
    "objectID": "w07/slides.html#big-overlineo-notation",
    "href": "w07/slides.html#big-overlineo-notation",
    "title": "Week 7: Code Examples and Midterm Review",
    "section": "Big-\\(\\overline{O}\\) Notation",
    "text": "Big-\\(\\overline{O}\\) Notation\n\nThese are equivalence classes (not numbers or functions)\n Compute the runtime \\(T(n)\\) of an algorithm\n Worry about how it scales as \\(n\\) gets large: \\(\\lim_{n \\rightarrow \\infty}T(n)\\)\n Decide whether to use it or not based on which equivalence class it converges to:\n\n\\(O(1)\\)\n\\(O(\\log(n))\\)\n\\(O(n)\\)\n\\(O(n^2)\\)"
  },
  {
    "objectID": "w07/slides.html#data-validation",
    "href": "w07/slides.html#data-validation",
    "title": "Week 7: Code Examples and Midterm Review",
    "section": "Data Validation",
    "text": "Data Validation\n\nTo know: Type Hints in Python\nTo know: Pydantic\nTo think about: Pandera"
  },
  {
    "objectID": "w07/slides.html#linear-vs.-logarithmic-design",
    "href": "w07/slides.html#linear-vs.-logarithmic-design",
    "title": "Week 7: Code Examples and Midterm Review",
    "section": "Linear vs.¬†Logarithmic Design",
    "text": "Linear vs.¬†Logarithmic Design\n\nEnter the Logarithm demo app"
  },
  {
    "objectID": "w07/slides.html#depth-first-vs.-breadth-first-search",
    "href": "w07/slides.html#depth-first-vs.-breadth-first-search",
    "title": "Week 7: Code Examples and Midterm Review",
    "section": "Depth-First vs.¬†Breadth-First Search",
    "text": "Depth-First vs.¬†Breadth-First Search\n\nDepth-First is greedy: At any given node, algorithm starts by just following first link until it hits None!\n\nOnly once it hits None does it ‚Äúback up‚Äù and follow second link\n\nBreadth-First is patient: Nodes at level \\(t + 1\\) are not processed (printed) until all nodes at level \\(t\\) have been processed (printed)"
  },
  {
    "objectID": "w07/slides.html#trees-vs.-graphs-cycles",
    "href": "w07/slides.html#trees-vs.-graphs-cycles",
    "title": "Week 7: Code Examples and Midterm Review",
    "section": "Trees vs.¬†Graphs (Cycles)",
    "text": "Trees vs.¬†Graphs (Cycles)\n\nIn terms of creating and managing data structures, we start with Trees and move to Graphs\nBut, in terms of defining these structures, it helps to start with Graphs\nA graph is just a collection of linked nodes (any number of links): connected if some possible path between any two nodes\nA tree is a connected graph without cycles\nA binary tree is a tree where each node has only two outward links (called children)\nA binary search tree is a binary tree where\n\n Outward links are labeled left and right\n [All contents after following left] \\(&lt;\\) [current content]\n [All contents after following right] \\(&gt;\\) [current content]"
  },
  {
    "objectID": "w07/slides.html#variations-on-linkedlist",
    "href": "w07/slides.html#variations-on-linkedlist",
    "title": "Week 7: Code Examples and Midterm Review",
    "section": "Variations on LinkedList",
    "text": "Variations on LinkedList\n\nFrontBackLinkedList\nDeque (Pronounced like ‚ÄúDeck‚Äù)\nDoublyLinkedList"
  },
  {
    "objectID": "w07/slides.html#frontbacklinkedlist",
    "href": "w07/slides.html#frontbacklinkedlist",
    "title": "Week 7: Code Examples and Midterm Review",
    "section": "FrontBackLinkedList",
    "text": "FrontBackLinkedList\n\nThis isn‚Äôt exactly a separate data structure from a LinkedList, but instead an ‚Äúexpansion pack‚Äù for LinkedList which adds an insert_front() function"
  },
  {
    "objectID": "w07/slides.html#doublylinkedlist",
    "href": "w07/slides.html#doublylinkedlist",
    "title": "Week 7: Code Examples and Midterm Review",
    "section": "DoublyLinkedList",
    "text": "DoublyLinkedList\n\nFor when we need to be able to reverse directions at any point during iteration\nLinkedListNode had only a next pointer\nDoublyLinkedListNode has two pointers: prev and next"
  },
  {
    "objectID": "w07/slides.html#deque",
    "href": "w07/slides.html#deque",
    "title": "Week 7: Code Examples and Midterm Review",
    "section": "Deque",
    "text": "Deque\n\nMay seem similar to FrontBackLinkedList, but this time we do have a (slightly) different data structure!\nFor when we need to iterate through a list in-order or in reverse order, with exact same complexity!\n\n(Who can think of a case where this would be immediately useful?)\n\nLike in FrontBackLinkedList, we have a new insert_front() function\nLike in DoublyLinkedList, we have both prev and next pointers in each DequeNode\nBut, we also add a new pointer in the Deque class itself (not the DequeNode class), tail, so that we now have head (formerly called root) and tail (pointing to the last element in the LL)"
  },
  {
    "objectID": "w07/slides.html#collision-resistant-hashing",
    "href": "w07/slides.html#collision-resistant-hashing",
    "title": "Week 7: Code Examples and Midterm Review",
    "section": "Collision-Resistant Hashing",
    "text": "Collision-Resistant Hashing\n\nIn general: What properties do we think a ‚Äúgood‚Äù hashing algorithm should have?\nMore specific: Given \\(N\\) objects to store and \\(M\\) available memory slots, what are the limits to \\(\\overline{O}(1)\\)?\n\nEfficiency when \\(N &lt; M\\)?\nEfficiency when \\(N = M\\)?\nEfficiency when \\(N &gt; M\\)?\nHow do these change if we move from LinkedList-backed to BST-backed?"
  },
  {
    "objectID": "w07/slides.html#object-oriented-design",
    "href": "w07/slides.html#object-oriented-design",
    "title": "Week 7: Code Examples and Midterm Review",
    "section": "Object-Oriented Design",
    "text": "Object-Oriented Design\n\nFirst: What are the two kinds of ‚Äúthings‚Äù that an object has?\nWhat is the difference between a class and an object?\nOML without Polymorphism\nOML with Polymorphism\nAbstract Base Classes (ABC in Python)"
  },
  {
    "objectID": "w07/slides.html#sorting",
    "href": "w07/slides.html#sorting",
    "title": "Week 7: Code Examples and Midterm Review",
    "section": "Sorting",
    "text": "Sorting\n\nHow is Merge-Sort ‚Äúbetter‚Äù? What role does Merge subroutine play?\nWhat/where exactly are the invariants in these diagrams?\n\n\n\n\nInsertion-Sort\n\n\n\n\n\n\n\n\nMerge-Sort"
  },
  {
    "objectID": "w07/slides.html#midterm-structure",
    "href": "w07/slides.html#midterm-structure",
    "title": "Week 7: Code Examples and Midterm Review",
    "section": "Midterm Structure",
    "text": "Midterm Structure\n\nCoding Portion: Modifications of LinkedList (Circular / jump-to-end / doubly-linked); non-scary OOP skeleton üôà\nMultiple Choice Portion: Lots more to cover‚Ä¶\n\nHash Tables: \\(O(1 + \\epsilon \\log_2(n))\\), but think about it as:\n\\(1 + (\\text{Collision rate}) \\cdot (\\text{Collision handler efficiency})\\)\nLinked List \\(\\rightarrow\\) Binary Search Tree\nDepth-First vs.¬†Breadth-First: Picture of a tree \\(\\rightarrow\\) (a) what is BFS result, (b) what is (in/pre/post)-order DFS result?\nLastly: Cormen, Leiserson, Rivest, Stein (CLRS), pgs. 17-106"
  },
  {
    "objectID": "w07/slides.html#the-two-boxes-that-most-things-in-this-course-can-be-sorted-into",
    "href": "w07/slides.html#the-two-boxes-that-most-things-in-this-course-can-be-sorted-into",
    "title": "Week 7: Code Examples and Midterm Review",
    "section": "The Two Boxes That Most Things In This Course Can Be Sorted Into",
    "text": "The Two Boxes That Most Things In This Course Can Be Sorted Into\n\nBox 1: Linear Things\nBox 2: Logarithmic Things\nThings that go into the boxes:\n\nAlgorithms\nData Structures\nSoftware Development Patterns"
  },
  {
    "objectID": "w07/slides.html#the-boxes",
    "href": "w07/slides.html#the-boxes",
    "title": "Week 7: Code Examples and Midterm Review",
    "section": "The Boxes",
    "text": "The Boxes\n\n\n\n\n\n\n\n\n\nLinear Things: \\(O(N)\\)\nLogarithmic Things: \\(O(\\lg{N})\\)\n\n\n\n\nData Structures\nLinkedList\n\nBinarySearchTree\n\n\n\n\n\n\n\nSorting Algorithms\nInsertion-Sort\nMerge-Sort\n\n\nSearch Algorithms\nLinear-Search\nBinary-Search\n\n\nGeneral Pattern\nOne-by-One\nDivide-and-Conquer\n\n\nSteps to Look Up a Word\n\\(N = 102118\\)\n\\(\\lceil \\log_2(N) \\rceil = 17\\)\n\n\n\n\nHash Table: A ‚Äútrick‚Äù that gets us close to \\(O(1)\\), by pre-allocating lots of memory!\n\n\\[\nO(N) \\; \\underbrace{\\leadsto O(\\log_2(N))}_{\\mathclap{\\substack{\\text{More Efficient Algorithm} \\\\ \\text{(Free!)}}}} \\; \\underbrace{\\leadsto O(1 + \\epsilon\\log_2(N))}_{\\substack{\\text{More Memory} \\\\ \\text{(\\$\\$\\$)}}}\n\\]"
  },
  {
    "objectID": "w07/index.html",
    "href": "w07/index.html",
    "title": "Week 7: Code Examples and Midterm Review",
    "section": "",
    "text": "Open slides in new window ‚Üí",
    "crumbs": [
      "Week 7: {{< var w07.date-md >}}"
    ]
  },
  {
    "objectID": "w07/index.html#the-great-wheel-of-data-structural-and-algorithmic-fate",
    "href": "w07/index.html#the-great-wheel-of-data-structural-and-algorithmic-fate",
    "title": "Week 7: Code Examples and Midterm Review",
    "section": "The Great Wheel of Data-Structural and Algorithmic Fate",
    "text": "The Great Wheel of Data-Structural and Algorithmic Fate\n\n\n\nFull Topics (20 mins):\n\n\nLinkedList variations\nObject-Oriented Design\nCollision-Resistant Hashing\nSorting\n\n\n\nMini Topics (10 mins):\n\n\nStack-Heap Distinction\nBig-\\(\\overline{O}\\) Notation\nData Validation\nLinear vs.¬†Logarithmic Design\nBSTs: DFS vs.¬†BFS\nTrees vs.¬†Graphs (Cycles)\n\n\n\n\n\nhttps://wheelofnames.com/",
    "crumbs": [
      "Week 7: {{< var w07.date-md >}}"
    ]
  },
  {
    "objectID": "w07/index.html#stack-heap-distinction",
    "href": "w07/index.html#stack-heap-distinction",
    "title": "Week 7: Code Examples and Midterm Review",
    "section": "Stack-Heap Distinction",
    "text": "Stack-Heap Distinction\n\nThe Stack (\\(\\neq\\) Stack data structure)\n\nFixed-length things go here, including Pointers to Heap\n\nThe Heap (\\(\\neq\\) Heap data structure)\n\nVariable-length things go here\n\nHeap elves manage The Heap, by‚Ä¶\n\nConstantly ‚Äúclaiming‚Äù additional memory from the OS (malloc()), in case objects need to grow\n‚ÄúFreeing‚Äù memory back for use by the OS (free()), when objects shrink / deleted / Python execution ends",
    "crumbs": [
      "Week 7: {{< var w07.date-md >}}"
    ]
  },
  {
    "objectID": "w07/index.html#big-overlineo-notation",
    "href": "w07/index.html#big-overlineo-notation",
    "title": "Week 7: Code Examples and Midterm Review",
    "section": "Big-\\(\\overline{O}\\) Notation",
    "text": "Big-\\(\\overline{O}\\) Notation\n\nThese are equivalence classes (not numbers or functions)\n Compute the runtime \\(T(n)\\) of an algorithm\n Worry about how it scales as \\(n\\) gets large: \\(\\lim_{n \\rightarrow \\infty}T(n)\\)\n Decide whether to use it or not based on which equivalence class it converges to:\n\n\\(O(1)\\)\n\\(O(\\log(n))\\)\n\\(O(n)\\)\n\\(O(n^2)\\)",
    "crumbs": [
      "Week 7: {{< var w07.date-md >}}"
    ]
  },
  {
    "objectID": "w07/index.html#data-validation",
    "href": "w07/index.html#data-validation",
    "title": "Week 7: Code Examples and Midterm Review",
    "section": "Data Validation",
    "text": "Data Validation\n\nTo know: Type Hints in Python\nTo know: Pydantic\nTo think about: Pandera",
    "crumbs": [
      "Week 7: {{< var w07.date-md >}}"
    ]
  },
  {
    "objectID": "w07/index.html#linear-vs.-logarithmic-design",
    "href": "w07/index.html#linear-vs.-logarithmic-design",
    "title": "Week 7: Code Examples and Midterm Review",
    "section": "Linear vs.¬†Logarithmic Design",
    "text": "Linear vs.¬†Logarithmic Design\n\nEnter the Logarithm demo app",
    "crumbs": [
      "Week 7: {{< var w07.date-md >}}"
    ]
  },
  {
    "objectID": "w07/index.html#depth-first-vs.-breadth-first-search",
    "href": "w07/index.html#depth-first-vs.-breadth-first-search",
    "title": "Week 7: Code Examples and Midterm Review",
    "section": "Depth-First vs.¬†Breadth-First Search",
    "text": "Depth-First vs.¬†Breadth-First Search\n\nDepth-First is greedy: At any given node, algorithm starts by just following first link until it hits None!\n\nOnly once it hits None does it ‚Äúback up‚Äù and follow second link\n\nBreadth-First is patient: Nodes at level \\(t + 1\\) are not processed (printed) until all nodes at level \\(t\\) have been processed (printed)",
    "crumbs": [
      "Week 7: {{< var w07.date-md >}}"
    ]
  },
  {
    "objectID": "w07/index.html#trees-vs.-graphs-cycles",
    "href": "w07/index.html#trees-vs.-graphs-cycles",
    "title": "Week 7: Code Examples and Midterm Review",
    "section": "Trees vs.¬†Graphs (Cycles)",
    "text": "Trees vs.¬†Graphs (Cycles)\n\nIn terms of creating and managing data structures, we start with Trees and move to Graphs\nBut, in terms of defining these structures, it helps to start with Graphs\nA graph is just a collection of linked nodes (any number of links): connected if some possible path between any two nodes\nA tree is a connected graph without cycles\nA binary tree is a tree where each node has only two outward links (called children)\nA binary search tree is a binary tree where\n\n Outward links are labeled left and right\n [All contents after following left] \\(&lt;\\) [current content]\n [All contents after following right] \\(&gt;\\) [current content]",
    "crumbs": [
      "Week 7: {{< var w07.date-md >}}"
    ]
  },
  {
    "objectID": "w07/index.html#variations-on-linkedlist",
    "href": "w07/index.html#variations-on-linkedlist",
    "title": "Week 7: Code Examples and Midterm Review",
    "section": "Variations on LinkedList",
    "text": "Variations on LinkedList\n\nFrontBackLinkedList\nDeque (Pronounced like ‚ÄúDeck‚Äù)\nDoublyLinkedList",
    "crumbs": [
      "Week 7: {{< var w07.date-md >}}"
    ]
  },
  {
    "objectID": "w07/index.html#frontbacklinkedlist",
    "href": "w07/index.html#frontbacklinkedlist",
    "title": "Week 7: Code Examples and Midterm Review",
    "section": "FrontBackLinkedList",
    "text": "FrontBackLinkedList\n\nThis isn‚Äôt exactly a separate data structure from a LinkedList, but instead an ‚Äúexpansion pack‚Äù for LinkedList which adds an insert_front() function",
    "crumbs": [
      "Week 7: {{< var w07.date-md >}}"
    ]
  },
  {
    "objectID": "w07/index.html#doublylinkedlist",
    "href": "w07/index.html#doublylinkedlist",
    "title": "Week 7: Code Examples and Midterm Review",
    "section": "DoublyLinkedList",
    "text": "DoublyLinkedList\n\nFor when we need to be able to reverse directions at any point during iteration\nLinkedListNode had only a next pointer\nDoublyLinkedListNode has two pointers: prev and next",
    "crumbs": [
      "Week 7: {{< var w07.date-md >}}"
    ]
  },
  {
    "objectID": "w07/index.html#deque",
    "href": "w07/index.html#deque",
    "title": "Week 7: Code Examples and Midterm Review",
    "section": "Deque",
    "text": "Deque\n\nMay seem similar to FrontBackLinkedList, but this time we do have a (slightly) different data structure!\nFor when we need to iterate through a list in-order or in reverse order, with exact same complexity!\n\n(Who can think of a case where this would be immediately useful?)\n\nLike in FrontBackLinkedList, we have a new insert_front() function\nLike in DoublyLinkedList, we have both prev and next pointers in each DequeNode\nBut, we also add a new pointer in the Deque class itself (not the DequeNode class), tail, so that we now have head (formerly called root) and tail (pointing to the last element in the LL)",
    "crumbs": [
      "Week 7: {{< var w07.date-md >}}"
    ]
  },
  {
    "objectID": "w07/index.html#collision-resistant-hashing",
    "href": "w07/index.html#collision-resistant-hashing",
    "title": "Week 7: Code Examples and Midterm Review",
    "section": "Collision-Resistant Hashing",
    "text": "Collision-Resistant Hashing\n\nIn general: What properties do we think a ‚Äúgood‚Äù hashing algorithm should have?\nMore specific: Given \\(N\\) objects to store and \\(M\\) available memory slots, what are the limits to \\(\\overline{O}(1)\\)?\n\nEfficiency when \\(N &lt; M\\)?\nEfficiency when \\(N = M\\)?\nEfficiency when \\(N &gt; M\\)?\nHow do these change if we move from LinkedList-backed to BST-backed?",
    "crumbs": [
      "Week 7: {{< var w07.date-md >}}"
    ]
  },
  {
    "objectID": "w07/index.html#object-oriented-design",
    "href": "w07/index.html#object-oriented-design",
    "title": "Week 7: Code Examples and Midterm Review",
    "section": "Object-Oriented Design",
    "text": "Object-Oriented Design\n\nFirst: What are the two kinds of ‚Äúthings‚Äù that an object has?\nWhat is the difference between a class and an object?\nOML without Polymorphism\nOML with Polymorphism\nAbstract Base Classes (ABC in Python)",
    "crumbs": [
      "Week 7: {{< var w07.date-md >}}"
    ]
  },
  {
    "objectID": "w07/index.html#sorting",
    "href": "w07/index.html#sorting",
    "title": "Week 7: Code Examples and Midterm Review",
    "section": "Sorting",
    "text": "Sorting\n\nHow is Merge-Sort ‚Äúbetter‚Äù? What role does Merge subroutine play?\nWhat/where exactly are the invariants in these diagrams?\n\n\n\n\nInsertion-Sort\n\n\n\n\n\n\n\n\nMerge-Sort",
    "crumbs": [
      "Week 7: {{< var w07.date-md >}}"
    ]
  },
  {
    "objectID": "w07/index.html#midterm-structure",
    "href": "w07/index.html#midterm-structure",
    "title": "Week 7: Code Examples and Midterm Review",
    "section": "Midterm Structure",
    "text": "Midterm Structure\n\nCoding Portion: Modifications of LinkedList (Circular / jump-to-end / doubly-linked); non-scary OOP skeleton üôà\nMultiple Choice Portion: Lots more to cover‚Ä¶\n\nHash Tables: \\(O(1 + \\epsilon \\log_2(n))\\), but think about it as:\n\\(1 + (\\text{Collision rate}) \\cdot (\\text{Collision handler efficiency})\\)\nLinked List \\(\\rightarrow\\) Binary Search Tree\nDepth-First vs.¬†Breadth-First: Picture of a tree \\(\\rightarrow\\) (a) what is BFS result, (b) what is (in/pre/post)-order DFS result?\nLastly: Cormen, Leiserson, Rivest, Stein (CLRS), pgs. 17-106",
    "crumbs": [
      "Week 7: {{< var w07.date-md >}}"
    ]
  },
  {
    "objectID": "w07/index.html#the-two-boxes-that-most-things-in-this-course-can-be-sorted-into",
    "href": "w07/index.html#the-two-boxes-that-most-things-in-this-course-can-be-sorted-into",
    "title": "Week 7: Code Examples and Midterm Review",
    "section": "The Two Boxes That Most Things In This Course Can Be Sorted Into",
    "text": "The Two Boxes That Most Things In This Course Can Be Sorted Into\n\nBox 1: Linear Things\nBox 2: Logarithmic Things\nThings that go into the boxes:\n\nAlgorithms\nData Structures\nSoftware Development Patterns",
    "crumbs": [
      "Week 7: {{< var w07.date-md >}}"
    ]
  },
  {
    "objectID": "w07/index.html#the-boxes",
    "href": "w07/index.html#the-boxes",
    "title": "Week 7: Code Examples and Midterm Review",
    "section": "The Boxes",
    "text": "The Boxes\n\n\n\n\n\n\n\n\n\nLinear Things: \\(O(N)\\)\nLogarithmic Things: \\(O(\\lg{N})\\)\n\n\n\n\nData Structures\nLinkedList\n\nBinarySearchTree\n\n\n\n\n\n\n\nSorting Algorithms\nInsertion-Sort\nMerge-Sort\n\n\nSearch Algorithms\nLinear-Search\nBinary-Search\n\n\nGeneral Pattern\nOne-by-One\nDivide-and-Conquer\n\n\nSteps to Look Up a Word\n\\(N = 102118\\)\n\\(\\lceil \\log_2(N) \\rceil = 17\\)\n\n\n\n\nHash Table: A ‚Äútrick‚Äù that gets us close to \\(O(1)\\), by pre-allocating lots of memory!\n\n\\[\nO(N) \\; \\underbrace{\\leadsto O(\\log_2(N))}_{\\mathclap{\\substack{\\text{More Efficient Algorithm} \\\\ \\text{(Free!)}}}} \\; \\underbrace{\\leadsto O(1 + \\epsilon\\log_2(N))}_{\\substack{\\text{More Memory} \\\\ \\text{(\\$\\$\\$)}}}\n\\]",
    "crumbs": [
      "Week 7: {{< var w07.date-md >}}"
    ]
  },
  {
    "objectID": "w10/slides.html#data-mining",
    "href": "w10/slides.html#data-mining",
    "title": "Week 10: Data Pipeline Orchestration",
    "section": "Data Mining",
    "text": "Data Mining"
  },
  {
    "objectID": "w10/slides.html#quotes-to-scrape",
    "href": "w10/slides.html#quotes-to-scrape",
    "title": "Week 10: Data Pipeline Orchestration",
    "section": "Quotes to Scrape",
    "text": "Quotes to Scrape\n\nCreated by Zyte as a ‚Äúsandbox‚Äù for web scraping\nHas ‚Äúlevels‚Äù representing more and more difficult scraping tasks: ToScrape.com\nOur case: Not harder than the ‚Äúmain‚Äù site, just a different task to simulate a different environment\nCould take the HW3 pipeline and ‚Äúplug in‚Äù Twitter, stock data, etc."
  },
  {
    "objectID": "w10/slides.html#first-pipeline-one-quote-per-second",
    "href": "w10/slides.html#first-pipeline-one-quote-per-second",
    "title": "Week 10: Data Pipeline Orchestration",
    "section": "First Pipeline: One Quote Per Second",
    "text": "First Pipeline: One Quote Per Second\n\nExtract: Scrape the quote data from the webpage‚Äôs HTML\nTransform: Filter out function words, compute frequencies for content words\nLoad: Save the\nOur copilot: Pydantic!\n\nUse a Quote class, extending BaseModel, to specify data fields and ensure quality/uniformity\n\nRun once per second, 10 times total"
  },
  {
    "objectID": "w10/slides.html#second-pipeline-post-scrape-report",
    "href": "w10/slides.html#second-pipeline-post-scrape-report",
    "title": "Week 10: Data Pipeline Orchestration",
    "section": "Second Pipeline: Post-Scrape Report",
    "text": "Second Pipeline: Post-Scrape Report\n\nFirst pipeline has successfully run 10 times‚Ä¶ what now?\nAnswer: Generate a report for your boss up at the entrance to the quote mine\nExtract: The ten scraped Quote objects\nTransform: Find top 5 words, top 5 tags, and generate a wordcloud\nLoad: Embed the words, tags, and wordcloud within a Markdown document that gets emailed to your boss"
  },
  {
    "objectID": "w10/slides.html#beautifulsoup",
    "href": "w10/slides.html#beautifulsoup",
    "title": "Week 10: Data Pipeline Orchestration",
    "section": "BeautifulSoup",
    "text": "BeautifulSoup\n\nWithout giving away the answers‚Ä¶\nThe key to this part is to inspect the source of the Quotes to Scrape page, and identify the HTML tags and classes containing each piece of info you need to extract!"
  },
  {
    "objectID": "w10/slides.html#rrules",
    "href": "w10/slides.html#rrules",
    "title": "Week 10: Data Pipeline Orchestration",
    "section": "RRules",
    "text": "RRules\n\nA language for specying schedules for tasks\nIn the same way that we can run SQL queries from within Python, we can use RRule syntax to specify schedules for tasks from within Python\nRRule.js Demo"
  },
  {
    "objectID": "w10/slides.html#pythons-counter-class",
    "href": "w10/slides.html#pythons-counter-class",
    "title": "Week 10: Data Pipeline Orchestration",
    "section": "Python‚Äôs Counter Class",
    "text": "Python‚Äôs Counter Class\n\nA fancy wrapper around a plain-old dict!\n(Quick Colab demo to see how it works: creating a Counter, combining two Counters)"
  },
  {
    "objectID": "w10/slides.html#quick-survey-question-for-intuition-building",
    "href": "w10/slides.html#quick-survey-question-for-intuition-building",
    "title": "Week 10: Data Pipeline Orchestration",
    "section": "Quick Survey Question, for Intuition-Building",
    "text": "Quick Survey Question, for Intuition-Building\n\nAre humans capable of ‚Äútrue‚Äù multi-tasking?\n\nAs in, doing two things at the exact same time?\n\n(Or, do we instead rapidly switch back and forth between tasks?)"
  },
  {
    "objectID": "w10/slides.html#the-answer",
    "href": "w10/slides.html#the-answer",
    "title": "Week 10: Data Pipeline Orchestration",
    "section": "The Answer",
    "text": "The Answer\n\n(From what we understand, at the moment, by way of studies in neuroscience/cognitive science/etc‚Ä¶)\nHumans are not capable of true multitasking! In CS terms, this would be called multiprocessing (more on this later)\nWe are capable, however, of various modes of concurrency!\n\n\n\n\n\n\n\n\n\n\nMultithreading\nAsynchronous Execution\n\n\n\n\nUnconsciously(you do it already, ‚Äúnaturally‚Äù)\nFocus on one speaker within a loud room, with tons of other conversations entering your ears\nPut something in oven, set alarm, go do something else, take out of oven once alarm goes off\n\n\nConsciously(you can do it with effort/practice)\nPat head (up and down) and rub stomach (circular motion) ‚Äúsimultaneously‚Äù\nThrow a ball in the air, clap 3 times, catch ball"
  },
  {
    "objectID": "w10/slides.html#helpful-specifically-for-programming",
    "href": "w10/slides.html#helpful-specifically-for-programming",
    "title": "Week 10: Data Pipeline Orchestration",
    "section": "Helpful Specifically for Programming",
    "text": "Helpful Specifically for Programming\n\nOne famous book phrases it like: if implemented thoughtfully, concurrency is a power multiplier for your code (do 10 things in 1 second instead of 10 seconds‚Ä¶)"
  },
  {
    "objectID": "w10/slides.html#helpful-in-general-as-a-way-of-thinking",
    "href": "w10/slides.html#helpful-in-general-as-a-way-of-thinking",
    "title": "Week 10: Data Pipeline Orchestration",
    "section": "Helpful In General as a Way of Thinking!",
    "text": "Helpful In General as a Way of Thinking!\n\nSay you get hired as a Project Manager‚Ä¶\nPart of your job will fundamentally involve pipelines!\n\nNeed to know when Task \\(B\\) does/does not require Task \\(A\\) as a prerequisite\nNeed to know whether Task \\(A\\) and Task \\(B\\) can share one resource or need their own individual resources\nOnce Task \\(A\\) and \\(B\\) both complete, how do we merge their results together?"
  },
  {
    "objectID": "w10/slides.html#avoiding-the-rabbithole",
    "href": "w10/slides.html#avoiding-the-rabbithole",
    "title": "Week 10: Data Pipeline Orchestration",
    "section": "Avoiding the Rabbithole",
    "text": "Avoiding the Rabbithole\n\nParallel computing is a rabbithole, but one you can safely avoid via simple heuristics (‚Äúrules of thumb‚Äù)!\n\n\nCheck for optimizations to serial code first,\nCheck for embarrassingly parallel code blocks\nUse map-reduce approach for more complicated cases"
  },
  {
    "objectID": "w10/slides.html#embarrassingly-parallel-pipelines",
    "href": "w10/slides.html#embarrassingly-parallel-pipelines",
    "title": "Week 10: Data Pipeline Orchestration",
    "section": "‚ÄúEmbarrassingly Parallel‚Äù Pipelines",
    "text": "‚ÄúEmbarrassingly Parallel‚Äù Pipelines\n\nTechnical definition: tasks within pipeline can easily be parallelized bc no dependence and no need for communication (see next slide). Better video explanation:"
  },
  {
    "objectID": "w10/slides.html#parallelizing-non-embarrassingly-parallel-pipelines",
    "href": "w10/slides.html#parallelizing-non-embarrassingly-parallel-pipelines",
    "title": "Week 10: Data Pipeline Orchestration",
    "section": "Parallelizing Non-Embarrassingly-Parallel Pipelines‚Ä¶",
    "text": "Parallelizing Non-Embarrassingly-Parallel Pipelines‚Ä¶\n\nepic_bacon_lifehack.jpeg"
  },
  {
    "objectID": "w10/slides.html#buzzkill-complications-to-come",
    "href": "w10/slides.html#buzzkill-complications-to-come",
    "title": "Week 10: Data Pipeline Orchestration",
    "section": "Buzzkill: Complications to Come üò∞",
    "text": "Buzzkill: Complications to Come üò∞\n\nIf it‚Äôs such a magical powerup, shouldn‚Äôt we just parallelize everything? Answer: No üòû because overhead.\nOverhead source 1: Beyond ‚Äúembarrassingly parallel‚Äù cases, threads may require their own separate stacks and heaps\nOverhead source 2: Even after setting up new stacks and heaps, threads may need to communicate with one another (especially if they need to synchronize at some point(s))\nIn fact, probably the earliest super-popular parallelization library was created to handle Source 2, not Source 1: Message Passing Interface (C, C++, and Fortran)"
  },
  {
    "objectID": "w10/slides.html#the-worst-part-imo",
    "href": "w10/slides.html#the-worst-part-imo",
    "title": "Week 10: Data Pipeline Orchestration",
    "section": "The Worst Part, IMO",
    "text": "The Worst Part, IMO\n\nPlenty of problems in CS/data science have these kinds of complications‚Ä¶ (if they weren‚Äôt complicated, we wouldn‚Äôt have as many jobs)\nWe saw for example, with hash tables, how we can try our best to minimize collisions (MD5 and other provably-optimal hash functions), but can‚Äôt eliminate them entirely\n\nSo, we tackle this complication by also developing efficient collision-handling structures like BSTs!\n\nWith parallel overhead costs, however‚Ä¶ I don‚Äôt know of any easily-accessible ‚Äúthing‚Äù like the theory of hash tables that can be used to optimize parallelization\n\nIn other words, you would think we could do a similar optimization: paralellize if benefits &gt; costs, keep as serial otherwise\nBut, if you try to find a ‚Äúframework‚Äù for this, you‚Äôll mostly find StackOverflow posts, textbooks, etc. which say ‚Äústuff varies too much between different chipsets, languages, operating systems, etc‚Ä¶ sorry!‚Äù"
  },
  {
    "objectID": "w10/slides.html#the-solution",
    "href": "w10/slides.html#the-solution",
    "title": "Week 10: Data Pipeline Orchestration",
    "section": "The Solution?",
    "text": "The Solution?\n\nAgain, as far as I can tell (despite workshops/courses and two summer internships just parallelizing stuff)‚Ä¶\nYou just start trying to parallelize, carefully measure and test the performance gains/losses, and then\nDecide whether to commit to parallel or stick to serial, via an estimate of how your analysis/app will need to scale!\nHence the usefulness of Prefect for visualizing tradeoff:\n\nTasks which used to run in serial will now run at same time, but will take longer (unless embarrassingly parallel) due to setup+communication overhead"
  },
  {
    "objectID": "w10/slides.html#hw4-draft-part-1-parallelized-hw3",
    "href": "w10/slides.html#hw4-draft-part-1-parallelized-hw3",
    "title": "Week 10: Data Pipeline Orchestration",
    "section": "HW4 Draft Part 1 = Parallelized HW3",
    "text": "HW4 Draft Part 1 = Parallelized HW3\n\n\\(N\\) random quotes on the page rather than just one\nIs it embarrassingly parallel?\nPart 2 TBD!"
  },
  {
    "objectID": "w10/index.html",
    "href": "w10/index.html",
    "title": "Week 10: Data Pipeline Orchestration",
    "section": "",
    "text": "Open slides in new window ‚Üí",
    "crumbs": [
      "Week 10: {{< var w10.date-md >}}"
    ]
  },
  {
    "objectID": "w10/index.html#data-mining",
    "href": "w10/index.html#data-mining",
    "title": "Week 10: Data Pipeline Orchestration",
    "section": "Data Mining",
    "text": "Data Mining",
    "crumbs": [
      "Week 10: {{< var w10.date-md >}}"
    ]
  },
  {
    "objectID": "w10/index.html#quotes-to-scrape",
    "href": "w10/index.html#quotes-to-scrape",
    "title": "Week 10: Data Pipeline Orchestration",
    "section": "Quotes to Scrape",
    "text": "Quotes to Scrape\n\nCreated by Zyte as a ‚Äúsandbox‚Äù for web scraping\nHas ‚Äúlevels‚Äù representing more and more difficult scraping tasks: ToScrape.com\nOur case: Not harder than the ‚Äúmain‚Äù site, just a different task to simulate a different environment\nCould take the HW3 pipeline and ‚Äúplug in‚Äù Twitter, stock data, etc.",
    "crumbs": [
      "Week 10: {{< var w10.date-md >}}"
    ]
  },
  {
    "objectID": "w10/index.html#first-pipeline-one-quote-per-second",
    "href": "w10/index.html#first-pipeline-one-quote-per-second",
    "title": "Week 10: Data Pipeline Orchestration",
    "section": "First Pipeline: One Quote Per Second",
    "text": "First Pipeline: One Quote Per Second\n\nExtract: Scrape the quote data from the webpage‚Äôs HTML\nTransform: Filter out function words, compute frequencies for content words\nLoad: Save the\nOur copilot: Pydantic!\n\nUse a Quote class, extending BaseModel, to specify data fields and ensure quality/uniformity\n\nRun once per second, 10 times total",
    "crumbs": [
      "Week 10: {{< var w10.date-md >}}"
    ]
  },
  {
    "objectID": "w10/index.html#second-pipeline-post-scrape-report",
    "href": "w10/index.html#second-pipeline-post-scrape-report",
    "title": "Week 10: Data Pipeline Orchestration",
    "section": "Second Pipeline: Post-Scrape Report",
    "text": "Second Pipeline: Post-Scrape Report\n\nFirst pipeline has successfully run 10 times‚Ä¶ what now?\nAnswer: Generate a report for your boss up at the entrance to the quote mine\nExtract: The ten scraped Quote objects\nTransform: Find top 5 words, top 5 tags, and generate a wordcloud\nLoad: Embed the words, tags, and wordcloud within a Markdown document that gets emailed to your boss",
    "crumbs": [
      "Week 10: {{< var w10.date-md >}}"
    ]
  },
  {
    "objectID": "w10/index.html#beautifulsoup",
    "href": "w10/index.html#beautifulsoup",
    "title": "Week 10: Data Pipeline Orchestration",
    "section": "BeautifulSoup",
    "text": "BeautifulSoup\n\nWithout giving away the answers‚Ä¶\nThe key to this part is to inspect the source of the Quotes to Scrape page, and identify the HTML tags and classes containing each piece of info you need to extract!",
    "crumbs": [
      "Week 10: {{< var w10.date-md >}}"
    ]
  },
  {
    "objectID": "w10/index.html#rrules",
    "href": "w10/index.html#rrules",
    "title": "Week 10: Data Pipeline Orchestration",
    "section": "RRules",
    "text": "RRules\n\nA language for specying schedules for tasks\nIn the same way that we can run SQL queries from within Python, we can use RRule syntax to specify schedules for tasks from within Python\nRRule.js Demo",
    "crumbs": [
      "Week 10: {{< var w10.date-md >}}"
    ]
  },
  {
    "objectID": "w10/index.html#pythons-counter-class",
    "href": "w10/index.html#pythons-counter-class",
    "title": "Week 10: Data Pipeline Orchestration",
    "section": "Python‚Äôs Counter Class",
    "text": "Python‚Äôs Counter Class\n\nA fancy wrapper around a plain-old dict!\n(Quick Colab demo to see how it works: creating a Counter, combining two Counters)",
    "crumbs": [
      "Week 10: {{< var w10.date-md >}}"
    ]
  },
  {
    "objectID": "w10/index.html#quick-survey-question-for-intuition-building",
    "href": "w10/index.html#quick-survey-question-for-intuition-building",
    "title": "Week 10: Data Pipeline Orchestration",
    "section": "Quick Survey Question, for Intuition-Building",
    "text": "Quick Survey Question, for Intuition-Building\n\nAre humans capable of ‚Äútrue‚Äù multi-tasking?\n\nAs in, doing two things at the exact same time?\n\n(Or, do we instead rapidly switch back and forth between tasks?)",
    "crumbs": [
      "Week 10: {{< var w10.date-md >}}"
    ]
  },
  {
    "objectID": "w10/index.html#the-answer",
    "href": "w10/index.html#the-answer",
    "title": "Week 10: Data Pipeline Orchestration",
    "section": "The Answer",
    "text": "The Answer\n\n(From what we understand, at the moment, by way of studies in neuroscience/cognitive science/etc‚Ä¶)\nHumans are not capable of true multitasking! In CS terms, this would be called multiprocessing (more on this later)\nWe are capable, however, of various modes of concurrency!\n\n\n\n\n\n\n\n\n\n\nMultithreading\nAsynchronous Execution\n\n\n\n\nUnconsciously(you do it already, ‚Äúnaturally‚Äù)\nFocus on one speaker within a loud room, with tons of other conversations entering your ears\nPut something in oven, set alarm, go do something else, take out of oven once alarm goes off\n\n\nConsciously(you can do it with effort/practice)\nPat head (up and down) and rub stomach (circular motion) ‚Äúsimultaneously‚Äù\nThrow a ball in the air, clap 3 times, catch ball",
    "crumbs": [
      "Week 10: {{< var w10.date-md >}}"
    ]
  },
  {
    "objectID": "w10/index.html#helpful-specifically-for-programming",
    "href": "w10/index.html#helpful-specifically-for-programming",
    "title": "Week 10: Data Pipeline Orchestration",
    "section": "Helpful Specifically for Programming",
    "text": "Helpful Specifically for Programming\n\nOne famous book phrases it like: if implemented thoughtfully, concurrency is a power multiplier for your code (do 10 things in 1 second instead of 10 seconds‚Ä¶)",
    "crumbs": [
      "Week 10: {{< var w10.date-md >}}"
    ]
  },
  {
    "objectID": "w10/index.html#helpful-in-general-as-a-way-of-thinking",
    "href": "w10/index.html#helpful-in-general-as-a-way-of-thinking",
    "title": "Week 10: Data Pipeline Orchestration",
    "section": "Helpful In General as a Way of Thinking!",
    "text": "Helpful In General as a Way of Thinking!\n\nSay you get hired as a Project Manager‚Ä¶\nPart of your job will fundamentally involve pipelines!\n\nNeed to know when Task \\(B\\) does/does not require Task \\(A\\) as a prerequisite\nNeed to know whether Task \\(A\\) and Task \\(B\\) can share one resource or need their own individual resources\nOnce Task \\(A\\) and \\(B\\) both complete, how do we merge their results together?",
    "crumbs": [
      "Week 10: {{< var w10.date-md >}}"
    ]
  },
  {
    "objectID": "w10/index.html#avoiding-the-rabbithole",
    "href": "w10/index.html#avoiding-the-rabbithole",
    "title": "Week 10: Data Pipeline Orchestration",
    "section": "Avoiding the Rabbithole",
    "text": "Avoiding the Rabbithole\n\nParallel computing is a rabbithole, but one you can safely avoid via simple heuristics (‚Äúrules of thumb‚Äù)!\n\n\nCheck for optimizations to serial code first,\nCheck for embarrassingly parallel code blocks\nUse map-reduce approach for more complicated cases",
    "crumbs": [
      "Week 10: {{< var w10.date-md >}}"
    ]
  },
  {
    "objectID": "w10/index.html#embarrassingly-parallel-pipelines",
    "href": "w10/index.html#embarrassingly-parallel-pipelines",
    "title": "Week 10: Data Pipeline Orchestration",
    "section": "‚ÄúEmbarrassingly Parallel‚Äù Pipelines",
    "text": "‚ÄúEmbarrassingly Parallel‚Äù Pipelines\n\nTechnical definition: tasks within pipeline can easily be parallelized bc no dependence and no need for communication (see next slide). Better video explanation:",
    "crumbs": [
      "Week 10: {{< var w10.date-md >}}"
    ]
  },
  {
    "objectID": "w10/index.html#parallelizing-non-embarrassingly-parallel-pipelines",
    "href": "w10/index.html#parallelizing-non-embarrassingly-parallel-pipelines",
    "title": "Week 10: Data Pipeline Orchestration",
    "section": "Parallelizing Non-Embarrassingly-Parallel Pipelines‚Ä¶",
    "text": "Parallelizing Non-Embarrassingly-Parallel Pipelines‚Ä¶\n\n\n\nepic_bacon_lifehack.jpeg",
    "crumbs": [
      "Week 10: {{< var w10.date-md >}}"
    ]
  },
  {
    "objectID": "w10/index.html#buzzkill-complications-to-come",
    "href": "w10/index.html#buzzkill-complications-to-come",
    "title": "Week 10: Data Pipeline Orchestration",
    "section": "Buzzkill: Complications to Come üò∞",
    "text": "Buzzkill: Complications to Come üò∞\n\nIf it‚Äôs such a magical powerup, shouldn‚Äôt we just parallelize everything? Answer: No üòû because overhead.\nOverhead source 1: Beyond ‚Äúembarrassingly parallel‚Äù cases, threads may require their own separate stacks and heaps\nOverhead source 2: Even after setting up new stacks and heaps, threads may need to communicate with one another (especially if they need to synchronize at some point(s))\nIn fact, probably the earliest super-popular parallelization library was created to handle Source 2, not Source 1: Message Passing Interface (C, C++, and Fortran)",
    "crumbs": [
      "Week 10: {{< var w10.date-md >}}"
    ]
  },
  {
    "objectID": "w10/index.html#the-worst-part-imo",
    "href": "w10/index.html#the-worst-part-imo",
    "title": "Week 10: Data Pipeline Orchestration",
    "section": "The Worst Part, IMO",
    "text": "The Worst Part, IMO\n\nPlenty of problems in CS/data science have these kinds of complications‚Ä¶ (if they weren‚Äôt complicated, we wouldn‚Äôt have as many jobs)\nWe saw for example, with hash tables, how we can try our best to minimize collisions (MD5 and other provably-optimal hash functions), but can‚Äôt eliminate them entirely\n\nSo, we tackle this complication by also developing efficient collision-handling structures like BSTs!\n\nWith parallel overhead costs, however‚Ä¶ I don‚Äôt know of any easily-accessible ‚Äúthing‚Äù like the theory of hash tables that can be used to optimize parallelization\n\nIn other words, you would think we could do a similar optimization: paralellize if benefits &gt; costs, keep as serial otherwise\nBut, if you try to find a ‚Äúframework‚Äù for this, you‚Äôll mostly find StackOverflow posts, textbooks, etc. which say ‚Äústuff varies too much between different chipsets, languages, operating systems, etc‚Ä¶ sorry!‚Äù",
    "crumbs": [
      "Week 10: {{< var w10.date-md >}}"
    ]
  },
  {
    "objectID": "w10/index.html#the-solution",
    "href": "w10/index.html#the-solution",
    "title": "Week 10: Data Pipeline Orchestration",
    "section": "The Solution?",
    "text": "The Solution?\n\nAgain, as far as I can tell (despite workshops/courses and two summer internships just parallelizing stuff)‚Ä¶\nYou just start trying to parallelize, carefully measure and test the performance gains/losses, and then\nDecide whether to commit to parallel or stick to serial, via an estimate of how your analysis/app will need to scale!\nHence the usefulness of Prefect for visualizing tradeoff:\n\nTasks which used to run in serial will now run at same time, but will take longer (unless embarrassingly parallel) due to setup+communication overhead",
    "crumbs": [
      "Week 10: {{< var w10.date-md >}}"
    ]
  },
  {
    "objectID": "w10/index.html#hw4-draft-part-1-parallelized-hw3",
    "href": "w10/index.html#hw4-draft-part-1-parallelized-hw3",
    "title": "Week 10: Data Pipeline Orchestration",
    "section": "HW4 Draft Part 1 = Parallelized HW3",
    "text": "HW4 Draft Part 1 = Parallelized HW3\n\n\\(N\\) random quotes on the page rather than just one\nIs it embarrassingly parallel?\nPart 2 TBD!",
    "crumbs": [
      "Week 10: {{< var w10.date-md >}}"
    ]
  },
  {
    "objectID": "final.html",
    "href": "final.html",
    "title": "Final Project Details",
    "section": "",
    "text": "The idea for your final project is as follows:\nIn pretty much any course on algorithms and data structures, whether in a Data Science, Computer Science, or Applied Math context, there‚Äôs only so much that can be covered in a given unit. This means that, for all of the topics we‚Äôve covered thus far, there‚Äôs a next step that could be taken in learning about the topic. In general this could mean one of the following four options, where I‚Äôve provided a concrete example specific to the class under each heading:\n\n  \n    Option 1: A Deeper Dive\n  \n  \n    \n    \n    \n          Example 1.1: Efficient implementations of deletion in linked lists, rather than just the insertion and retrieval operations on linked lists that we looked at.\n          Example 1.2: Expanding the Binary Search Tree into a Quadtree\n          Example 1.3: Creating an interactive visualization (using Streamlit, for example) of a data structure or algorithm.\n    \n    \n  \n\n\n  \n    Option 2: Fixing an Issue\n  \n  \n    \n    \n    \n      Example 2.1: Binary Search Trees lose their logarithmic efficiency if items are added to them in order (since newly-added items are always added to the right subtree of all existing items, thus \"degenerating\" into a linear linked list structure), an issue which fancier versions of the BST like AVL Trees and Red-Black Trees resolve.\n      Example 2.2: As you saw in the Midterm, hash tables \"degenerate\" from (approximate) $O(1)$ efficiency to $O(\\log_2(n))$ efficiency if the **hashing function** we use is not **efficient** or not **collision-resistant**. So, your project could be to explore and summarize how efficient and collision-resistant hash functions work, and then implement one such hash function in Python.\n    \n    \n  \n\n\n  \n    Option 3: Exploring Applications\n  \n  \n    \n    \n    \n      Example 3.1: In bioinformatics, the sorting algorithms we did learn are helpful for genetic sequence searching, but can be made even more efficient for genetic sequence searches by applying the Burrows-Wheeler Transform to a collection of genetic sequences before applying the sorting algorithms.\n      Example 3.2: We learned Breadth-First Search (BFS) and Depth-First Search (DFS) in somewhat of a hurry, as a way to traverse over the nodes in a Binary Search Tree, but they both have many more exciting applications! For example, if you're interested in web scraping, you could adapt the code from HW2 to create a polymorphic web-scraper, where each node is a webpage, and processing a node means adding each link in the page to the stack/queue.\n    \n    \n  \n\n\n  \n    Option 4: Proving Correctness and/or Efficiency\n  \n  \n    \n    \n    \n      Example 4.1: In the lecture on Insertion-Sort, I hinted at the notion of a correctness proof using invariants---how it would proceed along the same lines as a proof by induction that you might have seen in a previous math class---but never formally walked you through how to do one.\n      Example 4.2: Over the first half of the course, we were able to gradually improve retrieval of elements from data structures in a progression like:\n      \n      \n\n\n\nLinear\n\nLogarithmic\n\nConstant\n\n\n\n\nLinkedList\\(O(n)\\)\n\\(\\rightarrow\\)\nBST\\(O(\\log_2(n))\\)\n\\(\\rightarrow\\)\nHashTable\\(O(1 + \\varepsilon)\\)\n\n\n\n\n      \n      But then, for search, something was missing üßê:\n\n      \n\n\n\nLinear\n\nLogarithmic\n\nConstant\n\n\n\n\nInsertion-Sort\\(O(n^2)\\)\n\\(\\rightarrow\\)\nMerge-Sort\\(O(n\\log_2(n))\\)\n\\(\\rightarrow\\)\n???\n\n\n\n\n\n  Prove that it's in fact not possible to make that additional \"jump\" to constant-time search in \\(O(n)\\), except in very special cases.\n      \n      \n    \n    \n  \n\n\n  \n    Option 5: Building an ETL Pipeline\n  \n  \n    \n    \n    \n      Example 5.1: If there is some task you currently handle manually---say, entering receipts from your email into a spreadsheet, or (the example I mentioned in class) making a fulltext index of ebooks in your library---your project can explore automating this task using Pydantic and Prefect\n      Example 5.2: If there are particular APIs and Database solutions that you've been hoping to explore, now's your chance! Create an ETL pipeline which Extracts data from the API, Transforms it in some interesting way, then Loads it into (for example) an SQL or MongoDB database.\n    \n\n    (For this option, note that we used Pydantic in the course because of its OOP orientation, but if your task is more DataFrame-heavy, you can use Pandera for DataFrame validation in place of Pydantic! Feel free to schedule an office hour with Jeff for more on Pandera)\n    \n  \n\nSo, your task for the final project will be to\n\nChoose one of the topics we covered\nDetermine or work with your mentor to find an interesting ‚Äúnext step‚Äù with respect to this topic\nCarry out this next step (details below, since this will look different for different choices from the above options!)\nWrite up what you did in a report, including any of the code or math or data analysis that you did in Step 3",
    "crumbs": [
      "Final Project"
    ]
  },
  {
    "objectID": "final.html#overview",
    "href": "final.html#overview",
    "title": "Final Project Details",
    "section": "",
    "text": "The idea for your final project is as follows:\nIn pretty much any course on algorithms and data structures, whether in a Data Science, Computer Science, or Applied Math context, there‚Äôs only so much that can be covered in a given unit. This means that, for all of the topics we‚Äôve covered thus far, there‚Äôs a next step that could be taken in learning about the topic. In general this could mean one of the following four options, where I‚Äôve provided a concrete example specific to the class under each heading:\n\n  \n    Option 1: A Deeper Dive\n  \n  \n    \n    \n    \n          Example 1.1: Efficient implementations of deletion in linked lists, rather than just the insertion and retrieval operations on linked lists that we looked at.\n          Example 1.2: Expanding the Binary Search Tree into a Quadtree\n          Example 1.3: Creating an interactive visualization (using Streamlit, for example) of a data structure or algorithm.\n    \n    \n  \n\n\n  \n    Option 2: Fixing an Issue\n  \n  \n    \n    \n    \n      Example 2.1: Binary Search Trees lose their logarithmic efficiency if items are added to them in order (since newly-added items are always added to the right subtree of all existing items, thus \"degenerating\" into a linear linked list structure), an issue which fancier versions of the BST like AVL Trees and Red-Black Trees resolve.\n      Example 2.2: As you saw in the Midterm, hash tables \"degenerate\" from (approximate) $O(1)$ efficiency to $O(\\log_2(n))$ efficiency if the **hashing function** we use is not **efficient** or not **collision-resistant**. So, your project could be to explore and summarize how efficient and collision-resistant hash functions work, and then implement one such hash function in Python.\n    \n    \n  \n\n\n  \n    Option 3: Exploring Applications\n  \n  \n    \n    \n    \n      Example 3.1: In bioinformatics, the sorting algorithms we did learn are helpful for genetic sequence searching, but can be made even more efficient for genetic sequence searches by applying the Burrows-Wheeler Transform to a collection of genetic sequences before applying the sorting algorithms.\n      Example 3.2: We learned Breadth-First Search (BFS) and Depth-First Search (DFS) in somewhat of a hurry, as a way to traverse over the nodes in a Binary Search Tree, but they both have many more exciting applications! For example, if you're interested in web scraping, you could adapt the code from HW2 to create a polymorphic web-scraper, where each node is a webpage, and processing a node means adding each link in the page to the stack/queue.\n    \n    \n  \n\n\n  \n    Option 4: Proving Correctness and/or Efficiency\n  \n  \n    \n    \n    \n      Example 4.1: In the lecture on Insertion-Sort, I hinted at the notion of a correctness proof using invariants---how it would proceed along the same lines as a proof by induction that you might have seen in a previous math class---but never formally walked you through how to do one.\n      Example 4.2: Over the first half of the course, we were able to gradually improve retrieval of elements from data structures in a progression like:\n      \n      \n\n\n\nLinear\n\nLogarithmic\n\nConstant\n\n\n\n\nLinkedList\\(O(n)\\)\n\\(\\rightarrow\\)\nBST\\(O(\\log_2(n))\\)\n\\(\\rightarrow\\)\nHashTable\\(O(1 + \\varepsilon)\\)\n\n\n\n\n      \n      But then, for search, something was missing üßê:\n\n      \n\n\n\nLinear\n\nLogarithmic\n\nConstant\n\n\n\n\nInsertion-Sort\\(O(n^2)\\)\n\\(\\rightarrow\\)\nMerge-Sort\\(O(n\\log_2(n))\\)\n\\(\\rightarrow\\)\n???\n\n\n\n\n\n  Prove that it's in fact not possible to make that additional \"jump\" to constant-time search in \\(O(n)\\), except in very special cases.\n      \n      \n    \n    \n  \n\n\n  \n    Option 5: Building an ETL Pipeline\n  \n  \n    \n    \n    \n      Example 5.1: If there is some task you currently handle manually---say, entering receipts from your email into a spreadsheet, or (the example I mentioned in class) making a fulltext index of ebooks in your library---your project can explore automating this task using Pydantic and Prefect\n      Example 5.2: If there are particular APIs and Database solutions that you've been hoping to explore, now's your chance! Create an ETL pipeline which Extracts data from the API, Transforms it in some interesting way, then Loads it into (for example) an SQL or MongoDB database.\n    \n\n    (For this option, note that we used Pydantic in the course because of its OOP orientation, but if your task is more DataFrame-heavy, you can use Pandera for DataFrame validation in place of Pydantic! Feel free to schedule an office hour with Jeff for more on Pandera)\n    \n  \n\nSo, your task for the final project will be to\n\nChoose one of the topics we covered\nDetermine or work with your mentor to find an interesting ‚Äúnext step‚Äù with respect to this topic\nCarry out this next step (details below, since this will look different for different choices from the above options!)\nWrite up what you did in a report, including any of the code or math or data analysis that you did in Step 3",
    "crumbs": [
      "Final Project"
    ]
  },
  {
    "objectID": "final.html#concrete-requirements",
    "href": "final.html#concrete-requirements",
    "title": "Final Project Details",
    "section": "Concrete Requirements",
    "text": "Concrete Requirements\nFor each of the options described in the Overview section above, the following info boxes describe the structure of the deliverable(s) you would be responsible for (click a header to expand the box; they‚Äôre collapsed by default to avoid overloading you with info if you‚Äôve already chosen!)\n\n\n\n\n\n\n\nOption 1: A Deeper Dive\n\n\n\n\n\nDiving ‚Äòone level deeper‚Äô into the details of the algorithm/data structure\nHere, the deliverable should be structured like:\n\nState which algorithm or data structure you chose, from among those covered in class\nIdentify a substantive implementation detail that we didn‚Äôt cover in class\nImplement it in Python, describing in your own words (through comments or Markdown text above/below the code) how your implementation works\nWrite a set of unit tests demonstrating that your implementation resolves/fixes the drawback that you identified in Step 2\n\n\n\n\n\n\n\n\n\n\nOption 2: Fixing an Issue\n\n\n\n\n\nFiguring out how to address some existing drawback of the algorithm/data structure\nHere, the deliverable should be structured like:\n\nState which algorithm or data structure you chose, from among those covered in class\n\nIdentify a substantive drawback present in the implementation of that topic that we learned in class\n\nImplement it in Python, describing in your own words (through comments or Markdown text above/below the code) how your implementation works\n\nWrite a set of unit tests demonstrating that your implementation handles a range of possible inputs\n\n\n\n\n\n\n\n\n\n\nOption 3: Exploring Applications\n\n\n\n\n\nExamining different applications of the data structure that make it helpful for particular fields\n\nState which course topic you‚Äôve chosen\n\nIdentify a substantive application of that topic in a field you are interested in: e.g., bioinformatics, marketing, finance, NLP, image processing, operations management, social science\n\nWrite a Literature Review section containing a few examples of the use of the topic in your chosen field that are particularly interesting to you\n\nChoose one of the examples from your literature review and create a Quarto document or Jupyter notebook containing code that you wrote yourself which illustrates the application of the data structure or algorithm within your domain of interest, describing in your own words (through comments or Markdown text above/below the code) how the code works and what it does\n\n\n\n\n\n\n\n\n\n\n\nOption 4: Proving Correctness and/or Efficiency\n\n\n\n\n\nCarrying out a more robust analysis of the correctness and/or asymptotic complexity of the algorithms and data structures we looked at\n\nState which algorithm or data structure you chose, from among those covered in class, and whether your focus is on analyzing correctness or efficiency of the algorithm/data structure (or both!)\n\nWrite out the chosen proof, which should be your own work, though it can draw on existing proofs\n\nThroughout the proof in Step 2, also provide an explanation of each step‚Äîfor guidance on what we‚Äôre looking for, imagine not only writing the proof but also walking someone through it who has never seen it before (though you can assume they have some level of mathematical background)\n\n(Basically, for this option, we can‚Äôt prevent you from looking at an existing proof‚Äîand we don‚Äôt want to!‚Äîso instead we are looking at your ability to convey your understanding of how/why the proof works)\n\n\n\n\n\n\n\n\n\nOption 5: Building an ETL Pipeline\n\n\n\n\n\nUsing data validation and pipeline orchestration libraries to build a pipeline useful for your life or your job\n\nGive an outline of the problem(s) with how you currently perform the task (for example, inefficiency or difficulty in tracking progress), and why you think they could be helped or resolved with the aid of an ETL pipeline (NOTE: If the pipeline would be too ambitious to complete during the time remaining in the semester, then in this step you should describe a Minimum Viable Product that you are able to do within the remaining time)\nExplicitly state and describe the Extract, Transform, and Load steps that you will implement, making note of the points where you will use Pydantic/Pandera for data validation (you must incorporate at least one data validation step somewhere in your pipeline‚Äîfor example, a custom class you create which extends Pydantic‚Äôs BaseModel class)\nInclude the actual code from your pipeline, along with substantive comments and descriptions of how it works (at minimum, for each task within your flow, you should describe each of its arguments and what it returns‚Äîif you‚Äôre comfortable doing so, the best way to do this would to include a Sphinx Docstring within each of your tasks!)\nFinally, include screenshots from the Prefect UI showing an example run of the pipeline, as well as any artifacts that your pipeline generates upon completion (your pipeline must produce at least one artifact as a completion report, though it doesn‚Äôt need to be fancy‚Äîfor example, it could just be a short Markdown-formatted document which displays the total runtime of the pipeline from start to finish)",
    "crumbs": [
      "Final Project"
    ]
  },
  {
    "objectID": "final.html#individual-vs.-group-projects",
    "href": "final.html#individual-vs.-group-projects",
    "title": "Final Project Details",
    "section": "Individual vs.¬†Group Projects",
    "text": "Individual vs.¬†Group Projects\nIt is totally up to you whether you‚Äôd like to do the project individually or in a group with other students. However, if you are pursuing the project as a group, please choose one member of the group to serve as the ‚Äúproject lead‚Äù, and include this detail in an email to your mentor.\nThe mentor for the group project will then be whoever was assigned as the individual mentor for the project leader (this choice doesn‚Äôt have to be related to the actual work on the project, it is just for us to be able to allocate mentees fairly between the course staff!).\nExpectations for group projects will scale based on the number of members in the group: for example, a group with two members will be expected to carry out a more substantive project, such that it requires approximately two times the amount of work that would be expected for individual projects1.",
    "crumbs": [
      "Final Project"
    ]
  },
  {
    "objectID": "final.html#timeline",
    "href": "final.html#timeline",
    "title": "Final Project Details",
    "section": "Timeline",
    "text": "Timeline\nIn general, the only ‚Äútrue‚Äù due date is the due date for the final submission, but the project will go most smoothly if you are able to hold yourself to the following schedule:\n\nProposal: Approved by mentor by Wednesday, April 10th\nFinal Draft: Sent to mentor for review by Monday, April 29th\nSubmission: Completed project submitted via Google Classroom by Friday, May 6th, 5:59pm EDT",
    "crumbs": [
      "Final Project"
    ]
  },
  {
    "objectID": "final.html#submission-format",
    "href": "final.html#submission-format",
    "title": "Final Project Details",
    "section": "Submission Format",
    "text": "Submission Format\nThere is now an assignment page for the final project on Google Classroom, where you will upload your final submission for grading. The following is a rough sketch of what we‚Äôre looking for in terms of the structure of your submission:\n\nHTML format, as a rendered Quarto manuscript, would be optimal, but can be PDF if preferred‚Äîfor example, if you choose Option 4 (involving mathematical proofs), you might instead want to use LaTeX rendered to PDF.\nA requirement in terms of number of pages is difficult, but a reasonable range for the PDF format would be 3-10 pages double-spaced. Therefore, for a Quarto document or Jupyter notebook, the length can be the equivalent of this (for example, you can print-preview the Quarto doc to see how many pages it would produce if printed)\nIt should have an abstract, a 250-500 word paragraph at the very top of the manuscript, summarizing what you did\nCitations, if used, should be set up so that they‚Äôre handled automatically. By Quarto‚Äôs citation manager for example, or by Bibtex/Biber if you‚Äôre using LaTeX.",
    "crumbs": [
      "Final Project"
    ]
  },
  {
    "objectID": "final.html#footnotes",
    "href": "final.html#footnotes",
    "title": "Final Project Details",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nThis detail is not something we‚Äôre trying to explicitly measure or be harsh about, but is included here since otherwise (if the expectations for individual and group projects were the exact same) the work would scale the other way: that each person in a two-person project would be doing half the amount of work that a person doing an individual project is doing‚Ä¶ Hopefully that makes sense from a fairness perspective!‚Ü©Ô∏é",
    "crumbs": [
      "Final Project"
    ]
  },
  {
    "objectID": "writeups/index.html",
    "href": "writeups/index.html",
    "title": "Extra Writeups",
    "section": "",
    "text": "Date\n\n\nTitle\n\n\nCategory\n\n\n\n\n\n\nApr 4, 2024\n\n\n‚ÄòServing‚Äô Code to Prefect from Colab\n\n\nHW3 Clarification\n\n\n\n\n\nNo matching items",
    "crumbs": [
      "Extra Writeups"
    ]
  },
  {
    "objectID": "w02/slides.html#hammers-vs.-structures-built-whammers",
    "href": "w02/slides.html#hammers-vs.-structures-built-whammers",
    "title": "Week 2: Software Design Patterns and Object-Oriented Programming",
    "section": "Hammers vs.¬†Structures Built w/Hammers",
    "text": "Hammers vs.¬†Structures Built w/Hammers\n\n\nHow I see the course title:\n\nData Structures!\nObjects!, and\nAlgorithms! (in Python)\n\nHow my opps see the course title: (Data Structures, Objects, and Algorithms) in Python!"
  },
  {
    "objectID": "w02/slides.html#primitive-types-in-general",
    "href": "w02/slides.html#primitive-types-in-general",
    "title": "Week 2: Software Design Patterns and Object-Oriented Programming",
    "section": "Primitive Types in General",
    "text": "Primitive Types in General\n\nVariable types for which [language] knows in advance exactly how much memory is going to be required\nBooleans (True or False): Exactly 1 bit (0 or 1)\nint: 32 or 64 bits (depending on OS)\nNone / null / NA: Since we want it to serve as a ‚Äúblank‚Äù value (easily cast to other primitive types), usually the same number of bits as int\n\nHence, in C for example, null is actually just shorthand for an int with value 0"
  },
  {
    "objectID": "w02/slides.html#primitive-types-python-weirdness-edition",
    "href": "w02/slides.html#primitive-types-python-weirdness-edition",
    "title": "Week 2: Software Design Patterns and Object-Oriented Programming",
    "section": "Primitive Types: Python Weirdness Edition",
    "text": "Primitive Types: Python Weirdness Edition\n\n\n\nBoolean (True or False): Exactly 1 bit (0 or 1)\n\nimport sys\nsys.getsizeof(True)\n\n28\n\n\nint: 32 or 64 bits (depending on OS)\n\nsys.maxsize\n\n9223372036854775807\n\n\nNone\n\nsys.getsizeof(None)\n\n16\n\n\n\n\n\n\n\n\n\n\nWhy is this happening?"
  },
  {
    "objectID": "w02/slides.html#stack-and-heap-in-c-java",
    "href": "w02/slides.html#stack-and-heap-in-c-java",
    "title": "Week 2: Software Design Patterns and Object-Oriented Programming",
    "section": "Stack and Heap in C / Java",
    "text": "Stack and Heap in C / Java\n\n\n\n\nmy_beautiful_app.c\n\ntime_t current_time = time(NULL);\nint num_rows = 13;\nbool filled = true;\nbool empty = false;\nint num_cols = 2;\nchar username[] = \"Jeff\";\nint i = 0;\nint j = None;\nvoid z = NULL;"
  },
  {
    "objectID": "w02/slides.html#stack-and-heap-in-python",
    "href": "w02/slides.html#stack-and-heap-in-python",
    "title": "Week 2: Software Design Patterns and Object-Oriented Programming",
    "section": "Stack and Heap in Python",
    "text": "Stack and Heap in Python\n\n\n\n\nmy_beautiful_app.py\n\nimport datetime\ncur_date = datetime.datetime.now()\nnum_rows = 13\nfilled = True\nempty = False\nnum_cols = 2\nusername = \"Jeff\"\ni = 0\nj = None\nz = 314"
  },
  {
    "objectID": "w02/slides.html#why-does-the-nyc-subway-have-express-lines",
    "href": "w02/slides.html#why-does-the-nyc-subway-have-express-lines",
    "title": "Week 2: Software Design Patterns and Object-Oriented Programming",
    "section": "Why Does The NYC Subway Have Express Lines?",
    "text": "Why Does The NYC Subway Have Express Lines?\n\nFrom NYC Central Park website"
  },
  {
    "objectID": "w02/slides.html#why-stop-at-two-levels",
    "href": "w02/slides.html#why-stop-at-two-levels",
    "title": "Week 2: Software Design Patterns and Object-Oriented Programming",
    "section": "Why Stop At Two Levels?",
    "text": "Why Stop At Two Levels?\n\nFrom Skip List Data Structure Explained, Sumit‚Äôs Diary blog"
  },
  {
    "objectID": "w02/slides.html#how-tf-does-google-maps-work",
    "href": "w02/slides.html#how-tf-does-google-maps-work",
    "title": "Week 2: Software Design Patterns and Object-Oriented Programming",
    "section": "How TF Does Google Maps Work?",
    "text": "How TF Does Google Maps Work?\n\nA (mostly) full-on answer: soon to come! Data structures for spatial data\nA step in that direction: Quadtrees! (Fractal DC)\n\n\nJim Kang‚Äôs Quadtree Visualizations"
  },
  {
    "objectID": "w02/slides.html#the-secretly-exciting-world-of-matrix-multiplication",
    "href": "w02/slides.html#the-secretly-exciting-world-of-matrix-multiplication",
    "title": "Week 2: Software Design Patterns and Object-Oriented Programming",
    "section": "The Secretly Exciting World of Matrix Multiplication",
    "text": "The Secretly Exciting World of Matrix Multiplication\n\nFun Fact 1: Most of modern Machine Learning is, at the processor level, just a bunch of matrix operations\nFun Fact 2: The way we‚Äôve all learned how to multiply matrices requires \\(O(N^3)\\) operations, for two \\(N \\times N\\) matrices \\(A\\) and \\(B\\)\nFun Fact 3: \\(\\underbrace{x^2 - y^2}_{\\mathclap{\\times\\text{ twice, }\\pm\\text{ once}}} = \\underbrace{(x+y)(x-y)}_{\\times\\text{once, }\\pm\\text{ twice}}\\)\nFun Fact 4: These are not very fun facts at all"
  },
  {
    "objectID": "w02/slides.html#why-is-jeff-rambling-about-matrix-math-from-300-years-ago",
    "href": "w02/slides.html#why-is-jeff-rambling-about-matrix-math-from-300-years-ago",
    "title": "Week 2: Software Design Patterns and Object-Oriented Programming",
    "section": "Why Is Jeff Rambling About Matrix Math From 300 Years Ago?",
    "text": "Why Is Jeff Rambling About Matrix Math From 300 Years Ago?\n\nThe way we all learned it in school (for \\(N = 2\\)):\n\n\\[\nAB = \\begin{bmatrix}\na_{11} & a_{12} \\\\\na_{21} & a_{22}\n\\end{bmatrix}\n\\begin{bmatrix}\nb_{11} & b_{12} \\\\\nb_{21} & b_{22}\n\\end{bmatrix} =\n\\begin{bmatrix}\na_{11}b_{11} + a_{12}b_{21} & a_{11}b_{12} + a_{12}b_{22} \\\\\na_{21}b_{11} + a_{22}b_{21} & a_{21}b_{12} + a_{22}b_{22}\n\\end{bmatrix}\n\\]\n\n12 operations: 8 multiplications, 4 additions \\(\\implies O(N^3) = O(2^3) = O(8)\\)\nAre we trapped? Like‚Ä¶ what is there to do besides performing these \\(N^3\\) operations, if we want to multiply two \\(N \\times N\\) matrices? Why are we about to move onto yet another slide about this?"
  },
  {
    "objectID": "w02/slides.html#block-partitioning-matrices",
    "href": "w02/slides.html#block-partitioning-matrices",
    "title": "Week 2: Software Design Patterns and Object-Oriented Programming",
    "section": "Block-Partitioning Matrices",
    "text": "Block-Partitioning Matrices\n\nNow let‚Äôs consider big matrices, whose dimensions are a power of 2 (for ease of illustration): \\(A\\) and \\(B\\) are now \\(N \\times N = 2^n \\times 2^n\\) matrices\nWe can ‚Äúdecompose‚Äù the matrix product \\(AB\\) as:\n\n\\[\nAB = \\begin{bmatrix}\nA_{11} & A_{12} \\\\\nA_{21} & A_{22}\n\\end{bmatrix}\n\\begin{bmatrix}\nB_{11} & B_{12} \\\\\nB_{21} & B_{22}\n\\end{bmatrix} =\n\\begin{bmatrix}\nA_{11}B_{11} + A_{12}B_{21} & A_{11}B_{12} + A_{12}B_{22} \\\\\nA_{21}B_{11} + A_{22}B_{21} & A_{21}B_{12} + A_{22}B_{22}\n\\end{bmatrix}\n\\]\n\nWhich gives us a recurrence relation representing the total number of computations required for this big-matrix multiplication: \\(T(N) = \\underbrace{8T(N/2)}_{\\text{Multiplications}} + \\underbrace{\\Theta(1)}_{\\text{Additions}}\\)\nIt turns out that (using a method we‚Äôll learn in Week 3), given this recurrence relation and our base case from the previous slide, this divide-and-conquer approach via block-partitioning doesn‚Äôt help us: we still get \\(T(n) = O(n^3)\\)‚Ä¶\nSo why is Jeff still torturing us with this example?"
  },
  {
    "objectID": "w02/slides.html#time-for-some-matrix-magic",
    "href": "w02/slides.html#time-for-some-matrix-magic",
    "title": "Week 2: Software Design Patterns and Object-Oriented Programming",
    "section": "Time For Some ü™ÑMATRIX MAGIC!ü™Ñ",
    "text": "Time For Some ü™ÑMATRIX MAGIC!ü™Ñ\n\n\nIf we define\n\n\\[\n\\begin{align*}\nm_1 &= (a_{11}+a_{22})(b_{11}+b_{22}) \\\\\nm_2 &= (a_{21}+a_{22})b_{11} \\\\\nm_3 &= a_{11}(b_{12}-b_{22}) \\\\\nm_4 &= a_{22}(b_{21}-b_{11}) \\\\\nm_5 &= (a_{11}+a_{12})b_{22} \\\\\nm_6 &= (a_{21}-a_{11})(b_{11}+b_{12}) \\\\\nm_7 &= (a_{12}-a_{22})(b_{21}+b_{22})\n\\end{align*}\n\\]\n\n\n\nThen we can combine these seven scalar products to obtain our matrix product:\n\n\\[\nAB = \\begin{bmatrix}\nm_1 + m_4 - m_5 + m_7 & m_3 + m_5 \\\\\nm_2 + m_4 & m_1 - m_2 + m_3 + m_6\n\\end{bmatrix}\n\\]\n\n\nTotal operations: 7 multiplications, 18 additions"
  },
  {
    "objectID": "w02/slides.html#block-partitioned-matrix-magic",
    "href": "w02/slides.html#block-partitioned-matrix-magic",
    "title": "Week 2: Software Design Patterns and Object-Oriented Programming",
    "section": "Block-Partitioned Matrix Magic",
    "text": "Block-Partitioned Matrix Magic\n\nUsing the previous slide as our base case and applying this same method to the block-paritioned big matrices, we get the same result, but where the four entries in \\(AB\\) here are now matrices rather than scalars:\n\n\\[\nAB = \\begin{bmatrix}\nM_1 + M_4 - M_5 + M_7 & M_3 + M_5 \\\\\nM_2 + M_4 & M_1 - M_2 + M_3 + M_6\n\\end{bmatrix}\n\\]\n\nWe now have a different recurrence relation: \\(T(N) = \\underbrace{7T(N/2)}_{\\text{Multiplications}} + \\underbrace{\\Theta(N^2)}_{\\text{Additions}}\\)\nAnd it turns out, somewhat miraculously, that the additional time required for the increased number of additions is significantly less than the time savings we obtain by doing 7 instead of 8 multiplications, since this method now runs in \\(T(N) = O(N^{\\log_2(7)}) \\approx O(N^{2.807}) &lt; O(N^3)\\) ü§Ø"
  },
  {
    "objectID": "w02/slides.html#insertion-sort",
    "href": "w02/slides.html#insertion-sort",
    "title": "Week 2: Software Design Patterns and Object-Oriented Programming",
    "section": "Insertion Sort",
    "text": "Insertion Sort\n\nThink of how you might sort a deck of cards in your hand"
  },
  {
    "objectID": "w02/slides.html#cards-rightarrow-list-elements",
    "href": "w02/slides.html#cards-rightarrow-list-elements",
    "title": "Week 2: Software Design Patterns and Object-Oriented Programming",
    "section": "Cards \\(\\rightarrow\\) List Elements",
    "text": "Cards \\(\\rightarrow\\) List Elements\n\nInput list: [5, 2, 4, 6, 1, 3]\n\n\n\nNotice how, at each point:\n\nThere is a card we‚Äôre currently ‚Äúlooking at‚Äù, called the key, and\nThere is an invariant: everything in the list before the key is already sorted"
  },
  {
    "objectID": "w02/slides.html#complexity-analysis",
    "href": "w02/slides.html#complexity-analysis",
    "title": "Week 2: Software Design Patterns and Object-Oriented Programming",
    "section": "Complexity Analysis",
    "text": "Complexity Analysis\n\nLet \\(t_i\\) be the number of times the while loop runs, \\(\\widetilde{n} = n - 1\\):\n\n\n\n\n\nCode\nCost\nTimes Run\n\n\n\n\n1\nfor i = 1 to n-1:\n\\(c_1\\)\n\\(\\widetilde{n}\\)\n\n\n2\n¬†¬†key = A[i]\n\\(c_2\\)\n\\(\\widetilde{n}\\)\n\n\n3\n¬†¬†# Insert A[i] into sorted subarray A[0:i-1]\n\\(0\\)\n\\(\\widetilde{n}\\)\n\n\n4\n¬†¬†j = i - 1\n\\(c_4\\)\n\\(\\widetilde{n}\\)\n\n\n5\n¬†¬†while j &gt;= 0 and A[j] &gt; key:\n\\(c_5\\)\n\\(\\sum_{i=2}^n t_i\\)\n\n\n6\n¬†¬†¬†¬†A[j + 1] = A[j]\n\\(c_6\\)\n\\(\\sum_{i=2}^n(t_i - 1)\\)\n\n\n7\n¬†¬†¬†¬†j = j - 1\n\\(c_7\\)\n\\(\\sum_{i=2}^n(t_i - 1)\\)\n\n\n8\n¬†¬†A[j + 1] = key\n\\(c_8\\)\n\\(\\widetilde{n}\\)\n\n\n\n\\[\nT(n) = c_1\\widetilde{n} + c_2\\widetilde{n} + c_4\\widetilde{n} + c_5\\sum_{i=2}^nt_i + c_6\\sum_{i=2}^n(t_i - 1) + c_7\\sum_{i=2}^n(t_i-1) + c_8\\widetilde{n}\n\\]"
  },
  {
    "objectID": "w02/slides.html#simplifying",
    "href": "w02/slides.html#simplifying",
    "title": "Week 2: Software Design Patterns and Object-Oriented Programming",
    "section": "Simplifying",
    "text": "Simplifying\n\nThe original, scary-looking equation:\n\n\\[\nT(n) = c_1n + c_2\\widetilde{n} + c_4\\widetilde{n} + c_5{\\color{orange}\\boxed{\\color{black}\\sum_{i=2}^nt_i}} + c_6{\\color{lightblue}\\boxed{\\color{black}\\sum_{i=2}^n(t_i - 1)}} + c_7{\\color{lightblue}\\boxed{\\color{black}\\sum_{i=2}^n(t_i-1)}} + c_8\\widetilde{n}\n\\]\n\nBut \\(\\sum_{i=1}^ni = \\frac{n(n+1)}{2}\\), so:\n\n\\[\n\\begin{align*}\n{\\color{orange}\\boxed{\\color{black}\\sum_{i=2}^ni}} &= \\sum_{i=1}^ni - \\sum_{i=1}^1i = \\frac{n(n+1)}{2} - 1 \\\\\n{\\color{lightblue}\\boxed{\\color{black}\\sum_{i=2}^n(i-1)}} &= \\sum_{i=1}^{n-1}i = \\frac{(n-1)(n-1+1)}{2} = \\frac{n(n-1)}{2}\n\\end{align*}\n\\]\n\nAnd the scary-looking equation simplifies to\n\n\\[\n\\begin{align*}\nT(n) = &{\\color{gray}\\left(\\frac{c_5}{2} + \\frac{c_6}{2} + \\frac{c_7}{2}\\right)}{\\color{green}n^2} + {\\color{gray}\\left(c_1 + c_2 + c_4 + \\frac{c_5}{2} - \\frac{c_6}{2} - \\frac{c_7}{2} + c_8\\right)}{\\color{green}n^1} \\\\\n\\phantom{T(n) = }& - {\\color{gray}(c_2 + c_4 + c_5 + c_8)}{\\color{green}n^0}\n\\end{align*}\n\\]"
  },
  {
    "objectID": "w02/slides.html#remember-asymptotic-analysis",
    "href": "w02/slides.html#remember-asymptotic-analysis",
    "title": "Week 2: Software Design Patterns and Object-Oriented Programming",
    "section": "Remember: Asymptotic Analysis!",
    "text": "Remember: Asymptotic Analysis!\n\nIt still looks pretty messy, but remember: we care about efficiency as a function of \\(n\\)!\n\n\\[\n\\begin{align*}\nT(n) = &\\underbrace{{\\color{gray}\\left(\\frac{c_5}{2} + \\frac{c_6}{2} + \\frac{c_7}{2}\\right)}}_{\\text{Constant}}\\underbrace{\\phantom{(}{\\color{green}n^2}\\phantom{)}}_{\\text{Quadratic}} \\\\\n\\phantom{T(n) = }&+ \\underbrace{{\\color{gray}\\left(c_1 + c_2 + c_4 + \\frac{c_5}{2} - \\frac{c_6}{2} - \\frac{c_7}{2} + c_8\\right)}}_{\\text{Constant}}\\underbrace{\\phantom{(}{\\color{green}n^1}\\phantom{)}}_{\\text{Linear}} \\\\\n\\phantom{T(n) = }& - \\underbrace{{\\color{gray}(c_2 + c_4 + c_5 + c_8)}}_{\\text{Constant}}\\underbrace{{\\color{green}n^0}}_{\\text{Constant}}\n\\end{align*}\n\\]\n\nSo, there‚Äôs a sense in which \\(T(n) \\approx n^2\\), for ‚Äúsufficiently large‚Äù values of \\(n\\)‚Ä¶\nLet‚Äôs work our way towards formalizing the \\(\\approx\\)!"
  },
  {
    "objectID": "w02/slides.html#the-figure-you-should-make-in-your-brain-every-time",
    "href": "w02/slides.html#the-figure-you-should-make-in-your-brain-every-time",
    "title": "Week 2: Software Design Patterns and Object-Oriented Programming",
    "section": "The Figure You Should Make In Your Brain Every Time",
    "text": "The Figure You Should Make In Your Brain Every Time\n\n\nCode\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nn_vals = [np.power(10, k) for k in np.arange(1, 2.75, 0.25)]\nruntime_df = pd.DataFrame({'$n$': n_vals})\nruntime_df['$n^2 + 50n$'] = runtime_df['$n$'].apply(lambda x: np.power(x, 2) + 50*x)\nruntime_df['$n^2 + 10000$'] = runtime_df['$n$'].apply(lambda x: np.power(x, 2) + 10000)\nruntime_df['$O(n)$'] = runtime_df['$n$'].copy()\nruntime_df['$O(nlogn)$'] = runtime_df['$n$'].apply(lambda x: x * np.log(x))\nruntime_df['$O(n^2)$'] = runtime_df['$n$'].apply(lambda x: np.power(x, 2))\nruntime_df['$O(n^2logn)$'] = runtime_df['$n$'].apply(lambda x: np.power(x,2) * np.log(x))\nruntime_df['$O(n^3)$'] = runtime_df['$n$'].apply(lambda x: np.power(x, 3))\nruntime_df['$O(n^3logn)$'] = runtime_df['$n$'].apply(lambda x: np.power(x, 3) * np.log(x))\n# Get the max values, for labeling the ends of lines\nmax_vals = runtime_df.max().to_dict()\nplot_df = runtime_df.melt(id_vars=['$n$'])\n#print(plot_df)\nstyle_map = {col: '' if (col == '$n^2 + 50n$') or (col == '$n^2 + 10000$') else (2,1) for col in runtime_df.columns}\nfig, ax = plt.subplots(figsize=(11,5))\nsns.lineplot(plot_df, x='$n$', y='value', hue='variable', style='variable', dashes=style_map)\n#plt.xscale('log')\nplt.yscale('log')\n# extract the existing handles and labels\nh, l = ax.get_legend_handles_labels()\n# slice the appropriate section of l and h to include in the legend\nax.legend(h[0:2], l[0:2])\nfor label, val in max_vals.items():\n  if (label == '$n$') or (label == '$n^2 + 50n$') or (label == '$n^2 + 10000$'):\n    continue\n  if 'logn' in label:\n    label = label.replace('logn', r'\\log(n)')\n  ax.text(x = max_vals['$n$'] + 2, y = val, s=label, va='center')\n# Hide the right and top spines\nax.spines[['right', 'top']].set_visible(False)\nplt.show()\n\n\n\n\n\n\n\n\n\n\nTakeaway: As \\(n \\rightarrow \\infty\\), highest-degree terms dominate!"
  },
  {
    "objectID": "w02/slides.html#constants-on-highest-degree-terms-also-go-away",
    "href": "w02/slides.html#constants-on-highest-degree-terms-also-go-away",
    "title": "Week 2: Software Design Patterns and Object-Oriented Programming",
    "section": "Constants On Highest-Degree Terms Also Go Away",
    "text": "Constants On Highest-Degree Terms Also Go Away\n\n(Though this is harder to see, without a log-log plot:)\n\n\n\nCode\nn_vals = [np.power(10, k) for k in np.arange(1, 6, 0.5)]\nrt_const_df = pd.DataFrame({'$n$': n_vals})\nrt_const_df['$20n^2$'] = rt_const_df['$n$'].apply(lambda x: 20*np.power(x,2))\nrt_const_df['$n^2$'] = rt_const_df['$n$'].apply(lambda x: np.power(x,2))\nrt_const_df['$n^2logn$'] = rt_const_df['$n$'].apply(lambda x: np.power(x,2) * np.power(np.log(x),2))\nrt_const_df['$n^3$'] = rt_const_df['$n$'].apply(lambda x: np.power(x,3))\n# Get the max values, for labeling the ends of lines\nmax_vals = rt_const_df.max().to_dict()\nplot_df_const = rt_const_df.melt(id_vars=['$n$'])\nstyle_map = {col: '' if (col == '$20n^2$') else (2,1) for col in rt_const_df.columns}\nfig_const, ax_const = plt.subplots(figsize=(11,5))\nsns.lineplot(plot_df_const, x='$n$', y='value', hue='variable', style='variable', dashes=style_map)\nplt.xscale('log')\nplt.yscale('log')\n# extract the existing handles and labels\nh_const, l_const = ax_const.get_legend_handles_labels()\n# slice the appropriate section of l and h to include in the legend\nax_const.legend(h_const[0:1], l_const[0:1])\nfor label, val in max_vals.items():\n  if (label == '$n$') or (label == '$20n^2$'):\n    continue\n  if 'logn' in label:\n    label = label.replace('logn', r'\\log(n)')\n  ax_const.text(x = max_vals['$n$'] + 10**4, y = val, s=label, va='center')\n# Hide the right and top spines\nax_const.spines[['right', 'top']].set_visible(False)\nplt.show()"
  },
  {
    "objectID": "w02/slides.html#formalizing-big-o-notation",
    "href": "w02/slides.html#formalizing-big-o-notation",
    "title": "Week 2: Software Design Patterns and Object-Oriented Programming",
    "section": "Formalizing Big-O Notation",
    "text": "Formalizing Big-O Notation\n\nLet \\(f, g: \\mathbb{N} \\rightarrow \\mathbb{N}\\). Then we write \\(f(n) = O(g(n))\\) when there exists a threshold \\(n_0 &gt; 0\\) and a constant \\(K &gt; 0\\) such that \\[\n\\forall n \\geq n_0 \\left[ f(n) \\leq K\\cdot g(n) \\right]\n\\]\nIn words: beyond a certain point \\(n_0\\), \\(f(n)\\) is bounded above by \\(K\\cdot g(n)\\).\nDefinition from Savage (1998, pg. 13)"
  },
  {
    "objectID": "w02/slides.html#intuition-rightarrow-proof",
    "href": "w02/slides.html#intuition-rightarrow-proof",
    "title": "Week 2: Software Design Patterns and Object-Oriented Programming",
    "section": "Intuition \\(\\rightarrow\\) Proof",
    "text": "Intuition \\(\\rightarrow\\) Proof\n\nUsing this definition, we can now prove \\(f(n) = n^2 + 50n = O(n^2)\\)!\nHere \\(f(n) = n^2 + 50n\\), \\(g(n) = n^2\\)\nTheorem: \\(\\exists \\; n_0 \\; \\text{ s.t. } \\forall n \\geq n_0 \\left[ n^2 + 50n \\leq Kn^2 \\right]\\)\nProof: Let \\(K = 50\\). Then \\[\n\\begin{align*}\n&n^2 + 50n \\leq 50n^2 \\iff n + 50 \\leq 50n \\\\\n&\\iff 49n \\geq 50 \\iff n \\geq \\frac{50}{49}.\n\\end{align*}\n\\]\nSo if we choose \\(n_0 = 2\\), the chain of statements holds. \\(\\blacksquare\\)"
  },
  {
    "objectID": "w02/slides.html#bounding-insertion-sort-runtime",
    "href": "w02/slides.html#bounding-insertion-sort-runtime",
    "title": "Week 2: Software Design Patterns and Object-Oriented Programming",
    "section": "Bounding Insertion Sort Runtime",
    "text": "Bounding Insertion Sort Runtime\n\nRuns in \\(T(n) = O(n^2)\\) (use constants from prev slide)\nCan similarly define lower bound \\(T(n) = \\Omega(f(n))\\)\n\n\\(O\\) = ‚ÄúBig-Oh‚Äù, \\(\\Omega\\) = ‚ÄúBig-Omega‚Äù\n\nNeed to be careful with \\(O(f(n))\\) vs.¬†\\(\\Omega(f(n))\\) however: difference between ‚Äúfor all inputs‚Äù vs.¬†‚Äúfor some inputs‚Äù:\n\n\n\n\n\nBounding Worst-Case Runtime\n\n\nBy saying that the worst-case running time of an algorithm is \\(\\Omega(n^2)\\), we mean that for every input size \\(n\\) above a certain threshold, there is at least one input of size \\(n\\) for which the algorithm takes at least \\(cn^2\\) time, for some positive constant \\(n\\). It does not necessarily mean that the algorithm takes at least \\(cn^2\\) time for all inputs."
  },
  {
    "objectID": "w02/slides.html#intuition-for-lower-bound",
    "href": "w02/slides.html#intuition-for-lower-bound",
    "title": "Week 2: Software Design Patterns and Object-Oriented Programming",
    "section": "Intuition for Lower Bound",
    "text": "Intuition for Lower Bound\n\nSpoiler: Insertion sort also runs in \\(T(n) = \\Omega(n^2)\\) time. How could we prove this?\nGiven any value \\(n &gt; n_0\\), we need to construct an input for which Insertion-Sort requires \\(cn^2\\) steps: consider a list where \\(n/3\\) greatest values are in first \\(n/3\\) slots:\n\n\nAll \\(n/3\\) values in \\(\\textrm{L}\\) pass, one-by-one, through the \\(n/3\\) slots in \\(\\textrm{M}\\) (since they must end up in \\(\\textrm{R}\\)) \\(\\implies (n/3)(n/3) = n^2/9 = \\Omega(n^2)\\) steps!\nFinal definition (a theorem you could prove if you want!): \\(\\Theta\\) = ‚ÄúBig-Theta‚Äù\n\nIf \\(T(n) = \\overline{O}(g(n))\\) and \\(T(n) = \\Omega(g(n))\\), then \\(T(n) = \\Theta(n)\\)\n\n\\(\\implies\\) most ‚Äúinformative‚Äù way to characterize insertion sort is \\(\\boxed{T(n) = \\Theta(n^2)}\\)"
  },
  {
    "objectID": "w02/slides.html#doing-better-than-insertion-sort",
    "href": "w02/slides.html#doing-better-than-insertion-sort",
    "title": "Week 2: Software Design Patterns and Object-Oriented Programming",
    "section": "Doing Better Than Insertion Sort",
    "text": "Doing Better Than Insertion Sort\n\nIntuition Break ü•≥: Finding a word in a dictionary! dsan.io/dict-lookup"
  },
  {
    "objectID": "w02/slides.html#how-can-merge-sort-work-that-much-better",
    "href": "w02/slides.html#how-can-merge-sort-work-that-much-better",
    "title": "Week 2: Software Design Patterns and Object-Oriented Programming",
    "section": "How Can Merge Sort Work That Much Better!?",
    "text": "How Can Merge Sort Work That Much Better!?\n\nWith the linear approach, each time we check a word and it‚Äôs not our word we eliminate‚Ä¶ one measly word üòû\nBut with the divide-and-conquer approach‚Ä¶ we eliminate üî•HALF OF THE REMAINING WORDSüî•"
  },
  {
    "objectID": "w02/slides.html#merging-two-sorted-lists-in-on-time",
    "href": "w02/slides.html#merging-two-sorted-lists-in-on-time",
    "title": "Week 2: Software Design Patterns and Object-Oriented Programming",
    "section": "Merging Two Sorted Lists in \\(O(n)\\) Time",
    "text": "Merging Two Sorted Lists in \\(O(n)\\) Time\n\nFrom Cormen et al. (2001), pg. 37"
  },
  {
    "objectID": "w02/slides.html#merge-sort-merging-as-subroutine",
    "href": "w02/slides.html#merge-sort-merging-as-subroutine",
    "title": "Week 2: Software Design Patterns and Object-Oriented Programming",
    "section": "Merge Sort (Merging as Subroutine)",
    "text": "Merge Sort (Merging as Subroutine)\n\nFrom Cormen et al. (2001), pg. 40"
  },
  {
    "objectID": "w02/slides.html#complexity-analysis-1",
    "href": "w02/slides.html#complexity-analysis-1",
    "title": "Week 2: Software Design Patterns and Object-Oriented Programming",
    "section": "Complexity Analysis",
    "text": "Complexity Analysis\n\nHard way: re-do the line-by-line analysis we did for Insertion-Sort üò£ Easy way: stand on shoulders of giants!\nUsing a famous+fun theorem (the Master Theorem): Given a recurrence \\(T(n) = aT(n/b) + f(n)\\), compute its:\n\nWatershed function \\(W(n) = n^{\\log_b(a)}\\) and\nDriving function \\(D(n) = f(n)\\)\n\nThe Master Theorem gives closed-form asymptotic solution for \\(T(n)\\), split into three cases:\n(1) \\(W(n)\\) grows faster than \\(D(n)\\), (2) grows at same rate as \\(D(n)\\), or (3) grows slower than \\(D(n)\\)"
  },
  {
    "objectID": "w02/slides.html#bounding-the-runtime-of-merge-sort",
    "href": "w02/slides.html#bounding-the-runtime-of-merge-sort",
    "title": "Week 2: Software Design Patterns and Object-Oriented Programming",
    "section": "Bounding the Runtime of Merge Sort",
    "text": "Bounding the Runtime of Merge Sort\n\nHow about Merge-Sort? \\(T(n) = 2T(n/2) + \\Theta(n)\\)\n\n\\(a = b = 2\\), \\(W(n) = n^{\\log_2(2)} = n\\), \\(D(n) = \\Theta(n)\\)\n\n\\(W(n)\\) and \\(D(n)\\) grow at same rate \\(\\implies\\) Case 21:\n\n\n\n\n\nApplying the Master Theorem When \\(W(n) = \\Theta(D(n))\\) (Case 2)\n\n\n\nIs there a \\(k \\geq 0\\) satisfying \\(D(n) = \\Theta(n^{\\log_b(a)}\\log_2^k(n))\\)?\nIf so, your solution is \\(T(n) = \\Theta(n^{\\log_b(a)}\\log_2^{k+1}(n))\\)\n\n\n\n\n\n\nMerge-Sort: \\(k = 0\\) works! \\(\\Theta(n^{\\log_2(2)}\\log_2^0(n)) = \\Theta(n)\\)\nThus \\(T(n) = \\Theta(n^{\\log_b(a)}\\log_2^{k+1}(n)) = \\boxed{\\Theta(n\\log_2n)}\\) üòé\n\nSee appendix slide for all 3 cases, if you‚Äôre some kind of masochist"
  },
  {
    "objectID": "w02/slides.html#breaking-a-problem-into-interacting-parts",
    "href": "w02/slides.html#breaking-a-problem-into-interacting-parts",
    "title": "Week 2: Software Design Patterns and Object-Oriented Programming",
    "section": "Breaking a Problem into (Interacting) Parts",
    "text": "Breaking a Problem into (Interacting) Parts\n\nPython so far: ‚ÄúData science mode‚Äù\n\nStart at top of file with raw data\nWrite lines of code until problem solved\n\nPython in this class: ‚ÄúSoftware engineering mode‚Äù\n\nBreak system down into parts\nWrite each part separately\nLink parts together to create the whole\n\n(One implication: .py files may be easier than .ipynb for development!)"
  },
  {
    "objectID": "w02/slides.html#how-does-a-calculator-work",
    "href": "w02/slides.html#how-does-a-calculator-work",
    "title": "Week 2: Software Design Patterns and Object-Oriented Programming",
    "section": "How Does A Calculator Work?",
    "text": "How Does A Calculator Work?\n\n(Calculator image from Wikimedia Commons)"
  },
  {
    "objectID": "w02/slides.html#key-oop-feature-1-encapsulation",
    "href": "w02/slides.html#key-oop-feature-1-encapsulation",
    "title": "Week 2: Software Design Patterns and Object-Oriented Programming",
    "section": "Key OOP Feature #1: Encapsulation",
    "text": "Key OOP Feature #1: Encapsulation\n\nImagine you‚Äôre on a team trying to make a calculator\nOne person can write the Screen class, another person can write the Button class, and so on\nNatural division of labor! (May seem silly for a calculator, but imagine as your app scales up)"
  },
  {
    "objectID": "w02/slides.html#use-case-bookstore-inventory-management",
    "href": "w02/slides.html#use-case-bookstore-inventory-management",
    "title": "Week 2: Software Design Patterns and Object-Oriented Programming",
    "section": "Use Case: Bookstore Inventory Management",
    "text": "Use Case: Bookstore Inventory Management\n\nImage source"
  },
  {
    "objectID": "w02/slides.html#in-pictures",
    "href": "w02/slides.html#in-pictures",
    "title": "Week 2: Software Design Patterns and Object-Oriented Programming",
    "section": "In Pictures",
    "text": "In Pictures\n\n\n\n\n\n\nG\n\nBookstore Relational Diagram\n\n\nBookstore\n\nBookstore\n\nName\n\nLocation\n\nBooklist\n\nGet_Inventory()\n\nSort_Inventory()\n\n\n\nPlace\n\nPlace\n\nCity\n\nState\n\nCountry\n\nPrint_Map()\n\n\n\nBookstore:loc-&gt;Place:placehead\n\n\nHas One\n\n\n\nBook\n\nBook\n\nTitle\n\nAuthors\n\nNum Pages\n\nPreview()\n\n\n\nBookstore:bl-&gt;Book:bookhead\n\n\nHas Multiple\n\n\n\nPerson\n\nPerson\n\nFamily Name\n\nGiven Name\n\n\n\nBook:auths-&gt;Person:personhead\n\n\nHas Multiple"
  },
  {
    "objectID": "w02/slides.html#creating-classes",
    "href": "w02/slides.html#creating-classes",
    "title": "Week 2: Software Design Patterns and Object-Oriented Programming",
    "section": "Creating Classes",
    "text": "Creating Classes\n\nUse case: Creating an inventory system for a Bookstore\n\n\n\n\n\nCode\nclass Bookstore:\n    def __init__(self, name, location):\n        self.name = name\n        self.location = location\n        self.books = []\n\n    def __getitem__(self, index):\n        return self.books[index]\n\n    def __repr__(self):\n        return self.__str__()\n\n    def __str__(self):\n        return f\"Bookstore[{self.get_num_books()} books]\"\n\n    def add_books(self, book_list):\n        self.books.extend(book_list)\n\n    def get_books(self):\n        return self.books\n\n    def get_inventory(self):\n        book_lines = []\n        for book_index, book in enumerate(self.get_books()):\n            cur_book_line = f\"{book_index}. {str(book)}\"\n            book_lines.append(cur_book_line)\n        return \"\\n\".join(book_lines)\n\n    def get_num_books(self):\n        return len(self.get_books())\n\n    def sort_books(self, sort_key):\n        self.books.sort(key=sort_key)\n\nclass Book:\n    def __init__(self, title, authors, num_pages):\n        self.title = title\n        self.authors = authors\n        self.num_pages = num_pages\n\n    def __str__(self):\n        return f\"Book[title={self.get_title()}, authors={self.get_authors()}, pages={self.get_num_pages()}]\"\n\n    def get_authors(self):\n        return self.authors\n\n    def get_first_author(self):\n        return self.authors[0]\n\n    def get_num_pages(self):\n        return self.num_pages\n\n    def get_title(self):\n        return self.title\n\nclass Person:\n    def __init__(self, family_name, given_name):\n        self.family_name = family_name\n        self.given_name = given_name\n\n    def __repr__(self):\n        return self.__str__()\n\n    def __str__(self):\n        return f\"Person[{self.get_family_name()}, {self.get_given_name()}]\"\n\n    def get_family_name(self):\n        return self.family_name\n\n    def get_given_name(self):\n        return self.given_name\n\n\n\n\n\nCode\nmy_bookstore = Bookstore(\"Bookland\", \"Washington, DC\")\nplath = Person(\"Plath\", \"Sylvia\")\nbell_jar = Book(\"The Bell Jar\", [plath], 244)\nmarx = Person(\"Marx\", \"Karl\")\nengels = Person(\"Engels\", \"Friedrich\")\nmanifesto = Book(\"The Communist Manifesto\", [marx, engels], 43)\nelster = Person(\"Elster\", \"Jon\")\ncement = Book(\"The Cement of Society\", [elster], 311)\nmy_bookstore.add_books([bell_jar, manifesto, cement])\nprint(my_bookstore)\nprint(my_bookstore[0])\nprint(\"Inventory:\")\nprint(my_bookstore.get_inventory())\n\n\nBookstore[3 books]\nBook[title=The Bell Jar, authors=[Person[Plath, Sylvia]], pages=244]\nInventory:\n0. Book[title=The Bell Jar, authors=[Person[Plath, Sylvia]], pages=244]\n1. Book[title=The Communist Manifesto, authors=[Person[Marx, Karl], Person[Engels, Friedrich]], pages=43]\n2. Book[title=The Cement of Society, authors=[Person[Elster, Jon]], pages=311]"
  },
  {
    "objectID": "w02/slides.html#doing-things-with-classes",
    "href": "w02/slides.html#doing-things-with-classes",
    "title": "Week 2: Software Design Patterns and Object-Oriented Programming",
    "section": "Doing Things With Classes",
    "text": "Doing Things With Classes\n\nNow we can use our OOP structure, for example to sort the inventory in different ways!\n\n\n\n\nAlphabetical (By First Author)\n\n\n\nCode\nsort_alpha = lambda x: x.get_first_author().get_family_name()\nmy_bookstore.sort_books(sort_key = sort_alpha)\nprint(my_bookstore.get_inventory())\n\n\n0. Book[title=The Cement of Society, authors=[Person[Elster, Jon]], pages=311]\n1. Book[title=The Communist Manifesto, authors=[Person[Marx, Karl], Person[Engels, Friedrich]], pages=43]\n2. Book[title=The Bell Jar, authors=[Person[Plath, Sylvia]], pages=244]\n\n\n\n\nBy Page Count\n\n\n\nCode\nsort_pages = lambda x: x.get_num_pages()\nmy_bookstore.sort_books(sort_key = sort_pages)\nprint(my_bookstore.get_inventory())\n\n\n0. Book[title=The Communist Manifesto, authors=[Person[Marx, Karl], Person[Engels, Friedrich]], pages=43]\n1. Book[title=The Bell Jar, authors=[Person[Plath, Sylvia]], pages=244]\n2. Book[title=The Cement of Society, authors=[Person[Elster, Jon]], pages=311]"
  },
  {
    "objectID": "w02/slides.html#key-oop-feature-2-polymorphism",
    "href": "w02/slides.html#key-oop-feature-2-polymorphism",
    "title": "Week 2: Software Design Patterns and Object-Oriented Programming",
    "section": "Key OOP Feature #2: Polymorphism",
    "text": "Key OOP Feature #2: Polymorphism\n\nEncapsulate general properties in parent class, specific properties in child classes\n\n\n(You can edit this or make your own UML diagrams in nomnoml!)"
  },
  {
    "objectID": "w02/slides.html#or-is-this-better",
    "href": "w02/slides.html#or-is-this-better",
    "title": "Week 2: Software Design Patterns and Object-Oriented Programming",
    "section": "Or‚Ä¶ Is This Better?",
    "text": "Or‚Ä¶ Is This Better?\n\nEdit in nomnoml"
  },
  {
    "objectID": "w02/slides.html#design-choices",
    "href": "w02/slides.html#design-choices",
    "title": "Week 2: Software Design Patterns and Object-Oriented Programming",
    "section": "Design Choices",
    "text": "Design Choices\n\nThe goal is to encapsulate as best as possible: which objects should have which properties, and which methods?\nExample: Fiction vs.¬†Non-Fiction. How important is this distinction for your use case?\n\n\n\n\nOption 1: As Property of Book\n\n\n\nCode\nfrom enum import Enum\nclass BookType(Enum):\n    NONFICTION = 0\n    FICTION = 1\n\nclass Book:\n    def __init__(self, title: str, authors: list[Person], num_pages: int, type: BookType):\n        self.title = title\n        self.authors = authors\n        self.num_pages = num_pages\n        self.type = type\n\n    def __str__(self):\n        return f\"Book[title={self.title}, authors={self.authors}, pages={self.num_pages}, type={self.type}]\"\n\n\n\n\nCode\njoyce = Person(\"Joyce\", \"James\")\nulysses = Book(\"Ulysses\", [joyce], 732, BookType.FICTION)\nschelling = Person(\"Schelling\", \"Thomas\")\nmicromotives = Book(\"Micromotives and Macrobehavior\", [schelling], 252, BookType.NONFICTION)\nprint(ulysses)\nprint(micromotives)\n\n\nBook[title=Ulysses, authors=[Person[Joyce, James]], pages=732, type=BookType.FICTION]\nBook[title=Micromotives and Macrobehavior, authors=[Person[Schelling, Thomas]], pages=252, type=BookType.NONFICTION]\n\n\n\n\nOption 2: Separate Classes\n\n\n\nCode\n# class Book defined as earlier\nclass FictionBook(Book):\n    def __init__(self, title, authors, num_pages, characters):\n        super().__init__(title, authors, num_pages)\n        self.characters = characters\n\nclass NonfictionBook(Book):\n    def __init__(self, title, authors, num_pages, topic):\n        super().__init__(title, authors, num_pages)\n        self.topic = topic\n\n\n\n\nCode\njoyce = Person(\"Joyce\", \"James\")\nulysses = FictionBook(\"Ulysses\", [joyce], 732, [\"Daedalus\"])\nschelling = Person(\"Schelling\", \"Thomas\")\nmicromotives = NonfictionBook(\"Micromotives and Macrobehavior\", [schelling], 252, \"Economics\")\nprint(ulysses)\nprint(micromotives)\n\n\nBook[title=Ulysses, authors=[Person[Joyce, James]], pages=732]\nBook[title=Micromotives and Macrobehavior, authors=[Person[Schelling, Thomas]], pages=252]"
  },
  {
    "objectID": "w02/slides.html#references",
    "href": "w02/slides.html#references",
    "title": "Week 2: Software Design Patterns and Object-Oriented Programming",
    "section": "References",
    "text": "References\n\n\nCormen, Thomas H., Charles E. Leiserson, Ronald L. Rivest, and Clifford Stein. 2001. Introduction To Algorithms. MIT Press.\n\n\nSavage, John E. 1998. Models of Computation: Exploring the Power of Computing. Addison-Wesley."
  },
  {
    "objectID": "w02/slides.html#appendix-the-full-master-theorem",
    "href": "w02/slides.html#appendix-the-full-master-theorem",
    "title": "Week 2: Software Design Patterns and Object-Oriented Programming",
    "section": "Appendix: The Full Master Theorem",
    "text": "Appendix: The Full Master Theorem\nMaster Theorem: Let \\(a &gt; 0\\) and \\(b &gt; 1\\) be constants, and let \\(f(n)\\) be a driving function defined and nonnegative on all sufficiently large reals. Define \\(T(n)\\) on \\(n \\in \\mathbb{N}\\) by\n\\[\nT(n) = aT(n/b) + f(n)\n\\]\nwhere \\(aT(n/b) = a'T(\\lfloor n/b \\rfloor) + a''T(\\lceil n/b \\rceil)\\) for some \\(a' \\geq 0\\) and \\(a'' \\geq 0\\) satisfying \\(a = a' + a''\\). Then the asymptotic behavior of \\(T(n)\\) can be characterized as follows:\n\nIf there exists \\(\\epsilon &gt; 0\\) such that \\(f(n) = O(n^{\\log_b(a) - \\epsilon})\\), then \\(T(n) = \\Theta(n^{\\log_b(a)})\\)\nIf there exists \\(k \\geq 0\\) such that \\(f(n) = \\Theta(n^{\\log_b(a)}\\log_2^k(n))\\), then \\(T(n) = \\Theta(n^{\\log_b(a)}\\log_2^{k+1}(n))\\).\nIf there exists \\(\\epsilon &gt; 0\\) such that \\(f(n) = \\Omega(n^{\\log_b(a) + \\epsilon})\\), and if \\(f(n)\\) satisfies the regularity condition \\(af(n/b) \\leq cf(n)\\) for some constant \\(c &lt; 1\\) and all sufficiently large \\(n\\), then \\(T(n) = \\Theta(f(n))\\).\n\n\nProof. See Cormen et al. (2001), pg. 107-114.\n\n(‚Üê Back to Merge Sort slides)"
  },
  {
    "objectID": "w02/index.html",
    "href": "w02/index.html",
    "title": "Week 2: Software Design Patterns and Object-Oriented Programming",
    "section": "",
    "text": "Open slides in new window ‚Üí",
    "crumbs": [
      "Week 2: {{< var w02.date-md >}}"
    ]
  },
  {
    "objectID": "w02/index.html#hammers-vs.-structures-built-whammers",
    "href": "w02/index.html#hammers-vs.-structures-built-whammers",
    "title": "Week 2: Software Design Patterns and Object-Oriented Programming",
    "section": "Hammers vs.¬†Structures Built w/Hammers",
    "text": "Hammers vs.¬†Structures Built w/Hammers\n\n\nHow I see the course title:\n\nData Structures!\nObjects!, and\nAlgorithms! (in Python)\n\nHow my opps see the course title: (Data Structures, Objects, and Algorithms) in Python!",
    "crumbs": [
      "Week 2: {{< var w02.date-md >}}"
    ]
  },
  {
    "objectID": "w02/index.html#primitive-types-in-general",
    "href": "w02/index.html#primitive-types-in-general",
    "title": "Week 2: Software Design Patterns and Object-Oriented Programming",
    "section": "Primitive Types in General",
    "text": "Primitive Types in General\n\nVariable types for which [language] knows in advance exactly how much memory is going to be required\nBooleans (True or False): Exactly 1 bit (0 or 1)\nint: 32 or 64 bits (depending on OS)\nNone / null / NA: Since we want it to serve as a ‚Äúblank‚Äù value (easily cast to other primitive types), usually the same number of bits as int\n\nHence, in C for example, null is actually just shorthand for an int with value 0",
    "crumbs": [
      "Week 2: {{< var w02.date-md >}}"
    ]
  },
  {
    "objectID": "w02/index.html#primitive-types-python-weirdness-edition",
    "href": "w02/index.html#primitive-types-python-weirdness-edition",
    "title": "Week 2: Software Design Patterns and Object-Oriented Programming",
    "section": "Primitive Types: Python Weirdness Edition",
    "text": "Primitive Types: Python Weirdness Edition\n\n\n\nBoolean (True or False): Exactly 1 bit (0 or 1)\n\nimport sys\nsys.getsizeof(True)\n\n28\n\n\nint: 32 or 64 bits (depending on OS)\n\nsys.maxsize\n\n9223372036854775807\n\n\nNone\n\nsys.getsizeof(None)\n\n16\n\n\n\n\n\n\n\n\n\n\nWhy is this happening?",
    "crumbs": [
      "Week 2: {{< var w02.date-md >}}"
    ]
  },
  {
    "objectID": "w02/index.html#stack-and-heap-in-c-java",
    "href": "w02/index.html#stack-and-heap-in-c-java",
    "title": "Week 2: Software Design Patterns and Object-Oriented Programming",
    "section": "Stack and Heap in C / Java",
    "text": "Stack and Heap in C / Java\n\n\n\n\nmy_beautiful_app.c\n\ntime_t current_time = time(NULL);\nint num_rows = 13;\nbool filled = true;\nbool empty = false;\nint num_cols = 2;\nchar username[] = \"Jeff\";\nint i = 0;\nint j = None;\nvoid z = NULL;",
    "crumbs": [
      "Week 2: {{< var w02.date-md >}}"
    ]
  },
  {
    "objectID": "w02/index.html#stack-and-heap-in-python",
    "href": "w02/index.html#stack-and-heap-in-python",
    "title": "Week 2: Software Design Patterns and Object-Oriented Programming",
    "section": "Stack and Heap in Python",
    "text": "Stack and Heap in Python\n\n\n\n\nmy_beautiful_app.py\n\nimport datetime\ncur_date = datetime.datetime.now()\nnum_rows = 13\nfilled = True\nempty = False\nnum_cols = 2\nusername = \"Jeff\"\ni = 0\nj = None\nz = 314",
    "crumbs": [
      "Week 2: {{< var w02.date-md >}}"
    ]
  },
  {
    "objectID": "w02/index.html#why-does-the-nyc-subway-have-express-lines",
    "href": "w02/index.html#why-does-the-nyc-subway-have-express-lines",
    "title": "Week 2: Software Design Patterns and Object-Oriented Programming",
    "section": "Why Does The NYC Subway Have Express Lines?",
    "text": "Why Does The NYC Subway Have Express Lines?\n\n\n\nFrom NYC Central Park website",
    "crumbs": [
      "Week 2: {{< var w02.date-md >}}"
    ]
  },
  {
    "objectID": "w02/index.html#why-stop-at-two-levels",
    "href": "w02/index.html#why-stop-at-two-levels",
    "title": "Week 2: Software Design Patterns and Object-Oriented Programming",
    "section": "Why Stop At Two Levels?",
    "text": "Why Stop At Two Levels?\n\n\n\nFrom Skip List Data Structure Explained, Sumit‚Äôs Diary blog",
    "crumbs": [
      "Week 2: {{< var w02.date-md >}}"
    ]
  },
  {
    "objectID": "w02/index.html#how-tf-does-google-maps-work",
    "href": "w02/index.html#how-tf-does-google-maps-work",
    "title": "Week 2: Software Design Patterns and Object-Oriented Programming",
    "section": "How TF Does Google Maps Work?",
    "text": "How TF Does Google Maps Work?\n\nA (mostly) full-on answer: soon to come! Data structures for spatial data\nA step in that direction: Quadtrees! (Fractal DC)\n\n\nJim Kang‚Äôs Quadtree Visualizations",
    "crumbs": [
      "Week 2: {{< var w02.date-md >}}"
    ]
  },
  {
    "objectID": "w02/index.html#the-secretly-exciting-world-of-matrix-multiplication",
    "href": "w02/index.html#the-secretly-exciting-world-of-matrix-multiplication",
    "title": "Week 2: Software Design Patterns and Object-Oriented Programming",
    "section": "The Secretly Exciting World of Matrix Multiplication",
    "text": "The Secretly Exciting World of Matrix Multiplication\n\nFun Fact 1: Most of modern Machine Learning is, at the processor level, just a bunch of matrix operations\nFun Fact 2: The way we‚Äôve all learned how to multiply matrices requires \\(O(N^3)\\) operations, for two \\(N \\times N\\) matrices \\(A\\) and \\(B\\)\nFun Fact 3: \\(\\underbrace{x^2 - y^2}_{\\mathclap{\\times\\text{ twice, }\\pm\\text{ once}}} = \\underbrace{(x+y)(x-y)}_{\\times\\text{once, }\\pm\\text{ twice}}\\)\nFun Fact 4: These are not very fun facts at all",
    "crumbs": [
      "Week 2: {{< var w02.date-md >}}"
    ]
  },
  {
    "objectID": "w02/index.html#why-is-jeff-rambling-about-matrix-math-from-300-years-ago",
    "href": "w02/index.html#why-is-jeff-rambling-about-matrix-math-from-300-years-ago",
    "title": "Week 2: Software Design Patterns and Object-Oriented Programming",
    "section": "Why Is Jeff Rambling About Matrix Math From 300 Years Ago?",
    "text": "Why Is Jeff Rambling About Matrix Math From 300 Years Ago?\n\nThe way we all learned it in school (for \\(N = 2\\)):\n\n\\[\nAB = \\begin{bmatrix}\na_{11} & a_{12} \\\\\na_{21} & a_{22}\n\\end{bmatrix}\n\\begin{bmatrix}\nb_{11} & b_{12} \\\\\nb_{21} & b_{22}\n\\end{bmatrix} =\n\\begin{bmatrix}\na_{11}b_{11} + a_{12}b_{21} & a_{11}b_{12} + a_{12}b_{22} \\\\\na_{21}b_{11} + a_{22}b_{21} & a_{21}b_{12} + a_{22}b_{22}\n\\end{bmatrix}\n\\]\n\n12 operations: 8 multiplications, 4 additions \\(\\implies O(N^3) = O(2^3) = O(8)\\)\nAre we trapped? Like‚Ä¶ what is there to do besides performing these \\(N^3\\) operations, if we want to multiply two \\(N \\times N\\) matrices? Why are we about to move onto yet another slide about this?",
    "crumbs": [
      "Week 2: {{< var w02.date-md >}}"
    ]
  },
  {
    "objectID": "w02/index.html#block-partitioning-matrices",
    "href": "w02/index.html#block-partitioning-matrices",
    "title": "Week 2: Software Design Patterns and Object-Oriented Programming",
    "section": "Block-Partitioning Matrices",
    "text": "Block-Partitioning Matrices\n\nNow let‚Äôs consider big matrices, whose dimensions are a power of 2 (for ease of illustration): \\(A\\) and \\(B\\) are now \\(N \\times N = 2^n \\times 2^n\\) matrices\nWe can ‚Äúdecompose‚Äù the matrix product \\(AB\\) as:\n\n\\[\nAB = \\begin{bmatrix}\nA_{11} & A_{12} \\\\\nA_{21} & A_{22}\n\\end{bmatrix}\n\\begin{bmatrix}\nB_{11} & B_{12} \\\\\nB_{21} & B_{22}\n\\end{bmatrix} =\n\\begin{bmatrix}\nA_{11}B_{11} + A_{12}B_{21} & A_{11}B_{12} + A_{12}B_{22} \\\\\nA_{21}B_{11} + A_{22}B_{21} & A_{21}B_{12} + A_{22}B_{22}\n\\end{bmatrix}\n\\]\n\nWhich gives us a recurrence relation representing the total number of computations required for this big-matrix multiplication: \\(T(N) = \\underbrace{8T(N/2)}_{\\text{Multiplications}} + \\underbrace{\\Theta(1)}_{\\text{Additions}}\\)\nIt turns out that (using a method we‚Äôll learn in Week 3), given this recurrence relation and our base case from the previous slide, this divide-and-conquer approach via block-partitioning doesn‚Äôt help us: we still get \\(T(n) = O(n^3)\\)‚Ä¶\nSo why is Jeff still torturing us with this example?",
    "crumbs": [
      "Week 2: {{< var w02.date-md >}}"
    ]
  },
  {
    "objectID": "w02/index.html#time-for-some-matrix-magic",
    "href": "w02/index.html#time-for-some-matrix-magic",
    "title": "Week 2: Software Design Patterns and Object-Oriented Programming",
    "section": "Time For Some ü™ÑMATRIX MAGIC!ü™Ñ",
    "text": "Time For Some ü™ÑMATRIX MAGIC!ü™Ñ\n\n\nIf we define\n\n\\[\n\\begin{align*}\nm_1 &= (a_{11}+a_{22})(b_{11}+b_{22}) \\\\\nm_2 &= (a_{21}+a_{22})b_{11} \\\\\nm_3 &= a_{11}(b_{12}-b_{22}) \\\\\nm_4 &= a_{22}(b_{21}-b_{11}) \\\\\nm_5 &= (a_{11}+a_{12})b_{22} \\\\\nm_6 &= (a_{21}-a_{11})(b_{11}+b_{12}) \\\\\nm_7 &= (a_{12}-a_{22})(b_{21}+b_{22})\n\\end{align*}\n\\]\n\n\n\nThen we can combine these seven scalar products to obtain our matrix product:\n\n\\[\nAB = \\begin{bmatrix}\nm_1 + m_4 - m_5 + m_7 & m_3 + m_5 \\\\\nm_2 + m_4 & m_1 - m_2 + m_3 + m_6\n\\end{bmatrix}\n\\]\n\n\nTotal operations: 7 multiplications, 18 additions",
    "crumbs": [
      "Week 2: {{< var w02.date-md >}}"
    ]
  },
  {
    "objectID": "w02/index.html#block-partitioned-matrix-magic",
    "href": "w02/index.html#block-partitioned-matrix-magic",
    "title": "Week 2: Software Design Patterns and Object-Oriented Programming",
    "section": "Block-Partitioned Matrix Magic",
    "text": "Block-Partitioned Matrix Magic\n\nUsing the previous slide as our base case and applying this same method to the block-paritioned big matrices, we get the same result, but where the four entries in \\(AB\\) here are now matrices rather than scalars:\n\n\\[\nAB = \\begin{bmatrix}\nM_1 + M_4 - M_5 + M_7 & M_3 + M_5 \\\\\nM_2 + M_4 & M_1 - M_2 + M_3 + M_6\n\\end{bmatrix}\n\\]\n\nWe now have a different recurrence relation: \\(T(N) = \\underbrace{7T(N/2)}_{\\text{Multiplications}} + \\underbrace{\\Theta(N^2)}_{\\text{Additions}}\\)\nAnd it turns out, somewhat miraculously, that the additional time required for the increased number of additions is significantly less than the time savings we obtain by doing 7 instead of 8 multiplications, since this method now runs in \\(T(N) = O(N^{\\log_2(7)}) \\approx O(N^{2.807}) &lt; O(N^3)\\) ü§Ø",
    "crumbs": [
      "Week 2: {{< var w02.date-md >}}"
    ]
  },
  {
    "objectID": "w02/index.html#insertion-sort",
    "href": "w02/index.html#insertion-sort",
    "title": "Week 2: Software Design Patterns and Object-Oriented Programming",
    "section": "Insertion Sort",
    "text": "Insertion Sort\n\nThink of how you might sort a deck of cards in your hand",
    "crumbs": [
      "Week 2: {{< var w02.date-md >}}"
    ]
  },
  {
    "objectID": "w02/index.html#cards-rightarrow-list-elements",
    "href": "w02/index.html#cards-rightarrow-list-elements",
    "title": "Week 2: Software Design Patterns and Object-Oriented Programming",
    "section": "Cards \\(\\rightarrow\\) List Elements",
    "text": "Cards \\(\\rightarrow\\) List Elements\n\nInput list: [5, 2, 4, 6, 1, 3]\n\n\n\n\n\n\n\nNotice how, at each point:\n\nThere is a card we‚Äôre currently ‚Äúlooking at‚Äù, called the key, and\nThere is an invariant: everything in the list before the key is already sorted",
    "crumbs": [
      "Week 2: {{< var w02.date-md >}}"
    ]
  },
  {
    "objectID": "w02/index.html#complexity-analysis",
    "href": "w02/index.html#complexity-analysis",
    "title": "Week 2: Software Design Patterns and Object-Oriented Programming",
    "section": "Complexity Analysis",
    "text": "Complexity Analysis\n\nLet \\(t_i\\) be the number of times the while loop runs, \\(\\widetilde{n} = n - 1\\):\n\n\n\n\n\nCode\nCost\nTimes Run\n\n\n\n\n1\nfor i = 1 to n-1:\n\\(c_1\\)\n\\(\\widetilde{n}\\)\n\n\n2\n¬†¬†key = A[i]\n\\(c_2\\)\n\\(\\widetilde{n}\\)\n\n\n3\n¬†¬†# Insert A[i] into sorted subarray A[0:i-1]\n\\(0\\)\n\\(\\widetilde{n}\\)\n\n\n4\n¬†¬†j = i - 1\n\\(c_4\\)\n\\(\\widetilde{n}\\)\n\n\n5\n¬†¬†while j &gt;= 0 and A[j] &gt; key:\n\\(c_5\\)\n\\(\\sum_{i=2}^n t_i\\)\n\n\n6\n¬†¬†¬†¬†A[j + 1] = A[j]\n\\(c_6\\)\n\\(\\sum_{i=2}^n(t_i - 1)\\)\n\n\n7\n¬†¬†¬†¬†j = j - 1\n\\(c_7\\)\n\\(\\sum_{i=2}^n(t_i - 1)\\)\n\n\n8\n¬†¬†A[j + 1] = key\n\\(c_8\\)\n\\(\\widetilde{n}\\)\n\n\n\n\\[\nT(n) = c_1\\widetilde{n} + c_2\\widetilde{n} + c_4\\widetilde{n} + c_5\\sum_{i=2}^nt_i + c_6\\sum_{i=2}^n(t_i - 1) + c_7\\sum_{i=2}^n(t_i-1) + c_8\\widetilde{n}\n\\]",
    "crumbs": [
      "Week 2: {{< var w02.date-md >}}"
    ]
  },
  {
    "objectID": "w02/index.html#simplifying",
    "href": "w02/index.html#simplifying",
    "title": "Week 2: Software Design Patterns and Object-Oriented Programming",
    "section": "Simplifying",
    "text": "Simplifying\n\nThe original, scary-looking equation:\n\n\\[\nT(n) = c_1n + c_2\\widetilde{n} + c_4\\widetilde{n} + c_5{\\color{orange}\\boxed{\\color{black}\\sum_{i=2}^nt_i}} + c_6{\\color{lightblue}\\boxed{\\color{black}\\sum_{i=2}^n(t_i - 1)}} + c_7{\\color{lightblue}\\boxed{\\color{black}\\sum_{i=2}^n(t_i-1)}} + c_8\\widetilde{n}\n\\]\n\nBut \\(\\sum_{i=1}^ni = \\frac{n(n+1)}{2}\\), so:\n\n\\[\n\\begin{align*}\n{\\color{orange}\\boxed{\\color{black}\\sum_{i=2}^ni}} &= \\sum_{i=1}^ni - \\sum_{i=1}^1i = \\frac{n(n+1)}{2} - 1 \\\\\n{\\color{lightblue}\\boxed{\\color{black}\\sum_{i=2}^n(i-1)}} &= \\sum_{i=1}^{n-1}i = \\frac{(n-1)(n-1+1)}{2} = \\frac{n(n-1)}{2}\n\\end{align*}\n\\]\n\nAnd the scary-looking equation simplifies to\n\n\\[\n\\begin{align*}\nT(n) = &{\\color{gray}\\left(\\frac{c_5}{2} + \\frac{c_6}{2} + \\frac{c_7}{2}\\right)}{\\color{green}n^2} + {\\color{gray}\\left(c_1 + c_2 + c_4 + \\frac{c_5}{2} - \\frac{c_6}{2} - \\frac{c_7}{2} + c_8\\right)}{\\color{green}n^1} \\\\\n\\phantom{T(n) = }& - {\\color{gray}(c_2 + c_4 + c_5 + c_8)}{\\color{green}n^0}\n\\end{align*}\n\\]",
    "crumbs": [
      "Week 2: {{< var w02.date-md >}}"
    ]
  },
  {
    "objectID": "w02/index.html#remember-asymptotic-analysis",
    "href": "w02/index.html#remember-asymptotic-analysis",
    "title": "Week 2: Software Design Patterns and Object-Oriented Programming",
    "section": "Remember: Asymptotic Analysis!",
    "text": "Remember: Asymptotic Analysis!\n\nIt still looks pretty messy, but remember: we care about efficiency as a function of \\(n\\)!\n\n\\[\n\\begin{align*}\nT(n) = &\\underbrace{{\\color{gray}\\left(\\frac{c_5}{2} + \\frac{c_6}{2} + \\frac{c_7}{2}\\right)}}_{\\text{Constant}}\\underbrace{\\phantom{(}{\\color{green}n^2}\\phantom{)}}_{\\text{Quadratic}} \\\\\n\\phantom{T(n) = }&+ \\underbrace{{\\color{gray}\\left(c_1 + c_2 + c_4 + \\frac{c_5}{2} - \\frac{c_6}{2} - \\frac{c_7}{2} + c_8\\right)}}_{\\text{Constant}}\\underbrace{\\phantom{(}{\\color{green}n^1}\\phantom{)}}_{\\text{Linear}} \\\\\n\\phantom{T(n) = }& - \\underbrace{{\\color{gray}(c_2 + c_4 + c_5 + c_8)}}_{\\text{Constant}}\\underbrace{{\\color{green}n^0}}_{\\text{Constant}}\n\\end{align*}\n\\]\n\nSo, there‚Äôs a sense in which \\(T(n) \\approx n^2\\), for ‚Äúsufficiently large‚Äù values of \\(n\\)‚Ä¶\nLet‚Äôs work our way towards formalizing the \\(\\approx\\)!",
    "crumbs": [
      "Week 2: {{< var w02.date-md >}}"
    ]
  },
  {
    "objectID": "w02/index.html#the-figure-you-should-make-in-your-brain-every-time",
    "href": "w02/index.html#the-figure-you-should-make-in-your-brain-every-time",
    "title": "Week 2: Software Design Patterns and Object-Oriented Programming",
    "section": "The Figure You Should Make In Your Brain Every Time",
    "text": "The Figure You Should Make In Your Brain Every Time\n\n\nCode\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nn_vals = [np.power(10, k) for k in np.arange(1, 2.75, 0.25)]\nruntime_df = pd.DataFrame({'$n$': n_vals})\nruntime_df['$n^2 + 50n$'] = runtime_df['$n$'].apply(lambda x: np.power(x, 2) + 50*x)\nruntime_df['$n^2 + 10000$'] = runtime_df['$n$'].apply(lambda x: np.power(x, 2) + 10000)\nruntime_df['$O(n)$'] = runtime_df['$n$'].copy()\nruntime_df['$O(nlogn)$'] = runtime_df['$n$'].apply(lambda x: x * np.log(x))\nruntime_df['$O(n^2)$'] = runtime_df['$n$'].apply(lambda x: np.power(x, 2))\nruntime_df['$O(n^2logn)$'] = runtime_df['$n$'].apply(lambda x: np.power(x,2) * np.log(x))\nruntime_df['$O(n^3)$'] = runtime_df['$n$'].apply(lambda x: np.power(x, 3))\nruntime_df['$O(n^3logn)$'] = runtime_df['$n$'].apply(lambda x: np.power(x, 3) * np.log(x))\n# Get the max values, for labeling the ends of lines\nmax_vals = runtime_df.max().to_dict()\nplot_df = runtime_df.melt(id_vars=['$n$'])\n#print(plot_df)\nstyle_map = {col: '' if (col == '$n^2 + 50n$') or (col == '$n^2 + 10000$') else (2,1) for col in runtime_df.columns}\nfig, ax = plt.subplots(figsize=(11,5))\nsns.lineplot(plot_df, x='$n$', y='value', hue='variable', style='variable', dashes=style_map)\n#plt.xscale('log')\nplt.yscale('log')\n# extract the existing handles and labels\nh, l = ax.get_legend_handles_labels()\n# slice the appropriate section of l and h to include in the legend\nax.legend(h[0:2], l[0:2])\nfor label, val in max_vals.items():\n  if (label == '$n$') or (label == '$n^2 + 50n$') or (label == '$n^2 + 10000$'):\n    continue\n  if 'logn' in label:\n    label = label.replace('logn', r'\\log(n)')\n  ax.text(x = max_vals['$n$'] + 2, y = val, s=label, va='center')\n# Hide the right and top spines\nax.spines[['right', 'top']].set_visible(False)\nplt.show()\n\n\n\n\n\n\n\n\n\n\nTakeaway: As \\(n \\rightarrow \\infty\\), highest-degree terms dominate!",
    "crumbs": [
      "Week 2: {{< var w02.date-md >}}"
    ]
  },
  {
    "objectID": "w02/index.html#constants-on-highest-degree-terms-also-go-away",
    "href": "w02/index.html#constants-on-highest-degree-terms-also-go-away",
    "title": "Week 2: Software Design Patterns and Object-Oriented Programming",
    "section": "Constants On Highest-Degree Terms Also Go Away",
    "text": "Constants On Highest-Degree Terms Also Go Away\n\n(Though this is harder to see, without a log-log plot:)\n\n\n\nCode\nn_vals = [np.power(10, k) for k in np.arange(1, 6, 0.5)]\nrt_const_df = pd.DataFrame({'$n$': n_vals})\nrt_const_df['$20n^2$'] = rt_const_df['$n$'].apply(lambda x: 20*np.power(x,2))\nrt_const_df['$n^2$'] = rt_const_df['$n$'].apply(lambda x: np.power(x,2))\nrt_const_df['$n^2logn$'] = rt_const_df['$n$'].apply(lambda x: np.power(x,2) * np.power(np.log(x),2))\nrt_const_df['$n^3$'] = rt_const_df['$n$'].apply(lambda x: np.power(x,3))\n# Get the max values, for labeling the ends of lines\nmax_vals = rt_const_df.max().to_dict()\nplot_df_const = rt_const_df.melt(id_vars=['$n$'])\nstyle_map = {col: '' if (col == '$20n^2$') else (2,1) for col in rt_const_df.columns}\nfig_const, ax_const = plt.subplots(figsize=(11,5))\nsns.lineplot(plot_df_const, x='$n$', y='value', hue='variable', style='variable', dashes=style_map)\nplt.xscale('log')\nplt.yscale('log')\n# extract the existing handles and labels\nh_const, l_const = ax_const.get_legend_handles_labels()\n# slice the appropriate section of l and h to include in the legend\nax_const.legend(h_const[0:1], l_const[0:1])\nfor label, val in max_vals.items():\n  if (label == '$n$') or (label == '$20n^2$'):\n    continue\n  if 'logn' in label:\n    label = label.replace('logn', r'\\log(n)')\n  ax_const.text(x = max_vals['$n$'] + 10**4, y = val, s=label, va='center')\n# Hide the right and top spines\nax_const.spines[['right', 'top']].set_visible(False)\nplt.show()",
    "crumbs": [
      "Week 2: {{< var w02.date-md >}}"
    ]
  },
  {
    "objectID": "w02/index.html#formalizing-big-o-notation",
    "href": "w02/index.html#formalizing-big-o-notation",
    "title": "Week 2: Software Design Patterns and Object-Oriented Programming",
    "section": "Formalizing Big-O Notation",
    "text": "Formalizing Big-O Notation\n\nLet \\(f, g: \\mathbb{N} \\rightarrow \\mathbb{N}\\). Then we write \\(f(n) = O(g(n))\\) when there exists a threshold \\(n_0 &gt; 0\\) and a constant \\(K &gt; 0\\) such that \\[\n\\forall n \\geq n_0 \\left[ f(n) \\leq K\\cdot g(n) \\right]\n\\]\nIn words: beyond a certain point \\(n_0\\), \\(f(n)\\) is bounded above by \\(K\\cdot g(n)\\).\nDefinition from Savage (1998, pg. 13)",
    "crumbs": [
      "Week 2: {{< var w02.date-md >}}"
    ]
  },
  {
    "objectID": "w02/index.html#intuition-rightarrow-proof",
    "href": "w02/index.html#intuition-rightarrow-proof",
    "title": "Week 2: Software Design Patterns and Object-Oriented Programming",
    "section": "Intuition \\(\\rightarrow\\) Proof",
    "text": "Intuition \\(\\rightarrow\\) Proof\n\nUsing this definition, we can now prove \\(f(n) = n^2 + 50n = O(n^2)\\)!\nHere \\(f(n) = n^2 + 50n\\), \\(g(n) = n^2\\)\nTheorem: \\(\\exists \\; n_0 \\; \\text{ s.t. } \\forall n \\geq n_0 \\left[ n^2 + 50n \\leq Kn^2 \\right]\\)\nProof: Let \\(K = 50\\). Then \\[\n\\begin{align*}\n&n^2 + 50n \\leq 50n^2 \\iff n + 50 \\leq 50n \\\\\n&\\iff 49n \\geq 50 \\iff n \\geq \\frac{50}{49}.\n\\end{align*}\n\\]\nSo if we choose \\(n_0 = 2\\), the chain of statements holds. \\(\\blacksquare\\)",
    "crumbs": [
      "Week 2: {{< var w02.date-md >}}"
    ]
  },
  {
    "objectID": "w02/index.html#bounding-insertion-sort-runtime",
    "href": "w02/index.html#bounding-insertion-sort-runtime",
    "title": "Week 2: Software Design Patterns and Object-Oriented Programming",
    "section": "Bounding Insertion Sort Runtime",
    "text": "Bounding Insertion Sort Runtime\n\nRuns in \\(T(n) = O(n^2)\\) (use constants from prev slide)\nCan similarly define lower bound \\(T(n) = \\Omega(f(n))\\)\n\n\\(O\\) = ‚ÄúBig-Oh‚Äù, \\(\\Omega\\) = ‚ÄúBig-Omega‚Äù\n\nNeed to be careful with \\(O(f(n))\\) vs.¬†\\(\\Omega(f(n))\\) however: difference between ‚Äúfor all inputs‚Äù vs.¬†‚Äúfor some inputs‚Äù:\n\n\n\n\n\n\n\nBounding Worst-Case Runtime\n\n\n\nBy saying that the worst-case running time of an algorithm is \\(\\Omega(n^2)\\), we mean that for every input size \\(n\\) above a certain threshold, there is at least one input of size \\(n\\) for which the algorithm takes at least \\(cn^2\\) time, for some positive constant \\(n\\). It does not necessarily mean that the algorithm takes at least \\(cn^2\\) time for all inputs.",
    "crumbs": [
      "Week 2: {{< var w02.date-md >}}"
    ]
  },
  {
    "objectID": "w02/index.html#intuition-for-lower-bound",
    "href": "w02/index.html#intuition-for-lower-bound",
    "title": "Week 2: Software Design Patterns and Object-Oriented Programming",
    "section": "Intuition for Lower Bound",
    "text": "Intuition for Lower Bound\n\nSpoiler: Insertion sort also runs in \\(T(n) = \\Omega(n^2)\\) time. How could we prove this?\nGiven any value \\(n &gt; n_0\\), we need to construct an input for which Insertion-Sort requires \\(cn^2\\) steps: consider a list where \\(n/3\\) greatest values are in first \\(n/3\\) slots:\n\n\n\n\nAll \\(n/3\\) values in \\(\\textrm{L}\\) pass, one-by-one, through the \\(n/3\\) slots in \\(\\textrm{M}\\) (since they must end up in \\(\\textrm{R}\\)) \\(\\implies (n/3)(n/3) = n^2/9 = \\Omega(n^2)\\) steps!\n\n\n\nFinal definition (a theorem you could prove if you want!): \\(\\Theta\\) = ‚ÄúBig-Theta‚Äù\n\nIf \\(T(n) = \\overline{O}(g(n))\\) and \\(T(n) = \\Omega(g(n))\\), then \\(T(n) = \\Theta(n)\\)\n\n\\(\\implies\\) most ‚Äúinformative‚Äù way to characterize insertion sort is \\(\\boxed{T(n) = \\Theta(n^2)}\\)",
    "crumbs": [
      "Week 2: {{< var w02.date-md >}}"
    ]
  },
  {
    "objectID": "w02/index.html#doing-better-than-insertion-sort",
    "href": "w02/index.html#doing-better-than-insertion-sort",
    "title": "Week 2: Software Design Patterns and Object-Oriented Programming",
    "section": "Doing Better Than Insertion Sort",
    "text": "Doing Better Than Insertion Sort\n\nIntuition Break ü•≥: Finding a word in a dictionary! dsan.io/dict-lookup",
    "crumbs": [
      "Week 2: {{< var w02.date-md >}}"
    ]
  },
  {
    "objectID": "w02/index.html#how-can-merge-sort-work-that-much-better",
    "href": "w02/index.html#how-can-merge-sort-work-that-much-better",
    "title": "Week 2: Software Design Patterns and Object-Oriented Programming",
    "section": "How Can Merge Sort Work That Much Better!?",
    "text": "How Can Merge Sort Work That Much Better!?\n\nWith the linear approach, each time we check a word and it‚Äôs not our word we eliminate‚Ä¶ one measly word üòû\nBut with the divide-and-conquer approach‚Ä¶ we eliminate üî•HALF OF THE REMAINING WORDSüî•",
    "crumbs": [
      "Week 2: {{< var w02.date-md >}}"
    ]
  },
  {
    "objectID": "w02/index.html#merging-two-sorted-lists-in-on-time",
    "href": "w02/index.html#merging-two-sorted-lists-in-on-time",
    "title": "Week 2: Software Design Patterns and Object-Oriented Programming",
    "section": "Merging Two Sorted Lists in \\(O(n)\\) Time",
    "text": "Merging Two Sorted Lists in \\(O(n)\\) Time\n\n\n\nFrom Cormen et al. (2001), pg. 37",
    "crumbs": [
      "Week 2: {{< var w02.date-md >}}"
    ]
  },
  {
    "objectID": "w02/index.html#merge-sort-merging-as-subroutine",
    "href": "w02/index.html#merge-sort-merging-as-subroutine",
    "title": "Week 2: Software Design Patterns and Object-Oriented Programming",
    "section": "Merge Sort (Merging as Subroutine)",
    "text": "Merge Sort (Merging as Subroutine)\n\n\n\nFrom Cormen et al. (2001), pg. 40",
    "crumbs": [
      "Week 2: {{< var w02.date-md >}}"
    ]
  },
  {
    "objectID": "w02/index.html#complexity-analysis-1",
    "href": "w02/index.html#complexity-analysis-1",
    "title": "Week 2: Software Design Patterns and Object-Oriented Programming",
    "section": "Complexity Analysis",
    "text": "Complexity Analysis\n\nHard way: re-do the line-by-line analysis we did for Insertion-Sort üò£ Easy way: stand on shoulders of giants!\nUsing a famous+fun theorem (the Master Theorem): Given a recurrence \\(T(n) = aT(n/b) + f(n)\\), compute its:\n\nWatershed function \\(W(n) = n^{\\log_b(a)}\\) and\nDriving function \\(D(n) = f(n)\\)\n\nThe Master Theorem gives closed-form asymptotic solution for \\(T(n)\\), split into three cases:\n(1) \\(W(n)\\) grows faster than \\(D(n)\\), (2) grows at same rate as \\(D(n)\\), or (3) grows slower than \\(D(n)\\)",
    "crumbs": [
      "Week 2: {{< var w02.date-md >}}"
    ]
  },
  {
    "objectID": "w02/index.html#bounding-the-runtime-of-merge-sort",
    "href": "w02/index.html#bounding-the-runtime-of-merge-sort",
    "title": "Week 2: Software Design Patterns and Object-Oriented Programming",
    "section": "Bounding the Runtime of Merge Sort",
    "text": "Bounding the Runtime of Merge Sort\n\nHow about Merge-Sort? \\(T(n) = 2T(n/2) + \\Theta(n)\\)\n\n\\(a = b = 2\\), \\(W(n) = n^{\\log_2(2)} = n\\), \\(D(n) = \\Theta(n)\\)\n\n\\(W(n)\\) and \\(D(n)\\) grow at same rate \\(\\implies\\) Case 21:\n\n\n\n\n\n\n\nApplying the Master Theorem When \\(W(n) = \\Theta(D(n))\\) (Case 2)\n\n\n\n\nIs there a \\(k \\geq 0\\) satisfying \\(D(n) = \\Theta(n^{\\log_b(a)}\\log_2^k(n))\\)?\nIf so, your solution is \\(T(n) = \\Theta(n^{\\log_b(a)}\\log_2^{k+1}(n))\\)\n\n\n\n\nMerge-Sort: \\(k = 0\\) works! \\(\\Theta(n^{\\log_2(2)}\\log_2^0(n)) = \\Theta(n)\\)\nThus \\(T(n) = \\Theta(n^{\\log_b(a)}\\log_2^{k+1}(n)) = \\boxed{\\Theta(n\\log_2n)}\\) üòé",
    "crumbs": [
      "Week 2: {{< var w02.date-md >}}"
    ]
  },
  {
    "objectID": "w02/index.html#breaking-a-problem-into-interacting-parts",
    "href": "w02/index.html#breaking-a-problem-into-interacting-parts",
    "title": "Week 2: Software Design Patterns and Object-Oriented Programming",
    "section": "Breaking a Problem into (Interacting) Parts",
    "text": "Breaking a Problem into (Interacting) Parts\n\nPython so far: ‚ÄúData science mode‚Äù\n\nStart at top of file with raw data\nWrite lines of code until problem solved\n\nPython in this class: ‚ÄúSoftware engineering mode‚Äù\n\nBreak system down into parts\nWrite each part separately\nLink parts together to create the whole\n\n(One implication: .py files may be easier than .ipynb for development!)",
    "crumbs": [
      "Week 2: {{< var w02.date-md >}}"
    ]
  },
  {
    "objectID": "w02/index.html#how-does-a-calculator-work",
    "href": "w02/index.html#how-does-a-calculator-work",
    "title": "Week 2: Software Design Patterns and Object-Oriented Programming",
    "section": "How Does A Calculator Work?",
    "text": "How Does A Calculator Work?\n\n\n\n(Calculator image from Wikimedia Commons)",
    "crumbs": [
      "Week 2: {{< var w02.date-md >}}"
    ]
  },
  {
    "objectID": "w02/index.html#key-oop-feature-1-encapsulation",
    "href": "w02/index.html#key-oop-feature-1-encapsulation",
    "title": "Week 2: Software Design Patterns and Object-Oriented Programming",
    "section": "Key OOP Feature #1: Encapsulation",
    "text": "Key OOP Feature #1: Encapsulation\n\nImagine you‚Äôre on a team trying to make a calculator\nOne person can write the Screen class, another person can write the Button class, and so on\nNatural division of labor! (May seem silly for a calculator, but imagine as your app scales up)",
    "crumbs": [
      "Week 2: {{< var w02.date-md >}}"
    ]
  },
  {
    "objectID": "w02/index.html#use-case-bookstore-inventory-management",
    "href": "w02/index.html#use-case-bookstore-inventory-management",
    "title": "Week 2: Software Design Patterns and Object-Oriented Programming",
    "section": "Use Case: Bookstore Inventory Management",
    "text": "Use Case: Bookstore Inventory Management\n\n\n\nImage source",
    "crumbs": [
      "Week 2: {{< var w02.date-md >}}"
    ]
  },
  {
    "objectID": "w02/index.html#in-pictures",
    "href": "w02/index.html#in-pictures",
    "title": "Week 2: Software Design Patterns and Object-Oriented Programming",
    "section": "In Pictures",
    "text": "In Pictures\n\n\n\n\n\n\nG\n\nBookstore Relational Diagram\n\n\nBookstore\n\nBookstore\n\nName\n\nLocation\n\nBooklist\n\nGet_Inventory()\n\nSort_Inventory()\n\n\n\nPlace\n\nPlace\n\nCity\n\nState\n\nCountry\n\nPrint_Map()\n\n\n\nBookstore:loc-&gt;Place:placehead\n\n\nHas One\n\n\n\nBook\n\nBook\n\nTitle\n\nAuthors\n\nNum Pages\n\nPreview()\n\n\n\nBookstore:bl-&gt;Book:bookhead\n\n\nHas Multiple\n\n\n\nPerson\n\nPerson\n\nFamily Name\n\nGiven Name\n\n\n\nBook:auths-&gt;Person:personhead\n\n\nHas Multiple",
    "crumbs": [
      "Week 2: {{< var w02.date-md >}}"
    ]
  },
  {
    "objectID": "w02/index.html#creating-classes",
    "href": "w02/index.html#creating-classes",
    "title": "Week 2: Software Design Patterns and Object-Oriented Programming",
    "section": "Creating Classes",
    "text": "Creating Classes\n\nUse case: Creating an inventory system for a Bookstore\n\n\n\n\n\nCode\nclass Bookstore:\n    def __init__(self, name, location):\n        self.name = name\n        self.location = location\n        self.books = []\n\n    def __getitem__(self, index):\n        return self.books[index]\n\n    def __repr__(self):\n        return self.__str__()\n\n    def __str__(self):\n        return f\"Bookstore[{self.get_num_books()} books]\"\n\n    def add_books(self, book_list):\n        self.books.extend(book_list)\n\n    def get_books(self):\n        return self.books\n\n    def get_inventory(self):\n        book_lines = []\n        for book_index, book in enumerate(self.get_books()):\n            cur_book_line = f\"{book_index}. {str(book)}\"\n            book_lines.append(cur_book_line)\n        return \"\\n\".join(book_lines)\n\n    def get_num_books(self):\n        return len(self.get_books())\n\n    def sort_books(self, sort_key):\n        self.books.sort(key=sort_key)\n\nclass Book:\n    def __init__(self, title, authors, num_pages):\n        self.title = title\n        self.authors = authors\n        self.num_pages = num_pages\n\n    def __str__(self):\n        return f\"Book[title={self.get_title()}, authors={self.get_authors()}, pages={self.get_num_pages()}]\"\n\n    def get_authors(self):\n        return self.authors\n\n    def get_first_author(self):\n        return self.authors[0]\n\n    def get_num_pages(self):\n        return self.num_pages\n\n    def get_title(self):\n        return self.title\n\nclass Person:\n    def __init__(self, family_name, given_name):\n        self.family_name = family_name\n        self.given_name = given_name\n\n    def __repr__(self):\n        return self.__str__()\n\n    def __str__(self):\n        return f\"Person[{self.get_family_name()}, {self.get_given_name()}]\"\n\n    def get_family_name(self):\n        return self.family_name\n\n    def get_given_name(self):\n        return self.given_name\n\n\n\n\n\nCode\nmy_bookstore = Bookstore(\"Bookland\", \"Washington, DC\")\nplath = Person(\"Plath\", \"Sylvia\")\nbell_jar = Book(\"The Bell Jar\", [plath], 244)\nmarx = Person(\"Marx\", \"Karl\")\nengels = Person(\"Engels\", \"Friedrich\")\nmanifesto = Book(\"The Communist Manifesto\", [marx, engels], 43)\nelster = Person(\"Elster\", \"Jon\")\ncement = Book(\"The Cement of Society\", [elster], 311)\nmy_bookstore.add_books([bell_jar, manifesto, cement])\nprint(my_bookstore)\nprint(my_bookstore[0])\nprint(\"Inventory:\")\nprint(my_bookstore.get_inventory())\n\n\nBookstore[3 books]\nBook[title=The Bell Jar, authors=[Person[Plath, Sylvia]], pages=244]\nInventory:\n0. Book[title=The Bell Jar, authors=[Person[Plath, Sylvia]], pages=244]\n1. Book[title=The Communist Manifesto, authors=[Person[Marx, Karl], Person[Engels, Friedrich]], pages=43]\n2. Book[title=The Cement of Society, authors=[Person[Elster, Jon]], pages=311]",
    "crumbs": [
      "Week 2: {{< var w02.date-md >}}"
    ]
  },
  {
    "objectID": "w02/index.html#doing-things-with-classes",
    "href": "w02/index.html#doing-things-with-classes",
    "title": "Week 2: Software Design Patterns and Object-Oriented Programming",
    "section": "Doing Things With Classes",
    "text": "Doing Things With Classes\n\nNow we can use our OOP structure, for example to sort the inventory in different ways!\n\n\n\n\nAlphabetical (By First Author)\n\n\n\nCode\nsort_alpha = lambda x: x.get_first_author().get_family_name()\nmy_bookstore.sort_books(sort_key = sort_alpha)\nprint(my_bookstore.get_inventory())\n\n\n0. Book[title=The Cement of Society, authors=[Person[Elster, Jon]], pages=311]\n1. Book[title=The Communist Manifesto, authors=[Person[Marx, Karl], Person[Engels, Friedrich]], pages=43]\n2. Book[title=The Bell Jar, authors=[Person[Plath, Sylvia]], pages=244]\n\n\n\n\nBy Page Count\n\n\n\nCode\nsort_pages = lambda x: x.get_num_pages()\nmy_bookstore.sort_books(sort_key = sort_pages)\nprint(my_bookstore.get_inventory())\n\n\n0. Book[title=The Communist Manifesto, authors=[Person[Marx, Karl], Person[Engels, Friedrich]], pages=43]\n1. Book[title=The Bell Jar, authors=[Person[Plath, Sylvia]], pages=244]\n2. Book[title=The Cement of Society, authors=[Person[Elster, Jon]], pages=311]",
    "crumbs": [
      "Week 2: {{< var w02.date-md >}}"
    ]
  },
  {
    "objectID": "w02/index.html#key-oop-feature-2-polymorphism",
    "href": "w02/index.html#key-oop-feature-2-polymorphism",
    "title": "Week 2: Software Design Patterns and Object-Oriented Programming",
    "section": "Key OOP Feature #2: Polymorphism",
    "text": "Key OOP Feature #2: Polymorphism\n\nEncapsulate general properties in parent class, specific properties in child classes\n\n\n\n\n(You can edit this or make your own UML diagrams in nomnoml!)",
    "crumbs": [
      "Week 2: {{< var w02.date-md >}}"
    ]
  },
  {
    "objectID": "w02/index.html#or-is-this-better",
    "href": "w02/index.html#or-is-this-better",
    "title": "Week 2: Software Design Patterns and Object-Oriented Programming",
    "section": "Or‚Ä¶ Is This Better?",
    "text": "Or‚Ä¶ Is This Better?\n\n\n\nEdit in nomnoml",
    "crumbs": [
      "Week 2: {{< var w02.date-md >}}"
    ]
  },
  {
    "objectID": "w02/index.html#design-choices",
    "href": "w02/index.html#design-choices",
    "title": "Week 2: Software Design Patterns and Object-Oriented Programming",
    "section": "Design Choices",
    "text": "Design Choices\n\nThe goal is to encapsulate as best as possible: which objects should have which properties, and which methods?\nExample: Fiction vs.¬†Non-Fiction. How important is this distinction for your use case?\n\n\n\n\nOption 1: As Property of Book\n\n\n\nCode\nfrom enum import Enum\nclass BookType(Enum):\n    NONFICTION = 0\n    FICTION = 1\n\nclass Book:\n    def __init__(self, title: str, authors: list[Person], num_pages: int, type: BookType):\n        self.title = title\n        self.authors = authors\n        self.num_pages = num_pages\n        self.type = type\n\n    def __str__(self):\n        return f\"Book[title={self.title}, authors={self.authors}, pages={self.num_pages}, type={self.type}]\"\n\n\n\n\nCode\njoyce = Person(\"Joyce\", \"James\")\nulysses = Book(\"Ulysses\", [joyce], 732, BookType.FICTION)\nschelling = Person(\"Schelling\", \"Thomas\")\nmicromotives = Book(\"Micromotives and Macrobehavior\", [schelling], 252, BookType.NONFICTION)\nprint(ulysses)\nprint(micromotives)\n\n\nBook[title=Ulysses, authors=[Person[Joyce, James]], pages=732, type=BookType.FICTION]\nBook[title=Micromotives and Macrobehavior, authors=[Person[Schelling, Thomas]], pages=252, type=BookType.NONFICTION]\n\n\n\n\nOption 2: Separate Classes\n\n\n\nCode\n# class Book defined as earlier\nclass FictionBook(Book):\n    def __init__(self, title, authors, num_pages, characters):\n        super().__init__(title, authors, num_pages)\n        self.characters = characters\n\nclass NonfictionBook(Book):\n    def __init__(self, title, authors, num_pages, topic):\n        super().__init__(title, authors, num_pages)\n        self.topic = topic\n\n\n\n\nCode\njoyce = Person(\"Joyce\", \"James\")\nulysses = FictionBook(\"Ulysses\", [joyce], 732, [\"Daedalus\"])\nschelling = Person(\"Schelling\", \"Thomas\")\nmicromotives = NonfictionBook(\"Micromotives and Macrobehavior\", [schelling], 252, \"Economics\")\nprint(ulysses)\nprint(micromotives)\n\n\nBook[title=Ulysses, authors=[Person[Joyce, James]], pages=732]\nBook[title=Micromotives and Macrobehavior, authors=[Person[Schelling, Thomas]], pages=252]",
    "crumbs": [
      "Week 2: {{< var w02.date-md >}}"
    ]
  },
  {
    "objectID": "w02/index.html#references",
    "href": "w02/index.html#references",
    "title": "Week 2: Software Design Patterns and Object-Oriented Programming",
    "section": "References",
    "text": "References\n\n\nCormen, Thomas H., Charles E. Leiserson, Ronald L. Rivest, and Clifford Stein. 2001. Introduction To Algorithms. MIT Press.\n\n\nSavage, John E. 1998. Models of Computation: Exploring the Power of Computing. Addison-Wesley.",
    "crumbs": [
      "Week 2: {{< var w02.date-md >}}"
    ]
  },
  {
    "objectID": "w02/index.html#appendix-the-full-master-theorem",
    "href": "w02/index.html#appendix-the-full-master-theorem",
    "title": "Week 2: Software Design Patterns and Object-Oriented Programming",
    "section": "Appendix: The Full Master Theorem",
    "text": "Appendix: The Full Master Theorem\nMaster Theorem: Let \\(a &gt; 0\\) and \\(b &gt; 1\\) be constants, and let \\(f(n)\\) be a driving function defined and nonnegative on all sufficiently large reals. Define \\(T(n)\\) on \\(n \\in \\mathbb{N}\\) by\n\\[\nT(n) = aT(n/b) + f(n)\n\\]\nwhere \\(aT(n/b) = a'T(\\lfloor n/b \\rfloor) + a''T(\\lceil n/b \\rceil)\\) for some \\(a' \\geq 0\\) and \\(a'' \\geq 0\\) satisfying \\(a = a' + a''\\). Then the asymptotic behavior of \\(T(n)\\) can be characterized as follows:\n\nIf there exists \\(\\epsilon &gt; 0\\) such that \\(f(n) = O(n^{\\log_b(a) - \\epsilon})\\), then \\(T(n) = \\Theta(n^{\\log_b(a)})\\)\nIf there exists \\(k \\geq 0\\) such that \\(f(n) = \\Theta(n^{\\log_b(a)}\\log_2^k(n))\\), then \\(T(n) = \\Theta(n^{\\log_b(a)}\\log_2^{k+1}(n))\\).\nIf there exists \\(\\epsilon &gt; 0\\) such that \\(f(n) = \\Omega(n^{\\log_b(a) + \\epsilon})\\), and if \\(f(n)\\) satisfies the regularity condition \\(af(n/b) \\leq cf(n)\\) for some constant \\(c &lt; 1\\) and all sufficiently large \\(n\\), then \\(T(n) = \\Theta(f(n))\\).\n\n\nProof. See Cormen et al. (2001), pg. 107-114.\n\n(‚Üê Back to Merge Sort slides)",
    "crumbs": [
      "Week 2: {{< var w02.date-md >}}"
    ]
  },
  {
    "objectID": "w02/index.html#footnotes",
    "href": "w02/index.html#footnotes",
    "title": "Week 2: Software Design Patterns and Object-Oriented Programming",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nSee appendix slide for all 3 cases, if you‚Äôre some kind of masochist‚Ü©Ô∏é",
    "crumbs": [
      "Week 2: {{< var w02.date-md >}}"
    ]
  },
  {
    "objectID": "assignments.html",
    "href": "assignments.html",
    "title": "Assignment Point Distributions",
    "section": "",
    "text": "Use the tabs below to view the point distributions for different assignments.\nThe distributions are imported from Google Sheets mainly for transparency: so that you can see exactly how totals are computed as a sum of the individual points allocated for each test!\n\nHW1\n\n\n\n\n\n\n\n\n\npart\nqid\ntest_type\npoints\npart_total\n\n\n\n\n1\nQ1.1\npublic\n0\n\n\n\n1\nQ1.1\nhidden\n2\n\n\n\n1\nQ1.2\npublic\n0\n\n\n\n1\nQ1.2\nhidden\n2\n\n\n\n1\nQ1.3\npublic\n0\n\n\n\n1\nQ1.3\nhidden\n2\n\n\n\n1\nQ1.4\npublic\n0\n\n\n\n1\nQ1.4\nhidden\n2\n8\n\n\n2\nQ2.1\npublic\n1\n\n\n\n2\nQ2.1\nhidden\n4\n\n\n\n2\nQ2.2\npublic\n1\n\n\n\n2\nQ2.2\nhidden\n4\n10\n\n\n3\nQ3.1\npublic\n1\n\n\n\n3\nQ3.1\nhidden\n18\n\n\n\n3\nQ3.2\npublic\n1\n\n\n\n3\nQ3.2\nhidden\n5\n25\n\n\n4\nQ4.1\npublic\n1\n\n\n\n4\nQ4.1\nhidden\n18\n\n\n\n4\nQ4.2\npublic\n1\n\n\n\n4\nQ4.2\nhidden\n5\n25\n\n\n5\nQ5.1\npublic\n1\n\n\n\n5\nQ5.1\nhidden\n3\n\n\n\n5\nQ5.2\npublic\n1\n\n\n\n5\nQ5.2\nhidden\n3\n\n\n\n5\nQ5.3\npublic\n0\n\n\n\n5\nQ5.3\nhidden\n2\n\n\n\n5\nQ5.4\npublic\n0\n\n\n\n5\nQ5.4\nhidden\n2\n12\n\n\n6\nQ6.1\npublic\n1\n\n\n\n6\nQ6.1\nhidden\n3\n\n\n\n6\nQ6.2\npublic\n1\n\n\n\n6\nQ6.2\nhidden\n3\n\n\n\n6\nQ6.3\npublic\n1\n\n\n\n6\nQ6.3\nhidden\n3\n\n\n\n6\nQ6.4\npublic\n1\n\n\n\n6\nQ6.4\nhidden\n3\n\n\n\n6\nQ6.5\npublic\n1\n\n\n\n6\nQ6.5\nhidden\n3\n20\n\n\nTotal\n\n\n100\n100",
    "crumbs": [
      "Assignments"
    ]
  },
  {
    "objectID": "labs/index.html",
    "href": "labs/index.html",
    "title": "In-Class Labs / Demos",
    "section": "",
    "text": "The table below collects the pre-made labs used in the course together in one place.\nAny of the ‚Äúimpromptu‚Äù notebooks I make in-class, e.g.¬†to show how something works when executed or just to respond to in-class questions, can instead be found (sorted by week) in this GDrive folder\n\n\n\n\n\n\n\n\n\nWeek\n\n\nTitle\n\n\nCategory\n\n\n\n\n\n\n8\n\n\nAdvanced Data Validation with Pydantic\n\n\nColab Notebook\n\n\n\n\n1\n\n\nDictionary Lookup: Linear vs.¬†Logarithmic\n\n\nInteractive Demo\n\n\n\n\n1\n\n\nBasic Data Validation with Pydantic\n\n\nColab Notebook\n\n\n\n\n\nNo matching items",
    "crumbs": [
      "Labs / Demos"
    ]
  },
  {
    "objectID": "w03/index.html",
    "href": "w03/index.html",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "",
    "text": "Open slides in new window ‚Üí",
    "crumbs": [
      "Week 3: {{< var w03.date-md >}}"
    ]
  },
  {
    "objectID": "w03/index.html#why-cant-we-learn-data-structures-and-algorithms-separately",
    "href": "w03/index.html#why-cant-we-learn-data-structures-and-algorithms-separately",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "Why Can‚Äôt We Learn Data Structures and Algorithms Separately?",
    "text": "Why Can‚Äôt We Learn Data Structures and Algorithms Separately?\n\nData Structure Choice \\(\\Leftrightarrow\\) Algorithmic Efficiency for Task\nQuestion: ‚ÄúIs this algorithm efficient?‚Äù\nAnswer: ‚Äú‚Ä¶Efficient for what?‚Äù\nDo we need to be able to insert quickly?\nDo we need to be able to sort quickly?\nDo we need to be able to search quickly?\nAre we searching for individual items or for ranges?",
    "crumbs": [
      "Week 3: {{< var w03.date-md >}}"
    ]
  },
  {
    "objectID": "w03/index.html#recall-primitives",
    "href": "w03/index.html#recall-primitives",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "Recall: Primitives",
    "text": "Recall: Primitives\n\nbool\nint\nfloat\nNone\nNow we want to put these together, to form‚Ä¶ structures! üëÄ\nStructures are the things that live in the heap; the stack just points to them",
    "crumbs": [
      "Week 3: {{< var w03.date-md >}}"
    ]
  },
  {
    "objectID": "w03/index.html#tuples",
    "href": "w03/index.html#tuples",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "Tuples",
    "text": "Tuples\n\nFixed-size collection of \\(N\\) objects\nUnless otherwise specified, we‚Äôre talking about \\(2\\)-tuples\nExample: We can locate something on the Earth by specifying two floats: latitude and longitude!\n\n\nCode\ngtown_loc = (38.9076, -77.0723)\ngtown_loc\n\n\n(38.9076, -77.0723)\n\n\nBut what if we don‚Äôt know in advance how many items we want to store? Ex: how can we store users for a new app?",
    "crumbs": [
      "Week 3: {{< var w03.date-md >}}"
    ]
  },
  {
    "objectID": "w03/index.html#sequences",
    "href": "w03/index.html#sequences",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "Sequences",
    "text": "Sequences\n\nIn General: Mapping of integer indices to objects\nx = ['a','b','c']\n\n\\(\\implies\\) x[0] = 'a'\n\\(\\implies\\) x[1] = 'b'\n\\(\\implies\\) x[2] = 'c'\n\nIn Python: list\nNice built-in language constructs for looping over lists, and especially for performing operations on each element",
    "crumbs": [
      "Week 3: {{< var w03.date-md >}}"
    ]
  },
  {
    "objectID": "w03/index.html#looping-over-sequences",
    "href": "w03/index.html#looping-over-sequences",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "Looping Over Sequences",
    "text": "Looping Over Sequences\n\n\n\nC/C++/Java:\n\nList&lt;String&gt; myList = Arrays.asList(\"a\", \"b\", \"c\");\nfor (int i = 0; i &lt; x.size(); i++) {\n    System.out.println(myList.get(i));\n}\na\nb\nc\n\n\n\nPython:\n\n\n\nCode\nmy_list = ['a','b','c']\nfor list_element in my_list:\n  print(list_element)\n\n\na\nb\nc",
    "crumbs": [
      "Week 3: {{< var w03.date-md >}}"
    ]
  },
  {
    "objectID": "w03/index.html#list-comprehensions-apply-operation-to-each-element",
    "href": "w03/index.html#list-comprehensions-apply-operation-to-each-element",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "List Comprehensions: Apply [Operation] to Each Element",
    "text": "List Comprehensions: Apply [Operation] to Each Element\n\nConstruct new list by applying operation to each element:\n\n\nCode\nmy_nums = [4,5,6,7]\nmy_squares = [num ** 2 for num in my_nums]\nmy_squares\n\n\n[16, 25, 36, 49]\n\n\nCan also filter the elements of the list with if:\n\n\nCode\nmy_odd_squares = [num ** 2 for num in my_nums if num % 2 == 1]\nmy_odd_squares\n\n\n[25, 49]",
    "crumbs": [
      "Week 3: {{< var w03.date-md >}}"
    ]
  },
  {
    "objectID": "w03/index.html#sets",
    "href": "w03/index.html#sets",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "Sets",
    "text": "Sets\n\n\nEfficient for finding unique elements:\n\nprefs_morn = [\n  'None','None','None','Vegan','Vegan','None',\n  'Gluten Free'\n]\nprint(f\"Number of responses: {len(prefs_morn)}\")\n\nNumber of responses: 7\n\n\n\nunique_prefs_morn = set(prefs_morn)\nprint(f\"Unique preferences: {unique_prefs_morn}\")\nprint(f\"Number of unique preferences: {len(unique_prefs_morn)}\")\n\nUnique preferences: {'Gluten Free', 'None', 'Vegan'}\nNumber of unique preferences: 3\n\n\nOrdering / indexing of elements is gone!\n\nunique_prefs_morn[2]\n\n\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\nCell In[7], line 1\n----&gt; 1 unique_prefs_morn[2]\n\nTypeError: 'set' object is not subscriptable\n\n\n\nBut, supports set operators from math! ‚Üí\n\nUnion (\\(M \\cup E\\)):\n\nprefs_eve = [\n  'None','None','Vegan','None','None'\n]\nunique_prefs_eve = set(prefs_eve)\nunique_prefs_either = unique_prefs_morn.union(unique_prefs_eve)\nprint(f\"Preferences in either event: {unique_prefs_either}\")\n\nPreferences in either event: {'Gluten Free', 'None', 'Vegan'}\n\n\nIntersection (\\(M \\cap E\\)):\n\nunique_prefs_both = unique_prefs_morn.intersection(unique_prefs_eve)\nprint(f\"Preferences in both events: {unique_prefs_both}\")\n\nPreferences in both events: {'None', 'Vegan'}\n\n\nSet Difference (\\(M \\setminus E\\) or \\(E \\setminus M\\)):\n\nunique_prefs_mornonly = unique_prefs_morn - unique_prefs_eve\nprint(f\"Preferences only in the morning: {unique_prefs_mornonly}\")\nunique_prefs_eveonly = unique_prefs_eve - unique_prefs_morn\nprint(f\"Preferences only in the evening: {unique_prefs_eveonly}\")\n\nPreferences only in the morning: {'Gluten Free'}\nPreferences only in the evening: set()",
    "crumbs": [
      "Week 3: {{< var w03.date-md >}}"
    ]
  },
  {
    "objectID": "w03/index.html#maps-dictionaries",
    "href": "w03/index.html#maps-dictionaries",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "Maps / Dictionaries",
    "text": "Maps / Dictionaries\n\n\nWhile other language like Java have lots of fancy types of Map, Python has a single type, the dictionary:\n\n\nCode\ngtown_data = {\n  'name': 'Georgetown University',\n  'founded': 1789,\n  'coordinates': (38.9076, -77.0723),\n  'location': {\n    'city': 'Washington',\n    'state': 'DC', # &lt;__&lt;\n    'country': 'USA'\n  }\n}\nprint(gtown_data.keys())\nprint(gtown_data.values())\n\n\ndict_keys(['name', 'founded', 'coordinates', 'location'])\ndict_values(['Georgetown University', 1789, (38.9076, -77.0723), {'city': 'Washington', 'state': 'DC', 'country': 'USA'}])\n\n\n\nBe careful when looping! Default behavior is iteration over keys:\n\n\nCode\nfor k in gtown_data:\n  print(k)\n\n\nname\nfounded\ncoordinates\nlocation\n\n\nFor key-value pairs use .items():\n\n\nCode\nfor k, v in gtown_data.items():\n  print(f\"{k}: {v}\")\n\n\nname: Georgetown University\nfounded: 1789\ncoordinates: (38.9076, -77.0723)\nlocation: {'city': 'Washington', 'state': 'DC', 'country': 'USA'}",
    "crumbs": [
      "Week 3: {{< var w03.date-md >}}"
    ]
  },
  {
    "objectID": "w03/index.html#looking-under-the-hood-of-a-data-structure",
    "href": "w03/index.html#looking-under-the-hood-of-a-data-structure",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "Looking Under the Hood of a Data Structure",
    "text": "Looking Under the Hood of a Data Structure\n\nLast week we saw the math for why we can ‚Äúabstract away from‚Äù the details of how a particular language works\nWe want to understand these structures independently of the specifics of their implementation in Python (for now)\nSo, let‚Äôs construct our own simplified versions of the basic structures, and use these simplified versions to get a sense for their efficiency\n\n(The ‚Äútrue‚Äù Python versions may be hyper-optimized but, as we‚Äôll see, there are fundamental constraints on runtime, assuming \\(P \\neq NP\\))",
    "crumbs": [
      "Week 3: {{< var w03.date-md >}}"
    ]
  },
  {
    "objectID": "w03/index.html#tuples-1",
    "href": "w03/index.html#tuples-1",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "Tuples",
    "text": "Tuples\n\n\nCode\nclass MyTuple:\n  def __init__(self, thing1, thing2):\n    self.thing1 = thing1\n    self.thing2 = thing2\n\n  def __repr__(self):\n    return f\"({self.thing1}, {self.thing2})\"\n\n  def __str__(self):\n    return self.__repr__()\n\nt1 = MyTuple('a','b')\nt2 = MyTuple(111, 222)\nprint(t1)\nprint(t2)\n\n\n(a, b)\n(111, 222)",
    "crumbs": [
      "Week 3: {{< var w03.date-md >}}"
    ]
  },
  {
    "objectID": "w03/index.html#lists",
    "href": "w03/index.html#lists",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "Lists",
    "text": "Lists\n\n\nThe list itself just points to a root item:\n\n\nCode\nclass MyList:\n  def __init__(self):\n    self.root = None\n\n  def append(self, new_item):\n    if self.root is None:\n      self.root = MyListItem(new_item)\n    else:\n      self.root.append(new_item)\n\n  def __repr__(self):\n    return self.root.__repr__()\n\n\n\nAn item has contents, pointer to next item:\n\n\nCode\nclass MyListItem:\n  def __init__(self, content):\n    self.content = content\n    self.next = None\n\n  def append(self, new_item):\n    if self.next is None:\n      self.next = MyListItem(new_item)\n    else:\n      self.next.append(new_item)\n\n  def __repr__(self):\n    my_content = self.content\n    return my_content if self.next is None else f\"{my_content}, {self.next.__repr__()}\"\n\n\n\n\n\n\nCode\nusers = MyList()\nusers.append('Jeff')\nusers.append('Alma')\nusers.append('Bo')\nprint(users)\n\n\nJeff, Alma, Bo",
    "crumbs": [
      "Week 3: {{< var w03.date-md >}}"
    ]
  },
  {
    "objectID": "w03/index.html#so-how-many-steps-are-required",
    "href": "w03/index.html#so-how-many-steps-are-required",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "So, How Many ‚ÄúSteps‚Äù Are Required‚Ä¶",
    "text": "So, How Many ‚ÄúSteps‚Äù Are Required‚Ä¶\n\nTo retrieve the first element in a MyTuple?\nTo retrieve the last element in a MyTuple?\nTo retrieve the first element in a MyList?\nTo retrieve the last element in a MyList?",
    "crumbs": [
      "Week 3: {{< var w03.date-md >}}"
    ]
  },
  {
    "objectID": "w03/index.html#how-many-steps",
    "href": "w03/index.html#how-many-steps",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "How Many Steps?",
    "text": "How Many Steps?\n\n\nWith a MyTuple:\n\n\nCode\nt1.thing1\n\n\n'a'\n\n\n\\(\\implies\\) 1 step\n\n\nCode\nt1.thing2\n\n\n'b'\n\n\n\\(\\implies\\) 1 step\n\nWith a MyList:\n\n\nCode\nprint(users.root.content)\n\n\nJeff\n\n\n\\(\\implies\\) 1 step\n\n\nCode\ncurrent_node = users.root\nwhile current_node.next is not None:\n  current_node = current_node.next\nprint(current_node.content)\n\n\nBo\n\n\n\\(\\implies\\) (3 steps)\n‚Ä¶But why 3? How many steps if the list contained 5 elements? \\(N\\) elements?",
    "crumbs": [
      "Week 3: {{< var w03.date-md >}}"
    ]
  },
  {
    "objectID": "w03/index.html#pairwise-concatenating-list-elements",
    "href": "w03/index.html#pairwise-concatenating-list-elements",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "Pairwise-Concatenating List Elements",
    "text": "Pairwise-Concatenating List Elements\n\nNow rather than just printing, let‚Äôs pairwise concatenate:\n\n\nCode\ncur_pointer1 = users.root\nwhile cur_pointer1 is not None:\n  cur_pointer2 = users.root\n  while cur_pointer2 is not None:\n    print(cur_pointer1.content + cur_pointer2.content)\n    cur_pointer2 = cur_pointer2.next\n  cur_pointer1 = cur_pointer1.next\n\n\nJeffJeff\nJeffAlma\nJeffBo\nAlmaJeff\nAlmaAlma\nAlmaBo\nBoJeff\nBoAlma\nBoBo\n\n\nHow many steps did this take? How about for a list with \\(5\\) elements? \\(N\\) elements?",
    "crumbs": [
      "Week 3: {{< var w03.date-md >}}"
    ]
  },
  {
    "objectID": "w03/index.html#last-example-pairwise-concat-end-check",
    "href": "w03/index.html#last-example-pairwise-concat-end-check",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "Last Example: Pairwise-Concat + End Check",
    "text": "Last Example: Pairwise-Concat + End Check\n\n\nCode\nprinted_items = []\ncur_pointer1 = users.root\nwhile cur_pointer1 is not None:\n  cur_pointer2 = users.root\n  while cur_pointer2 is not None:\n    print(cur_pointer1.content + cur_pointer2.content)\n    printed_items.append(cur_pointer1.content)\n    printed_items.append(cur_pointer2.content)\n    cur_pointer2 = cur_pointer2.next\n  cur_pointer1 = cur_pointer1.next\ncheck_pointer = users.root\nwhile check_pointer is not None:\n  if check_pointer.content in printed_items:\n    print(f\"Phew. {check_pointer.content} printed at least once.\")\n  else:\n    print(f\"Oh no! {check_pointer.content} was never printed!!!\")\n  check_pointer = check_pointer.next\n\n\nJeffJeff\nJeffAlma\nJeffBo\nAlmaJeff\nAlmaAlma\nAlmaBo\nBoJeff\nBoAlma\nBoBo\nPhew. Jeff printed at least once.\nPhew. Alma printed at least once.\nPhew. Bo printed at least once.",
    "crumbs": [
      "Week 3: {{< var w03.date-md >}}"
    ]
  },
  {
    "objectID": "w03/index.html#generalizing",
    "href": "w03/index.html#generalizing",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "Generalizing",
    "text": "Generalizing\n\nAlgorithms are ‚Äúefficient‚Äù relative to how their runtime scales as the objects grow larger and larger!\nTuple operations take 1 step no matter what\nFor lists, retrieving the first element takes 1 step no matter what, but retrieving the last element takes \\(n\\) steps!\nPairwise concatenation requires \\(n^2\\) steps!",
    "crumbs": [
      "Week 3: {{< var w03.date-md >}}"
    ]
  },
  {
    "objectID": "w03/index.html#the-complexity-of-our-examples",
    "href": "w03/index.html#the-complexity-of-our-examples",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "The Complexity of Our Examples",
    "text": "The Complexity of Our Examples\n\nTuple operations: \\(O(1)\\)\nRetrieving the first element of a list: \\(O(1)\\)\nRetrieving the last element of a list: \\(O(n)\\)\nPairwise concatenation: \\(O(n^2)\\)\nPairwise concatenation+check: \\(O(n^2 + n) = O(n^2) \\leftarrow !!\\)\nCrucial to think asymptotically to wrap our heads around this!",
    "crumbs": [
      "Week 3: {{< var w03.date-md >}}"
    ]
  },
  {
    "objectID": "w03/index.html#complexity-analysis",
    "href": "w03/index.html#complexity-analysis",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "Complexity Analysis",
    "text": "Complexity Analysis\n\nLet \\(t_i\\) be the number of times the while loop runs, \\(\\widetilde{n} = n - 1\\):\n\n\n\n\n\nCode\nCost\nTimes Run\n\n\n\n\n1\nfor i = 1 to n-1:\n\\(c_1\\)\n\\(\\widetilde{n}\\)\n\n\n2\n¬†¬†key = A[i]\n\\(c_2\\)\n\\(\\widetilde{n}\\)\n\n\n3\n¬†¬†# Insert A[i] into sorted subarray A[0:i-1]\n\\(0\\)\n\\(\\widetilde{n}\\)\n\n\n4\n¬†¬†j = i - 1\n\\(c_4\\)\n\\(\\widetilde{n}\\)\n\n\n5\n¬†¬†while j &gt;= 0 and A[j] &gt; key:\n\\(c_5\\)\n\\(\\sum_{i=2}^n t_i\\)\n\n\n6\n¬†¬†¬†¬†A[j + 1] = A[j]\n\\(c_6\\)\n\\(\\sum_{i=2}^n(t_i - 1)\\)\n\n\n7\n¬†¬†¬†¬†j = j - 1\n\\(c_7\\)\n\\(\\sum_{i=2}^n(t_i - 1)\\)\n\n\n8\n¬†¬†A[j + 1] = key\n\\(c_8\\)\n\\(\\widetilde{n}\\)\n\n\n\n\\[\nT(n) = c_1\\widetilde{n} + c_2\\widetilde{n} + c_4\\widetilde{n} + c_5\\sum_{i=2}^nt_i + c_6\\sum_{i=2}^n(t_i - 1) + c_7\\sum_{i=2}^n(t_i-1) + c_8\\widetilde{n}\n\\]",
    "crumbs": [
      "Week 3: {{< var w03.date-md >}}"
    ]
  },
  {
    "objectID": "w03/index.html#simplifying",
    "href": "w03/index.html#simplifying",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "Simplifying",
    "text": "Simplifying\n\nThe original, scary-looking equation:\n\n\\[\nT(n) = c_1n + c_2\\widetilde{n} + c_4\\widetilde{n} + c_5{\\color{orange}\\boxed{\\color{black}\\sum_{i=2}^nt_i}} + c_6{\\color{lightblue}\\boxed{\\color{black}\\sum_{i=2}^n(t_i - 1)}} + c_7{\\color{lightblue}\\boxed{\\color{black}\\sum_{i=2}^n(t_i-1)}} + c_8\\widetilde{n}\n\\]\n\nBut \\(\\sum_{i=1}^ni = \\frac{n(n+1)}{2}\\), so:\n\n\\[\n\\begin{align*}\n{\\color{orange}\\boxed{\\color{black}\\sum_{i=2}^ni}} &= \\sum_{i=1}^ni - \\sum_{i=1}^1i = \\frac{n(n+1)}{2} - 1 \\\\\n{\\color{lightblue}\\boxed{\\color{black}\\sum_{i=2}^n(i-1)}} &= \\sum_{i=1}^{n-1}i = \\frac{(n-1)(n-1+1)}{2} = \\frac{n(n-1)}{2}\n\\end{align*}\n\\]\n\nAnd the scary-looking equation simplifies to\n\n\\[\n\\begin{align*}\nT(n) = &{\\color{gray}\\left(\\frac{c_5}{2} + \\frac{c_6}{2} + \\frac{c_7}{2}\\right)}{\\color{green}n^2} + {\\color{gray}\\left(c_1 + c_2 + c_4 + \\frac{c_5}{2} - \\frac{c_6}{2} - \\frac{c_7}{2} + c_8\\right)}{\\color{green}n^1} \\\\\n\\phantom{T(n) = }& - {\\color{gray}(c_2 + c_4 + c_5 + c_8)}{\\color{green}n^0}\n\\end{align*}\n\\]",
    "crumbs": [
      "Week 3: {{< var w03.date-md >}}"
    ]
  },
  {
    "objectID": "w03/index.html#remember-asymptotic-analysis",
    "href": "w03/index.html#remember-asymptotic-analysis",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "Remember: Asymptotic Analysis!",
    "text": "Remember: Asymptotic Analysis!\n\nIt still looks pretty messy, but remember: we care about efficiency as a function of \\(n\\)!\n\n\\[\n\\begin{align*}\nT(n) = &\\underbrace{{\\color{gray}\\left(\\frac{c_5}{2} + \\frac{c_6}{2} + \\frac{c_7}{2}\\right)}}_{\\text{Constant}}\\underbrace{\\phantom{(}{\\color{green}n^2}\\phantom{)}}_{\\text{Quadratic}} \\\\\n\\phantom{T(n) = }&+ \\underbrace{{\\color{gray}\\left(c_1 + c_2 + c_4 + \\frac{c_5}{2} - \\frac{c_6}{2} - \\frac{c_7}{2} + c_8\\right)}}_{\\text{Constant}}\\underbrace{\\phantom{(}{\\color{green}n^1}\\phantom{)}}_{\\text{Linear}} \\\\\n\\phantom{T(n) = }& - \\underbrace{{\\color{gray}(c_2 + c_4 + c_5 + c_8)}}_{\\text{Constant}}\\underbrace{{\\color{green}n^0}}_{\\text{Constant}}\n\\end{align*}\n\\]\n\nSo, there‚Äôs a sense in which \\(T(n) \\approx n^2\\), for ‚Äúsufficiently large‚Äù values of \\(n\\)‚Ä¶\nLet‚Äôs work our way towards formalizing the \\(\\approx\\)!",
    "crumbs": [
      "Week 3: {{< var w03.date-md >}}"
    ]
  },
  {
    "objectID": "w03/index.html#the-figure-you-should-make-in-your-brain-every-time",
    "href": "w03/index.html#the-figure-you-should-make-in-your-brain-every-time",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "The Figure You Should Make In Your Brain Every Time",
    "text": "The Figure You Should Make In Your Brain Every Time\n\n\nCode\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nn_vals = [np.power(10, k) for k in np.arange(1, 2.75, 0.25)]\nruntime_df = pd.DataFrame({'$n$': n_vals})\nruntime_df['$n^2 + 50n$'] = runtime_df['$n$'].apply(lambda x: np.power(x, 2) + 50*x)\nruntime_df['$n^2 + 10000$'] = runtime_df['$n$'].apply(lambda x: np.power(x, 2) + 10000)\nruntime_df['$O(n)$'] = runtime_df['$n$'].copy()\nruntime_df['$O(nlogn)$'] = runtime_df['$n$'].apply(lambda x: x * np.log(x))\nruntime_df['$O(n^2)$'] = runtime_df['$n$'].apply(lambda x: np.power(x, 2))\nruntime_df['$O(n^2logn)$'] = runtime_df['$n$'].apply(lambda x: np.power(x,2) * np.log(x))\nruntime_df['$O(n^3)$'] = runtime_df['$n$'].apply(lambda x: np.power(x, 3))\nruntime_df['$O(n^3logn)$'] = runtime_df['$n$'].apply(lambda x: np.power(x, 3) * np.log(x))\n# Get the max values, for labeling the ends of lines\nmax_vals = runtime_df.max().to_dict()\nplot_df = runtime_df.melt(id_vars=['$n$'])\n#print(plot_df)\nstyle_map = {col: '' if (col == '$n^2 + 50n$') or (col == '$n^2 + 10000$') else (2,1) for col in runtime_df.columns}\nfig, ax = plt.subplots(figsize=(11,5))\nsns.lineplot(plot_df, x='$n$', y='value', hue='variable', style='variable', dashes=style_map)\n#plt.xscale('log')\nplt.yscale('log')\n# extract the existing handles and labels\nh, l = ax.get_legend_handles_labels()\n# slice the appropriate section of l and h to include in the legend\nax.legend(h[0:2], l[0:2])\nfor label, val in max_vals.items():\n  if (label == '$n$') or (label == '$n^2 + 50n$') or (label == '$n^2 + 10000$'):\n    continue\n  if 'logn' in label:\n    label = label.replace('logn', r'\\log(n)')\n  ax.text(x = max_vals['$n$'] + 2, y = val, s=label, va='center')\n# Hide the right and top spines\nax.spines[['right', 'top']].set_visible(False)\nplt.show()\n\n\n\n\n\n\n\n\n\n\nTakeaway: As \\(n \\rightarrow \\infty\\), highest-degree terms dominate!",
    "crumbs": [
      "Week 3: {{< var w03.date-md >}}"
    ]
  },
  {
    "objectID": "w03/index.html#constants-on-highest-degree-terms-also-go-away",
    "href": "w03/index.html#constants-on-highest-degree-terms-also-go-away",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "Constants On Highest-Degree Terms Also Go Away",
    "text": "Constants On Highest-Degree Terms Also Go Away\n\n(Though this is harder to see, without a log-log plot:)\n\n\n\nCode\nn_vals = [np.power(10, k) for k in np.arange(1, 6, 0.5)]\nrt_const_df = pd.DataFrame({'$n$': n_vals})\nrt_const_df['$20n^2$'] = rt_const_df['$n$'].apply(lambda x: 20*np.power(x,2))\nrt_const_df['$n^2$'] = rt_const_df['$n$'].apply(lambda x: np.power(x,2))\nrt_const_df['$n^2logn$'] = rt_const_df['$n$'].apply(lambda x: np.power(x,2) * np.power(np.log(x),2))\nrt_const_df['$n^3$'] = rt_const_df['$n$'].apply(lambda x: np.power(x,3))\n# Get the max values, for labeling the ends of lines\nmax_vals = rt_const_df.max().to_dict()\nplot_df_const = rt_const_df.melt(id_vars=['$n$'])\nstyle_map = {col: '' if (col == '$20n^2$') else (2,1) for col in rt_const_df.columns}\nfig_const, ax_const = plt.subplots(figsize=(11,5))\nsns.lineplot(plot_df_const, x='$n$', y='value', hue='variable', style='variable', dashes=style_map)\nplt.xscale('log')\nplt.yscale('log')\n# extract the existing handles and labels\nh_const, l_const = ax_const.get_legend_handles_labels()\n# slice the appropriate section of l and h to include in the legend\nax_const.legend(h_const[0:1], l_const[0:1])\nfor label, val in max_vals.items():\n  if (label == '$n$') or (label == '$20n^2$'):\n    continue\n  if 'logn' in label:\n    label = label.replace('logn', r'\\log(n)')\n  ax_const.text(x = max_vals['$n$'] + 10**4, y = val, s=label, va='center')\n# Hide the right and top spines\nax_const.spines[['right', 'top']].set_visible(False)\nplt.show()",
    "crumbs": [
      "Week 3: {{< var w03.date-md >}}"
    ]
  },
  {
    "objectID": "w03/index.html#formalizing-big-o-notation",
    "href": "w03/index.html#formalizing-big-o-notation",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "Formalizing Big-O Notation",
    "text": "Formalizing Big-O Notation\n\nLet \\(f, g: \\mathbb{N} \\rightarrow \\mathbb{N}\\). Then we write \\(f(n) = \\overline{O}(g(n))\\) when there exists a threshold \\(n_0 &gt; 0\\) and constant \\(K &gt; 0\\) s.t. \\[\n\\forall n \\geq n_0 \\left[ f(n) \\leq K\\cdot g(n) \\right]\n\\]\nIn words:\n\n‚ÄúEventually‚Äù, beyond a certain point \\(n_0\\),\n\\(f(n)\\) is bounded above by \\(K\\cdot g(n)\\).\n\nDefinition from Savage (1998, pg. 13)",
    "crumbs": [
      "Week 3: {{< var w03.date-md >}}"
    ]
  },
  {
    "objectID": "w03/index.html#intuition-rightarrow-proof",
    "href": "w03/index.html#intuition-rightarrow-proof",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "Intuition \\(\\rightarrow\\) Proof",
    "text": "Intuition \\(\\rightarrow\\) Proof\n\nUsing this definition, we can now prove \\(f(n) = n^2 + 50n = \\overline{O}(n^2)\\)!\nHere \\(f(n) = n^2 + 50n\\), \\(g(n) = n^2\\)\nTheorem: \\(\\exists \\; n_0 \\; \\text{ s.t. } \\forall n \\geq n_0 \\left[ n^2 + 50n \\leq Kn^2 \\right]\\)\nProof: Let \\(K = 50\\). Then \\[\n\\begin{align*}\n&n^2 + 50n \\leq 50n^2 \\iff n + 50 \\leq 50n \\\\\n&\\iff 49n \\geq 50 \\iff n \\geq \\frac{50}{49}.\n\\end{align*}\n\\]\nSo if we choose \\(n_0 = 2\\), the chain of statements holds. \\(\\blacksquare\\)",
    "crumbs": [
      "Week 3: {{< var w03.date-md >}}"
    ]
  },
  {
    "objectID": "w03/index.html#bounding-insertion-sort-runtime",
    "href": "w03/index.html#bounding-insertion-sort-runtime",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "Bounding Insertion Sort Runtime",
    "text": "Bounding Insertion Sort Runtime\n\nRuns in \\(T(n) = \\overline{O}(n^2)\\) (use constants from prev slide)\nCan similarly define lower bound \\(T(n) = \\Omega(f(n))\\)\n\n\\(\\overline{O}\\) = ‚ÄúBig-Oh‚Äù, \\(\\Omega\\) = ‚ÄúBig-Omega‚Äù\n\nFinal definition (+theorem you can prove!): \\(\\Theta\\) = ‚ÄúBig-Theta‚Äù\n\nIf \\(T(n) = \\overline{O}(g(n))\\) and \\(T(n) = \\Omega(g(n))\\)\nThen \\(T(n) = \\Theta(n)\\)\n\n\\(\\Rightarrow\\) most ‚Äúinformative‚Äù way to characterize Insertion-Sort is \\(\\boxed{T(n) = \\Theta(n^2)}\\)\n\nTells us: it won‚Äôt do worse, but won‚Äôt do better, than \\(n^2\\)",
    "crumbs": [
      "Week 3: {{< var w03.date-md >}}"
    ]
  },
  {
    "objectID": "w03/index.html#doing-better-than-insertion-sort",
    "href": "w03/index.html#doing-better-than-insertion-sort",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "Doing Better Than Insertion Sort",
    "text": "Doing Better Than Insertion Sort\n\nIntuition Break ü•≥: Finding a word in a dictionary! dsan.io/dict-lookup\nInsertion-Sort \\(\\in\\) Linear Algorithms\n\n(Linear Algorithms \\(\\subset\\) Linear Things)\n\nMerge-Sort \\(\\in\\) Logarithmic Algorithms\n\n(Logarithmic Algorithms \\(\\subset\\) Logarithmic Things)",
    "crumbs": [
      "Week 3: {{< var w03.date-md >}}"
    ]
  },
  {
    "objectID": "w03/index.html#how-can-merge-sort-work-that-much-better",
    "href": "w03/index.html#how-can-merge-sort-work-that-much-better",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "How Can Merge Sort Work That Much Better!?",
    "text": "How Can Merge Sort Work That Much Better!?\n\nWith the linear approach, each time we check a word and it‚Äôs not our word we eliminate‚Ä¶ one measly word üòû\nBut with the divide-and-conquer approach‚Ä¶ we eliminate üî•HALF OF THE REMAINING WORDSüî•",
    "crumbs": [
      "Week 3: {{< var w03.date-md >}}"
    ]
  },
  {
    "objectID": "w03/index.html#merge-merging-two-sorted-lists-in-on-time",
    "href": "w03/index.html#merge-merging-two-sorted-lists-in-on-time",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "Merge: Merging Two Sorted Lists in \\(O(n)\\) Time",
    "text": "Merge: Merging Two Sorted Lists in \\(O(n)\\) Time\n\n\n\nFrom Cormen et al. (2001), pg. 37",
    "crumbs": [
      "Week 3: {{< var w03.date-md >}}"
    ]
  },
  {
    "objectID": "w03/index.html#merge-sort-merge-as-subroutine",
    "href": "w03/index.html#merge-sort-merge-as-subroutine",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "Merge Sort (Merge as Subroutine)",
    "text": "Merge Sort (Merge as Subroutine)\n\n\n\nFrom Cormen et al. (2001), pg. 40",
    "crumbs": [
      "Week 3: {{< var w03.date-md >}}"
    ]
  },
  {
    "objectID": "w03/index.html#complexity-analysis-1",
    "href": "w03/index.html#complexity-analysis-1",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "Complexity Analysis",
    "text": "Complexity Analysis\n\nHard way: re-do the line-by-line analysis we did for Insertion-Sort üò£ Easy way: stand on shoulders of giants!\nUsing a famous+fun theorem (the Master Theorem): Given a recurrence \\(T(n) = aT(n/b) + f(n)\\), compute its:\n\nWatershed function \\(W(n) = n^{\\log_b(a)}\\) and\nDriving function \\(D(n) = f(n)\\)\n\nThe Master Theorem gives closed-form asymptotic solution for \\(T(n)\\), split into three cases:\n(1) \\(W(n)\\) grows faster than \\(D(n)\\), (2) grows at same rate as \\(D(n)\\), or (3) grows slower than \\(D(n)\\)",
    "crumbs": [
      "Week 3: {{< var w03.date-md >}}"
    ]
  },
  {
    "objectID": "w03/index.html#bounding-the-runtime-of-merge-sort",
    "href": "w03/index.html#bounding-the-runtime-of-merge-sort",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "Bounding the Runtime of Merge Sort",
    "text": "Bounding the Runtime of Merge Sort\n\nHow about Merge-Sort? \\(T(n) = 2T(n/2) + \\Theta(n)\\)\n\n\\(a = b = 2\\), \\(W(n) = n^{\\log_2(2)} = n\\), \\(D(n) = \\Theta(n)\\)\n\n\\(W(n)\\) and \\(D(n)\\) grow at same rate \\(\\implies\\) Case 2:\n\n\n\n\n\n\nApplying the Master Theorem When \\(W(n) = \\Theta(D(n))\\) (Case 2)\n\n\n\n\nIs there a \\(k \\geq 0\\) satisfying \\(D(n) = \\Theta(n^{\\log_b(a)}\\log_2^k(n))\\)?\nIf so, your solution is \\(T(n) = \\Theta(n^{\\log_b(a)}\\log_2^{k+1}(n))\\)\n\n\n\nMerge-Sort: \\(k = 0\\) works! \\(\\Theta(n^{\\log_2(2)}\\log_2^0(n)) = \\Theta(n)\\)\nThus \\(T(n) = \\Theta(n^{\\log_b(a)}\\log_2^{k+1}(n)) = \\boxed{\\Theta(n\\log_2n)}\\) üòé",
    "crumbs": [
      "Week 3: {{< var w03.date-md >}}"
    ]
  },
  {
    "objectID": "w03/index.html#references",
    "href": "w03/index.html#references",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "References",
    "text": "References\n\n\nCormen, Thomas H., Charles E. Leiserson, Ronald L. Rivest, and Clifford Stein. 2001. Introduction To Algorithms. MIT Press.\n\n\nSavage, John E. 1998. Models of Computation: Exploring the Power of Computing. Addison-Wesley.",
    "crumbs": [
      "Week 3: {{< var w03.date-md >}}"
    ]
  },
  {
    "objectID": "w03/index.html#appendix-1-intuition-for-lower-bound",
    "href": "w03/index.html#appendix-1-intuition-for-lower-bound",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "Appendix 1: Intuition for Lower Bound",
    "text": "Appendix 1: Intuition for Lower Bound\n\nSpoiler: Insertion sort also runs in \\(T(n) = \\Omega(n^2)\\) time. How could we prove this?\nGiven any value \\(n &gt; n_0\\), we need to construct an input for which Insertion-Sort requires \\(cn^2\\) steps: consider a list where \\(n/3\\) greatest values are in first \\(n/3\\) slots:\n\n\n\n\nAll \\(n/3\\) values in \\(\\textrm{L}\\) pass, one-by-one, through the \\(n/3\\) slots in \\(\\textrm{M}\\) (since they must end up in \\(\\textrm{R}\\)) \\(\\implies (n/3)(n/3) = n^2/9 = \\Omega(n^2)\\) steps!\n\n\n\nFinal definition (a theorem you could prove if you want!): \\(\\Theta\\) = ‚ÄúBig-Theta‚Äù\n\nIf \\(T(n) = \\overline{O}(g(n))\\) and \\(T(n) = \\Omega(g(n))\\), then \\(T(n) = \\Theta(n)\\)\n\n\\(\\implies\\) most ‚Äúinformative‚Äù way to characterize insertion sort is \\(\\boxed{T(n) = \\Theta(n^2)}\\)",
    "crumbs": [
      "Week 3: {{< var w03.date-md >}}"
    ]
  },
  {
    "objectID": "w03/index.html#appendix-2-being-precise-about-worst-case",
    "href": "w03/index.html#appendix-2-being-precise-about-worst-case",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "Appendix 2: Being Precise About ‚ÄúWorst-Case‚Äù",
    "text": "Appendix 2: Being Precise About ‚ÄúWorst-Case‚Äù\nNeed to be careful with \\(O(f(n))\\) vs.¬†\\(\\Omega(f(n))\\) however: difference between ‚Äúfor all inputs‚Äù vs.¬†‚Äúfor some inputs‚Äù:\n\n\n\n\n\n\nBounding Worst-Case Runtime\n\n\n\nBy saying that the worst-case running time of an algorithm is \\(\\Omega(n^2)\\), we mean that for every input size \\(n\\) above a certain threshold, there is at least one input of size \\(n\\) for which the algorithm takes at least \\(cn^2\\) time, for some positive constant \\(n\\). It does not necessarily mean that the algorithm takes at least \\(cn^2\\) time for all inputs.",
    "crumbs": [
      "Week 3: {{< var w03.date-md >}}"
    ]
  },
  {
    "objectID": "w03/index.html#appendix-3-the-full-master-theorem",
    "href": "w03/index.html#appendix-3-the-full-master-theorem",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "Appendix 3: The Full Master Theorem",
    "text": "Appendix 3: The Full Master Theorem\nMaster Theorem: Let \\(a &gt; 0\\) and \\(b &gt; 1\\) be constants, and let \\(f(n)\\) be a driving function defined and nonnegative on all sufficiently large reals. Define \\(T(n)\\) on \\(n \\in \\mathbb{N}\\) by\n\\[\nT(n) = aT(n/b) + f(n)\n\\]\nwhere \\(aT(n/b) = a'T(\\lfloor n/b \\rfloor) + a''T(\\lceil n/b \\rceil)\\) for some \\(a' \\geq 0\\) and \\(a'' \\geq 0\\) satisfying \\(a = a' + a''\\). Then the asymptotic behavior of \\(T(n)\\) can be characterized as follows:\n\nIf there exists \\(\\epsilon &gt; 0\\) such that \\(f(n) = O(n^{\\log_b(a) - \\epsilon})\\), then \\(T(n) = \\Theta(n^{\\log_b(a)})\\)\nIf there exists \\(k \\geq 0\\) such that \\(f(n) = \\Theta(n^{\\log_b(a)}\\log_2^k(n))\\), then \\(T(n) = \\Theta(n^{\\log_b(a)}\\log_2^{k+1}(n))\\).\nIf there exists \\(\\epsilon &gt; 0\\) such that \\(f(n) = \\Omega(n^{\\log_b(a) + \\epsilon})\\), and if \\(f(n)\\) satisfies the regularity condition \\(af(n/b) \\leq cf(n)\\) for some constant \\(c &lt; 1\\) and all sufficiently large \\(n\\), then \\(T(n) = \\Theta(f(n))\\).\n\n\nProof. See Cormen et al. (2001), pg. 107-114.\n\n(‚Üê Back to Merge Sort slides)",
    "crumbs": [
      "Week 3: {{< var w03.date-md >}}"
    ]
  },
  {
    "objectID": "w03/slides.html#why-cant-we-learn-data-structures-and-algorithms-separately",
    "href": "w03/slides.html#why-cant-we-learn-data-structures-and-algorithms-separately",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "Why Can‚Äôt We Learn Data Structures and Algorithms Separately?",
    "text": "Why Can‚Äôt We Learn Data Structures and Algorithms Separately?\n\nData Structure Choice \\(\\Leftrightarrow\\) Algorithmic Efficiency for Task\nQuestion: ‚ÄúIs this algorithm efficient?‚Äù\nAnswer: ‚Äú‚Ä¶Efficient for what?‚Äù\nDo we need to be able to insert quickly?\nDo we need to be able to sort quickly?\nDo we need to be able to search quickly?\nAre we searching for individual items or for ranges?"
  },
  {
    "objectID": "w03/slides.html#recall-primitives",
    "href": "w03/slides.html#recall-primitives",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "Recall: Primitives",
    "text": "Recall: Primitives\n\nbool\nint\nfloat\nNone\nNow we want to put these together, to form‚Ä¶ structures! üëÄ\nStructures are the things that live in the heap; the stack just points to them"
  },
  {
    "objectID": "w03/slides.html#tuples",
    "href": "w03/slides.html#tuples",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "Tuples",
    "text": "Tuples\n\nFixed-size collection of \\(N\\) objects\nUnless otherwise specified, we‚Äôre talking about \\(2\\)-tuples\nExample: We can locate something on the Earth by specifying two floats: latitude and longitude!\n\n\nCode\ngtown_loc = (38.9076, -77.0723)\ngtown_loc\n\n\n(38.9076, -77.0723)\n\n\nBut what if we don‚Äôt know in advance how many items we want to store? Ex: how can we store users for a new app?"
  },
  {
    "objectID": "w03/slides.html#sequences",
    "href": "w03/slides.html#sequences",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "Sequences",
    "text": "Sequences\n\nIn General: Mapping of integer indices to objects\nx = ['a','b','c']\n\n\\(\\implies\\) x[0] = 'a'\n\\(\\implies\\) x[1] = 'b'\n\\(\\implies\\) x[2] = 'c'\n\nIn Python: list\nNice built-in language constructs for looping over lists, and especially for performing operations on each element"
  },
  {
    "objectID": "w03/slides.html#looping-over-sequences",
    "href": "w03/slides.html#looping-over-sequences",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "Looping Over Sequences",
    "text": "Looping Over Sequences\n\n\n\nC/C++/Java:\n\nList&lt;String&gt; myList = Arrays.asList(\"a\", \"b\", \"c\");\nfor (int i = 0; i &lt; x.size(); i++) {\n    System.out.println(myList.get(i));\n}\na\nb\nc\n\n\n\nPython:\n\n\n\nCode\nmy_list = ['a','b','c']\nfor list_element in my_list:\n  print(list_element)\n\n\na\nb\nc"
  },
  {
    "objectID": "w03/slides.html#list-comprehensions-apply-operation-to-each-element",
    "href": "w03/slides.html#list-comprehensions-apply-operation-to-each-element",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "List Comprehensions: Apply [Operation] to Each Element",
    "text": "List Comprehensions: Apply [Operation] to Each Element\n\nConstruct new list by applying operation to each element:\n\n\nCode\nmy_nums = [4,5,6,7]\nmy_squares = [num ** 2 for num in my_nums]\nmy_squares\n\n\n[16, 25, 36, 49]\n\n\nCan also filter the elements of the list with if:\n\n\nCode\nmy_odd_squares = [num ** 2 for num in my_nums if num % 2 == 1]\nmy_odd_squares\n\n\n[25, 49]"
  },
  {
    "objectID": "w03/slides.html#sets",
    "href": "w03/slides.html#sets",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "Sets",
    "text": "Sets\n\n\nEfficient for finding unique elements:\n\nprefs_morn = [\n  'None','None','None','Vegan','Vegan','None',\n  'Gluten Free'\n]\nprint(f\"Number of responses: {len(prefs_morn)}\")\n\nNumber of responses: 7\n\n\n\nunique_prefs_morn = set(prefs_morn)\nprint(f\"Unique preferences: {unique_prefs_morn}\")\nprint(f\"Number of unique preferences: {len(unique_prefs_morn)}\")\n\nUnique preferences: {'Gluten Free', 'None', 'Vegan'}\nNumber of unique preferences: 3\n\n\nOrdering / indexing of elements is gone!\n\nunique_prefs_morn[2]\n\n\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\nCell In[7], line 1\n----&gt; 1 unique_prefs_morn[2]\n\nTypeError: 'set' object is not subscriptable\n\n\n\nBut, supports set operators from math! ‚Üí\n\nUnion (\\(M \\cup E\\)):\n\nprefs_eve = [\n  'None','None','Vegan','None','None'\n]\nunique_prefs_eve = set(prefs_eve)\nunique_prefs_either = unique_prefs_morn.union(unique_prefs_eve)\nprint(f\"Preferences in either event: {unique_prefs_either}\")\n\nPreferences in either event: {'None', 'Vegan', 'Gluten Free'}\n\n\nIntersection (\\(M \\cap E\\)):\n\nunique_prefs_both = unique_prefs_morn.intersection(unique_prefs_eve)\nprint(f\"Preferences in both events: {unique_prefs_both}\")\n\nPreferences in both events: {'None', 'Vegan'}\n\n\nSet Difference (\\(M \\setminus E\\) or \\(E \\setminus M\\)):\n\nunique_prefs_mornonly = unique_prefs_morn - unique_prefs_eve\nprint(f\"Preferences only in the morning: {unique_prefs_mornonly}\")\nunique_prefs_eveonly = unique_prefs_eve - unique_prefs_morn\nprint(f\"Preferences only in the evening: {unique_prefs_eveonly}\")\n\nPreferences only in the morning: {'Gluten Free'}\nPreferences only in the evening: set()"
  },
  {
    "objectID": "w03/slides.html#maps-dictionaries",
    "href": "w03/slides.html#maps-dictionaries",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "Maps / Dictionaries",
    "text": "Maps / Dictionaries\n\n\nWhile other language like Java have lots of fancy types of Map, Python has a single type, the dictionary:\n\n\nCode\ngtown_data = {\n  'name': 'Georgetown University',\n  'founded': 1789,\n  'coordinates': (38.9076, -77.0723),\n  'location': {\n    'city': 'Washington',\n    'state': 'DC', # &lt;__&lt;\n    'country': 'USA'\n  }\n}\nprint(gtown_data.keys())\nprint(gtown_data.values())\n\n\ndict_keys(['name', 'founded', 'coordinates', 'location'])\ndict_values(['Georgetown University', 1789, (38.9076, -77.0723), {'city': 'Washington', 'state': 'DC', 'country': 'USA'}])\n\n\n\nBe careful when looping! Default behavior is iteration over keys:\n\n\nCode\nfor k in gtown_data:\n  print(k)\n\n\nname\nfounded\ncoordinates\nlocation\n\n\nFor key-value pairs use .items():\n\n\nCode\nfor k, v in gtown_data.items():\n  print(f\"{k}: {v}\")\n\n\nname: Georgetown University\nfounded: 1789\ncoordinates: (38.9076, -77.0723)\nlocation: {'city': 'Washington', 'state': 'DC', 'country': 'USA'}"
  },
  {
    "objectID": "w03/slides.html#looking-under-the-hood-of-a-data-structure",
    "href": "w03/slides.html#looking-under-the-hood-of-a-data-structure",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "Looking Under the Hood of a Data Structure",
    "text": "Looking Under the Hood of a Data Structure\n\nLast week we saw the math for why we can ‚Äúabstract away from‚Äù the details of how a particular language works\nWe want to understand these structures independently of the specifics of their implementation in Python (for now)\nSo, let‚Äôs construct our own simplified versions of the basic structures, and use these simplified versions to get a sense for their efficiency\n\n(The ‚Äútrue‚Äù Python versions may be hyper-optimized but, as we‚Äôll see, there are fundamental constraints on runtime, assuming \\(P \\neq NP\\))"
  },
  {
    "objectID": "w03/slides.html#tuples-1",
    "href": "w03/slides.html#tuples-1",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "Tuples",
    "text": "Tuples\n\n\nCode\nclass MyTuple:\n  def __init__(self, thing1, thing2):\n    self.thing1 = thing1\n    self.thing2 = thing2\n\n  def __repr__(self):\n    return f\"({self.thing1}, {self.thing2})\"\n\n  def __str__(self):\n    return self.__repr__()\n\nt1 = MyTuple('a','b')\nt2 = MyTuple(111, 222)\nprint(t1)\nprint(t2)\n\n\n(a, b)\n(111, 222)"
  },
  {
    "objectID": "w03/slides.html#lists",
    "href": "w03/slides.html#lists",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "Lists",
    "text": "Lists\n\n\nThe list itself just points to a root item:\n\n\nCode\nclass MyList:\n  def __init__(self):\n    self.root = None\n\n  def append(self, new_item):\n    if self.root is None:\n      self.root = MyListItem(new_item)\n    else:\n      self.root.append(new_item)\n\n  def __repr__(self):\n    return self.root.__repr__()\n\n\n\nAn item has contents, pointer to next item:\n\n\nCode\nclass MyListItem:\n  def __init__(self, content):\n    self.content = content\n    self.next = None\n\n  def append(self, new_item):\n    if self.next is None:\n      self.next = MyListItem(new_item)\n    else:\n      self.next.append(new_item)\n\n  def __repr__(self):\n    my_content = self.content\n    return my_content if self.next is None else f\"{my_content}, {self.next.__repr__()}\"\n\n\n\n\n\nCode\nusers = MyList()\nusers.append('Jeff')\nusers.append('Alma')\nusers.append('Bo')\nprint(users)\n\n\nJeff, Alma, Bo"
  },
  {
    "objectID": "w03/slides.html#so-how-many-steps-are-required",
    "href": "w03/slides.html#so-how-many-steps-are-required",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "So, How Many ‚ÄúSteps‚Äù Are Required‚Ä¶",
    "text": "So, How Many ‚ÄúSteps‚Äù Are Required‚Ä¶\n\nTo retrieve the first element in a MyTuple?\nTo retrieve the last element in a MyTuple?\nTo retrieve the first element in a MyList?\nTo retrieve the last element in a MyList?"
  },
  {
    "objectID": "w03/slides.html#how-many-steps",
    "href": "w03/slides.html#how-many-steps",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "How Many Steps?",
    "text": "How Many Steps?\n\n\nWith a MyTuple:\n\n\nCode\nt1.thing1\n\n\n'a'\n\n\n\\(\\implies\\) 1 step\n\n\nCode\nt1.thing2\n\n\n'b'\n\n\n\\(\\implies\\) 1 step\n\nWith a MyList:\n\n\nCode\nprint(users.root.content)\n\n\nJeff\n\n\n\\(\\implies\\) 1 step\n\n\nCode\ncurrent_node = users.root\nwhile current_node.next is not None:\n  current_node = current_node.next\nprint(current_node.content)\n\n\nBo\n\n\n\\(\\implies\\) (3 steps)\n‚Ä¶But why 3? How many steps if the list contained 5 elements? \\(N\\) elements?"
  },
  {
    "objectID": "w03/slides.html#pairwise-concatenating-list-elements",
    "href": "w03/slides.html#pairwise-concatenating-list-elements",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "Pairwise-Concatenating List Elements",
    "text": "Pairwise-Concatenating List Elements\n\nNow rather than just printing, let‚Äôs pairwise concatenate:\n\n\nCode\ncur_pointer1 = users.root\nwhile cur_pointer1 is not None:\n  cur_pointer2 = users.root\n  while cur_pointer2 is not None:\n    print(cur_pointer1.content + cur_pointer2.content)\n    cur_pointer2 = cur_pointer2.next\n  cur_pointer1 = cur_pointer1.next\n\n\nJeffJeff\nJeffAlma\nJeffBo\nAlmaJeff\nAlmaAlma\nAlmaBo\nBoJeff\nBoAlma\nBoBo\n\n\nHow many steps did this take? How about for a list with \\(5\\) elements? \\(N\\) elements?"
  },
  {
    "objectID": "w03/slides.html#last-example-pairwise-concat-end-check",
    "href": "w03/slides.html#last-example-pairwise-concat-end-check",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "Last Example: Pairwise-Concat + End Check",
    "text": "Last Example: Pairwise-Concat + End Check\n\n\nCode\nprinted_items = []\ncur_pointer1 = users.root\nwhile cur_pointer1 is not None:\n  cur_pointer2 = users.root\n  while cur_pointer2 is not None:\n    print(cur_pointer1.content + cur_pointer2.content)\n    printed_items.append(cur_pointer1.content)\n    printed_items.append(cur_pointer2.content)\n    cur_pointer2 = cur_pointer2.next\n  cur_pointer1 = cur_pointer1.next\ncheck_pointer = users.root\nwhile check_pointer is not None:\n  if check_pointer.content in printed_items:\n    print(f\"Phew. {check_pointer.content} printed at least once.\")\n  else:\n    print(f\"Oh no! {check_pointer.content} was never printed!!!\")\n  check_pointer = check_pointer.next\n\n\nJeffJeff\nJeffAlma\nJeffBo\nAlmaJeff\nAlmaAlma\nAlmaBo\nBoJeff\nBoAlma\nBoBo\nPhew. Jeff printed at least once.\nPhew. Alma printed at least once.\nPhew. Bo printed at least once."
  },
  {
    "objectID": "w03/slides.html#generalizing",
    "href": "w03/slides.html#generalizing",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "Generalizing",
    "text": "Generalizing\n\nAlgorithms are ‚Äúefficient‚Äù relative to how their runtime scales as the objects grow larger and larger!\nTuple operations take 1 step no matter what\nFor lists, retrieving the first element takes 1 step no matter what, but retrieving the last element takes \\(n\\) steps!\nPairwise concatenation requires \\(n^2\\) steps!"
  },
  {
    "objectID": "w03/slides.html#the-complexity-of-our-examples",
    "href": "w03/slides.html#the-complexity-of-our-examples",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "The Complexity of Our Examples",
    "text": "The Complexity of Our Examples\n\nTuple operations: \\(O(1)\\)\nRetrieving the first element of a list: \\(O(1)\\)\nRetrieving the last element of a list: \\(O(n)\\)\nPairwise concatenation: \\(O(n^2)\\)\nPairwise concatenation+check: \\(O(n^2 + n) = O(n^2) \\leftarrow !!\\)\nCrucial to think asymptotically to wrap our heads around this!"
  },
  {
    "objectID": "w03/slides.html#complexity-analysis",
    "href": "w03/slides.html#complexity-analysis",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "Complexity Analysis",
    "text": "Complexity Analysis\n\nLet \\(t_i\\) be the number of times the while loop runs, \\(\\widetilde{n} = n - 1\\):\n\n\n\n\n\nCode\nCost\nTimes Run\n\n\n\n\n1\nfor i = 1 to n-1:\n\\(c_1\\)\n\\(\\widetilde{n}\\)\n\n\n2\n¬†¬†key = A[i]\n\\(c_2\\)\n\\(\\widetilde{n}\\)\n\n\n3\n¬†¬†# Insert A[i] into sorted subarray A[0:i-1]\n\\(0\\)\n\\(\\widetilde{n}\\)\n\n\n4\n¬†¬†j = i - 1\n\\(c_4\\)\n\\(\\widetilde{n}\\)\n\n\n5\n¬†¬†while j &gt;= 0 and A[j] &gt; key:\n\\(c_5\\)\n\\(\\sum_{i=2}^n t_i\\)\n\n\n6\n¬†¬†¬†¬†A[j + 1] = A[j]\n\\(c_6\\)\n\\(\\sum_{i=2}^n(t_i - 1)\\)\n\n\n7\n¬†¬†¬†¬†j = j - 1\n\\(c_7\\)\n\\(\\sum_{i=2}^n(t_i - 1)\\)\n\n\n8\n¬†¬†A[j + 1] = key\n\\(c_8\\)\n\\(\\widetilde{n}\\)\n\n\n\n\\[\nT(n) = c_1\\widetilde{n} + c_2\\widetilde{n} + c_4\\widetilde{n} + c_5\\sum_{i=2}^nt_i + c_6\\sum_{i=2}^n(t_i - 1) + c_7\\sum_{i=2}^n(t_i-1) + c_8\\widetilde{n}\n\\]"
  },
  {
    "objectID": "w03/slides.html#simplifying",
    "href": "w03/slides.html#simplifying",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "Simplifying",
    "text": "Simplifying\n\nThe original, scary-looking equation:\n\n\\[\nT(n) = c_1n + c_2\\widetilde{n} + c_4\\widetilde{n} + c_5{\\color{orange}\\boxed{\\color{black}\\sum_{i=2}^nt_i}} + c_6{\\color{lightblue}\\boxed{\\color{black}\\sum_{i=2}^n(t_i - 1)}} + c_7{\\color{lightblue}\\boxed{\\color{black}\\sum_{i=2}^n(t_i-1)}} + c_8\\widetilde{n}\n\\]\n\nBut \\(\\sum_{i=1}^ni = \\frac{n(n+1)}{2}\\), so:\n\n\\[\n\\begin{align*}\n{\\color{orange}\\boxed{\\color{black}\\sum_{i=2}^ni}} &= \\sum_{i=1}^ni - \\sum_{i=1}^1i = \\frac{n(n+1)}{2} - 1 \\\\\n{\\color{lightblue}\\boxed{\\color{black}\\sum_{i=2}^n(i-1)}} &= \\sum_{i=1}^{n-1}i = \\frac{(n-1)(n-1+1)}{2} = \\frac{n(n-1)}{2}\n\\end{align*}\n\\]\n\nAnd the scary-looking equation simplifies to\n\n\\[\n\\begin{align*}\nT(n) = &{\\color{gray}\\left(\\frac{c_5}{2} + \\frac{c_6}{2} + \\frac{c_7}{2}\\right)}{\\color{green}n^2} + {\\color{gray}\\left(c_1 + c_2 + c_4 + \\frac{c_5}{2} - \\frac{c_6}{2} - \\frac{c_7}{2} + c_8\\right)}{\\color{green}n^1} \\\\\n\\phantom{T(n) = }& - {\\color{gray}(c_2 + c_4 + c_5 + c_8)}{\\color{green}n^0}\n\\end{align*}\n\\]"
  },
  {
    "objectID": "w03/slides.html#remember-asymptotic-analysis",
    "href": "w03/slides.html#remember-asymptotic-analysis",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "Remember: Asymptotic Analysis!",
    "text": "Remember: Asymptotic Analysis!\n\nIt still looks pretty messy, but remember: we care about efficiency as a function of \\(n\\)!\n\n\\[\n\\begin{align*}\nT(n) = &\\underbrace{{\\color{gray}\\left(\\frac{c_5}{2} + \\frac{c_6}{2} + \\frac{c_7}{2}\\right)}}_{\\text{Constant}}\\underbrace{\\phantom{(}{\\color{green}n^2}\\phantom{)}}_{\\text{Quadratic}} \\\\\n\\phantom{T(n) = }&+ \\underbrace{{\\color{gray}\\left(c_1 + c_2 + c_4 + \\frac{c_5}{2} - \\frac{c_6}{2} - \\frac{c_7}{2} + c_8\\right)}}_{\\text{Constant}}\\underbrace{\\phantom{(}{\\color{green}n^1}\\phantom{)}}_{\\text{Linear}} \\\\\n\\phantom{T(n) = }& - \\underbrace{{\\color{gray}(c_2 + c_4 + c_5 + c_8)}}_{\\text{Constant}}\\underbrace{{\\color{green}n^0}}_{\\text{Constant}}\n\\end{align*}\n\\]\n\nSo, there‚Äôs a sense in which \\(T(n) \\approx n^2\\), for ‚Äúsufficiently large‚Äù values of \\(n\\)‚Ä¶\nLet‚Äôs work our way towards formalizing the \\(\\approx\\)!"
  },
  {
    "objectID": "w03/slides.html#the-figure-you-should-make-in-your-brain-every-time",
    "href": "w03/slides.html#the-figure-you-should-make-in-your-brain-every-time",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "The Figure You Should Make In Your Brain Every Time",
    "text": "The Figure You Should Make In Your Brain Every Time\n\n\nCode\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nn_vals = [np.power(10, k) for k in np.arange(1, 2.75, 0.25)]\nruntime_df = pd.DataFrame({'$n$': n_vals})\nruntime_df['$n^2 + 50n$'] = runtime_df['$n$'].apply(lambda x: np.power(x, 2) + 50*x)\nruntime_df['$n^2 + 10000$'] = runtime_df['$n$'].apply(lambda x: np.power(x, 2) + 10000)\nruntime_df['$O(n)$'] = runtime_df['$n$'].copy()\nruntime_df['$O(nlogn)$'] = runtime_df['$n$'].apply(lambda x: x * np.log(x))\nruntime_df['$O(n^2)$'] = runtime_df['$n$'].apply(lambda x: np.power(x, 2))\nruntime_df['$O(n^2logn)$'] = runtime_df['$n$'].apply(lambda x: np.power(x,2) * np.log(x))\nruntime_df['$O(n^3)$'] = runtime_df['$n$'].apply(lambda x: np.power(x, 3))\nruntime_df['$O(n^3logn)$'] = runtime_df['$n$'].apply(lambda x: np.power(x, 3) * np.log(x))\n# Get the max values, for labeling the ends of lines\nmax_vals = runtime_df.max().to_dict()\nplot_df = runtime_df.melt(id_vars=['$n$'])\n#print(plot_df)\nstyle_map = {col: '' if (col == '$n^2 + 50n$') or (col == '$n^2 + 10000$') else (2,1) for col in runtime_df.columns}\nfig, ax = plt.subplots(figsize=(11,5))\nsns.lineplot(plot_df, x='$n$', y='value', hue='variable', style='variable', dashes=style_map)\n#plt.xscale('log')\nplt.yscale('log')\n# extract the existing handles and labels\nh, l = ax.get_legend_handles_labels()\n# slice the appropriate section of l and h to include in the legend\nax.legend(h[0:2], l[0:2])\nfor label, val in max_vals.items():\n  if (label == '$n$') or (label == '$n^2 + 50n$') or (label == '$n^2 + 10000$'):\n    continue\n  if 'logn' in label:\n    label = label.replace('logn', r'\\log(n)')\n  ax.text(x = max_vals['$n$'] + 2, y = val, s=label, va='center')\n# Hide the right and top spines\nax.spines[['right', 'top']].set_visible(False)\nplt.show()\n\n\n\n\n\n\n\n\n\n\nTakeaway: As \\(n \\rightarrow \\infty\\), highest-degree terms dominate!"
  },
  {
    "objectID": "w03/slides.html#constants-on-highest-degree-terms-also-go-away",
    "href": "w03/slides.html#constants-on-highest-degree-terms-also-go-away",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "Constants On Highest-Degree Terms Also Go Away",
    "text": "Constants On Highest-Degree Terms Also Go Away\n\n(Though this is harder to see, without a log-log plot:)\n\n\n\nCode\nn_vals = [np.power(10, k) for k in np.arange(1, 6, 0.5)]\nrt_const_df = pd.DataFrame({'$n$': n_vals})\nrt_const_df['$20n^2$'] = rt_const_df['$n$'].apply(lambda x: 20*np.power(x,2))\nrt_const_df['$n^2$'] = rt_const_df['$n$'].apply(lambda x: np.power(x,2))\nrt_const_df['$n^2logn$'] = rt_const_df['$n$'].apply(lambda x: np.power(x,2) * np.power(np.log(x),2))\nrt_const_df['$n^3$'] = rt_const_df['$n$'].apply(lambda x: np.power(x,3))\n# Get the max values, for labeling the ends of lines\nmax_vals = rt_const_df.max().to_dict()\nplot_df_const = rt_const_df.melt(id_vars=['$n$'])\nstyle_map = {col: '' if (col == '$20n^2$') else (2,1) for col in rt_const_df.columns}\nfig_const, ax_const = plt.subplots(figsize=(11,5))\nsns.lineplot(plot_df_const, x='$n$', y='value', hue='variable', style='variable', dashes=style_map)\nplt.xscale('log')\nplt.yscale('log')\n# extract the existing handles and labels\nh_const, l_const = ax_const.get_legend_handles_labels()\n# slice the appropriate section of l and h to include in the legend\nax_const.legend(h_const[0:1], l_const[0:1])\nfor label, val in max_vals.items():\n  if (label == '$n$') or (label == '$20n^2$'):\n    continue\n  if 'logn' in label:\n    label = label.replace('logn', r'\\log(n)')\n  ax_const.text(x = max_vals['$n$'] + 10**4, y = val, s=label, va='center')\n# Hide the right and top spines\nax_const.spines[['right', 'top']].set_visible(False)\nplt.show()"
  },
  {
    "objectID": "w03/slides.html#formalizing-big-o-notation",
    "href": "w03/slides.html#formalizing-big-o-notation",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "Formalizing Big-O Notation",
    "text": "Formalizing Big-O Notation\n\nLet \\(f, g: \\mathbb{N} \\rightarrow \\mathbb{N}\\). Then we write \\(f(n) = \\overline{O}(g(n))\\) when there exists a threshold \\(n_0 &gt; 0\\) and constant \\(K &gt; 0\\) s.t. \\[\n\\forall n \\geq n_0 \\left[ f(n) \\leq K\\cdot g(n) \\right]\n\\]\nIn words:\n\n‚ÄúEventually‚Äù, beyond a certain point \\(n_0\\),\n\\(f(n)\\) is bounded above by \\(K\\cdot g(n)\\).\n\nDefinition from Savage (1998, pg. 13)"
  },
  {
    "objectID": "w03/slides.html#intuition-rightarrow-proof",
    "href": "w03/slides.html#intuition-rightarrow-proof",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "Intuition \\(\\rightarrow\\) Proof",
    "text": "Intuition \\(\\rightarrow\\) Proof\n\nUsing this definition, we can now prove \\(f(n) = n^2 + 50n = \\overline{O}(n^2)\\)!\nHere \\(f(n) = n^2 + 50n\\), \\(g(n) = n^2\\)\nTheorem: \\(\\exists \\; n_0 \\; \\text{ s.t. } \\forall n \\geq n_0 \\left[ n^2 + 50n \\leq Kn^2 \\right]\\)\nProof: Let \\(K = 50\\). Then \\[\n\\begin{align*}\n&n^2 + 50n \\leq 50n^2 \\iff n + 50 \\leq 50n \\\\\n&\\iff 49n \\geq 50 \\iff n \\geq \\frac{50}{49}.\n\\end{align*}\n\\]\nSo if we choose \\(n_0 = 2\\), the chain of statements holds. \\(\\blacksquare\\)"
  },
  {
    "objectID": "w03/slides.html#bounding-insertion-sort-runtime",
    "href": "w03/slides.html#bounding-insertion-sort-runtime",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "Bounding Insertion Sort Runtime",
    "text": "Bounding Insertion Sort Runtime\n\nRuns in \\(T(n) = \\overline{O}(n^2)\\) (use constants from prev slide)\nCan similarly define lower bound \\(T(n) = \\Omega(f(n))\\)\n\n\\(\\overline{O}\\) = ‚ÄúBig-Oh‚Äù, \\(\\Omega\\) = ‚ÄúBig-Omega‚Äù\n\nFinal definition (+theorem you can prove!): \\(\\Theta\\) = ‚ÄúBig-Theta‚Äù\n\nIf \\(T(n) = \\overline{O}(g(n))\\) and \\(T(n) = \\Omega(g(n))\\)\nThen \\(T(n) = \\Theta(n)\\)\n\n\\(\\Rightarrow\\) most ‚Äúinformative‚Äù way to characterize Insertion-Sort is \\(\\boxed{T(n) = \\Theta(n^2)}\\)\n\nTells us: it won‚Äôt do worse, but won‚Äôt do better, than \\(n^2\\)"
  },
  {
    "objectID": "w03/slides.html#doing-better-than-insertion-sort",
    "href": "w03/slides.html#doing-better-than-insertion-sort",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "Doing Better Than Insertion Sort",
    "text": "Doing Better Than Insertion Sort\n\nIntuition Break ü•≥: Finding a word in a dictionary! dsan.io/dict-lookup\nInsertion-Sort \\(\\in\\) Linear Algorithms\n\n(Linear Algorithms \\(\\subset\\) Linear Things)\n\nMerge-Sort \\(\\in\\) Logarithmic Algorithms\n\n(Logarithmic Algorithms \\(\\subset\\) Logarithmic Things)"
  },
  {
    "objectID": "w03/slides.html#how-can-merge-sort-work-that-much-better",
    "href": "w03/slides.html#how-can-merge-sort-work-that-much-better",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "How Can Merge Sort Work That Much Better!?",
    "text": "How Can Merge Sort Work That Much Better!?\n\nWith the linear approach, each time we check a word and it‚Äôs not our word we eliminate‚Ä¶ one measly word üòû\nBut with the divide-and-conquer approach‚Ä¶ we eliminate üî•HALF OF THE REMAINING WORDSüî•"
  },
  {
    "objectID": "w03/slides.html#merge-merging-two-sorted-lists-in-on-time",
    "href": "w03/slides.html#merge-merging-two-sorted-lists-in-on-time",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "Merge: Merging Two Sorted Lists in \\(O(n)\\) Time",
    "text": "Merge: Merging Two Sorted Lists in \\(O(n)\\) Time\n\nFrom Cormen et al. (2001), pg. 37"
  },
  {
    "objectID": "w03/slides.html#merge-sort-merge-as-subroutine",
    "href": "w03/slides.html#merge-sort-merge-as-subroutine",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "Merge Sort (Merge as Subroutine)",
    "text": "Merge Sort (Merge as Subroutine)\n\nFrom Cormen et al. (2001), pg. 40"
  },
  {
    "objectID": "w03/slides.html#complexity-analysis-1",
    "href": "w03/slides.html#complexity-analysis-1",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "Complexity Analysis",
    "text": "Complexity Analysis\n\nHard way: re-do the line-by-line analysis we did for Insertion-Sort üò£ Easy way: stand on shoulders of giants!\nUsing a famous+fun theorem (the Master Theorem): Given a recurrence \\(T(n) = aT(n/b) + f(n)\\), compute its:\n\nWatershed function \\(W(n) = n^{\\log_b(a)}\\) and\nDriving function \\(D(n) = f(n)\\)\n\nThe Master Theorem gives closed-form asymptotic solution for \\(T(n)\\), split into three cases:\n(1) \\(W(n)\\) grows faster than \\(D(n)\\), (2) grows at same rate as \\(D(n)\\), or (3) grows slower than \\(D(n)\\)"
  },
  {
    "objectID": "w03/slides.html#bounding-the-runtime-of-merge-sort",
    "href": "w03/slides.html#bounding-the-runtime-of-merge-sort",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "Bounding the Runtime of Merge Sort",
    "text": "Bounding the Runtime of Merge Sort\n\nHow about Merge-Sort? \\(T(n) = 2T(n/2) + \\Theta(n)\\)\n\n\\(a = b = 2\\), \\(W(n) = n^{\\log_2(2)} = n\\), \\(D(n) = \\Theta(n)\\)\n\n\\(W(n)\\) and \\(D(n)\\) grow at same rate \\(\\implies\\) Case 2:\n\n\n\n\nApplying the Master Theorem When \\(W(n) = \\Theta(D(n))\\) (Case 2)\n\n\n\nIs there a \\(k \\geq 0\\) satisfying \\(D(n) = \\Theta(n^{\\log_b(a)}\\log_2^k(n))\\)?\nIf so, your solution is \\(T(n) = \\Theta(n^{\\log_b(a)}\\log_2^{k+1}(n))\\)\n\n\n\n\n\nMerge-Sort: \\(k = 0\\) works! \\(\\Theta(n^{\\log_2(2)}\\log_2^0(n)) = \\Theta(n)\\)\nThus \\(T(n) = \\Theta(n^{\\log_b(a)}\\log_2^{k+1}(n)) = \\boxed{\\Theta(n\\log_2n)}\\) üòé"
  },
  {
    "objectID": "w03/slides.html#references",
    "href": "w03/slides.html#references",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "References",
    "text": "References\n\n\nCormen, Thomas H., Charles E. Leiserson, Ronald L. Rivest, and Clifford Stein. 2001. Introduction To Algorithms. MIT Press.\n\n\nSavage, John E. 1998. Models of Computation: Exploring the Power of Computing. Addison-Wesley."
  },
  {
    "objectID": "w03/slides.html#appendix-1-intuition-for-lower-bound",
    "href": "w03/slides.html#appendix-1-intuition-for-lower-bound",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "Appendix 1: Intuition for Lower Bound",
    "text": "Appendix 1: Intuition for Lower Bound\n\nSpoiler: Insertion sort also runs in \\(T(n) = \\Omega(n^2)\\) time. How could we prove this?\nGiven any value \\(n &gt; n_0\\), we need to construct an input for which Insertion-Sort requires \\(cn^2\\) steps: consider a list where \\(n/3\\) greatest values are in first \\(n/3\\) slots:\n\n\nAll \\(n/3\\) values in \\(\\textrm{L}\\) pass, one-by-one, through the \\(n/3\\) slots in \\(\\textrm{M}\\) (since they must end up in \\(\\textrm{R}\\)) \\(\\implies (n/3)(n/3) = n^2/9 = \\Omega(n^2)\\) steps!\nFinal definition (a theorem you could prove if you want!): \\(\\Theta\\) = ‚ÄúBig-Theta‚Äù\n\nIf \\(T(n) = \\overline{O}(g(n))\\) and \\(T(n) = \\Omega(g(n))\\), then \\(T(n) = \\Theta(n)\\)\n\n\\(\\implies\\) most ‚Äúinformative‚Äù way to characterize insertion sort is \\(\\boxed{T(n) = \\Theta(n^2)}\\)"
  },
  {
    "objectID": "w03/slides.html#appendix-2-being-precise-about-worst-case",
    "href": "w03/slides.html#appendix-2-being-precise-about-worst-case",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "Appendix 2: Being Precise About ‚ÄúWorst-Case‚Äù",
    "text": "Appendix 2: Being Precise About ‚ÄúWorst-Case‚Äù\nNeed to be careful with \\(O(f(n))\\) vs.¬†\\(\\Omega(f(n))\\) however: difference between ‚Äúfor all inputs‚Äù vs.¬†‚Äúfor some inputs‚Äù:\n\n\n\n\nBounding Worst-Case Runtime\n\n\nBy saying that the worst-case running time of an algorithm is \\(\\Omega(n^2)\\), we mean that for every input size \\(n\\) above a certain threshold, there is at least one input of size \\(n\\) for which the algorithm takes at least \\(cn^2\\) time, for some positive constant \\(n\\). It does not necessarily mean that the algorithm takes at least \\(cn^2\\) time for all inputs."
  },
  {
    "objectID": "w03/slides.html#appendix-3-the-full-master-theorem",
    "href": "w03/slides.html#appendix-3-the-full-master-theorem",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "Appendix 3: The Full Master Theorem",
    "text": "Appendix 3: The Full Master Theorem\nMaster Theorem: Let \\(a &gt; 0\\) and \\(b &gt; 1\\) be constants, and let \\(f(n)\\) be a driving function defined and nonnegative on all sufficiently large reals. Define \\(T(n)\\) on \\(n \\in \\mathbb{N}\\) by\n\\[\nT(n) = aT(n/b) + f(n)\n\\]\nwhere \\(aT(n/b) = a'T(\\lfloor n/b \\rfloor) + a''T(\\lceil n/b \\rceil)\\) for some \\(a' \\geq 0\\) and \\(a'' \\geq 0\\) satisfying \\(a = a' + a''\\). Then the asymptotic behavior of \\(T(n)\\) can be characterized as follows:\n\nIf there exists \\(\\epsilon &gt; 0\\) such that \\(f(n) = O(n^{\\log_b(a) - \\epsilon})\\), then \\(T(n) = \\Theta(n^{\\log_b(a)})\\)\nIf there exists \\(k \\geq 0\\) such that \\(f(n) = \\Theta(n^{\\log_b(a)}\\log_2^k(n))\\), then \\(T(n) = \\Theta(n^{\\log_b(a)}\\log_2^{k+1}(n))\\).\nIf there exists \\(\\epsilon &gt; 0\\) such that \\(f(n) = \\Omega(n^{\\log_b(a) + \\epsilon})\\), and if \\(f(n)\\) satisfies the regularity condition \\(af(n/b) \\leq cf(n)\\) for some constant \\(c &lt; 1\\) and all sufficiently large \\(n\\), then \\(T(n) = \\Theta(f(n))\\).\n\n\nProof. See Cormen et al. (2001), pg. 107-114.\n\n(‚Üê Back to Merge Sort slides)"
  },
  {
    "objectID": "w04/index.html",
    "href": "w04/index.html",
    "title": "Week 4: Data Structures from Scratch with OOP",
    "section": "",
    "text": "Open slides in new window ‚Üí",
    "crumbs": [
      "Week 4: {{< var w04.date-md >}}"
    ]
  },
  {
    "objectID": "w04/index.html#breaking-a-problem-into-interacting-parts",
    "href": "w04/index.html#breaking-a-problem-into-interacting-parts",
    "title": "Week 4: Data Structures from Scratch with OOP",
    "section": "Breaking a Problem into (Interacting) Parts",
    "text": "Breaking a Problem into (Interacting) Parts\n\nPython so far: ‚ÄúData science mode‚Äù\n\nStart at top of file with raw data\nWrite lines of code until problem solved\n\nPython in this class: ‚ÄúSoftware engineering mode‚Äù\n\nBreak system down into parts\nWrite each part separately\nLink parts together to create the whole\n\n(One implication: .py files may be easier than .ipynb for development! Can you think of why?)",
    "crumbs": [
      "Week 4: {{< var w04.date-md >}}"
    ]
  },
  {
    "objectID": "w04/index.html#how-does-a-calculator-work",
    "href": "w04/index.html#how-does-a-calculator-work",
    "title": "Week 4: Data Structures from Scratch with OOP",
    "section": "How Does A Calculator Work?",
    "text": "How Does A Calculator Work?\n\n\n\n(Calculator image from Wikimedia Commons)",
    "crumbs": [
      "Week 4: {{< var w04.date-md >}}"
    ]
  },
  {
    "objectID": "w04/index.html#key-oop-feature-1-encapsulation",
    "href": "w04/index.html#key-oop-feature-1-encapsulation",
    "title": "Week 4: Data Structures from Scratch with OOP",
    "section": "Key OOP Feature #1: Encapsulation",
    "text": "Key OOP Feature #1: Encapsulation\n\nImagine you‚Äôre on a team trying to make a calculator\nOne person can write the Screen class, another person can write the Button class, and so on\nNatural division of labor! (May seem silly for a calculator, but imagine as your app scales up)",
    "crumbs": [
      "Week 4: {{< var w04.date-md >}}"
    ]
  },
  {
    "objectID": "w04/index.html#key-oop-feature-2-abstraction",
    "href": "w04/index.html#key-oop-feature-2-abstraction",
    "title": "Week 4: Data Structures from Scratch with OOP",
    "section": "Key OOP Feature #2: Abstraction",
    "text": "Key OOP Feature #2: Abstraction\n\nAbstraction complements this Encapsulation: the Screen team doesn‚Äôt need to know the internal details of Button (just it‚Äôs API), and vice-versa\nRelevant data and functions can be ‚Äúpublic‚Äù, irrelevant internal data and functions ‚Äúprivate‚Äù\n(Like with type hints), Python doesn‚Äôt enforce this distinction, but (unlike with type hints) most libraries do separate public from private by a variable-naming convention‚Ä¶",
    "crumbs": [
      "Week 4: {{< var w04.date-md >}}"
    ]
  },
  {
    "objectID": "w04/index.html#public-protected-private-attributes-in-python",
    "href": "w04/index.html#public-protected-private-attributes-in-python",
    "title": "Week 4: Data Structures from Scratch with OOP",
    "section": "Public, Protected, Private Attributes in Python",
    "text": "Public, Protected, Private Attributes in Python\n\n[Public (default)] No underscores: public_var\n[Protected] One underscore: _protected_var\n[Private] Two underscores: __private_var\n\n\n\n\n\nCode\nclass MySecretInfo:\n  __the_info = \"I love Carly Rae Jepsen\"\n\ninfo_obj = MySecretInfo()\ninfo_obj.__the_info\n\n\n\n---------------------------------------------------------------------------\nAttributeError                            Traceback (most recent call last)\nCell In[1], line 5\n      2   __the_info = \"I love Carly Rae Jepsen\"\n      4 info_obj = MySecretInfo()\n----&gt; 5 info_obj.__the_info\n\nAttributeError: 'MySecretInfo' object has no attribute '__the_info'\n\n\n\nGuess we can‚Äôt access it then, right? üòÆ‚Äçüí®\n\n\n\nCode\ninfo_obj._MySecretInfo__the_info\n\n\n'I love Carly Rae Jepsen'\n\n\n\nNOO MY SECRET!!! üò≠\nPls don‚Äôt tell anyone",
    "crumbs": [
      "Week 4: {{< var w04.date-md >}}"
    ]
  },
  {
    "objectID": "w04/index.html#key-oop-features-3-4-inheritance-polymorphism",
    "href": "w04/index.html#key-oop-features-3-4-inheritance-polymorphism",
    "title": "Week 4: Data Structures from Scratch with OOP",
    "section": "Key OOP Features #3-4: Inheritance, Polymorphism",
    "text": "Key OOP Features #3-4: Inheritance, Polymorphism\n\nBetter explained in diagrams than words (next 10 slides!), but we can get a sense by thinking about their etymology:\n‚ÄúInheritance‚Äù comes from ‚Äúheir‚Äù, like ‚Äúheir to the throne‚Äù\n\nParent passes on [things they possess] to their children\n\n‚ÄúPolymorphism‚Äù: Poly = ‚Äúmany‚Äù, Morphe = ‚Äúforms‚Äù\n\nHow does Python know what to do when we print()?\nIt ‚Äújust works‚Äù because print() (through __str__()) takes on many (!) forms (!): each type of object has its own implementation of __str__()",
    "crumbs": [
      "Week 4: {{< var w04.date-md >}}"
    ]
  },
  {
    "objectID": "w04/index.html#use-case-bookstore-inventory-management",
    "href": "w04/index.html#use-case-bookstore-inventory-management",
    "title": "Week 4: Data Structures from Scratch with OOP",
    "section": "Use Case: Bookstore Inventory Management",
    "text": "Use Case: Bookstore Inventory Management\n\n\n\nImage source",
    "crumbs": [
      "Week 4: {{< var w04.date-md >}}"
    ]
  },
  {
    "objectID": "w04/index.html#in-pictures",
    "href": "w04/index.html#in-pictures",
    "title": "Week 4: Data Structures from Scratch with OOP",
    "section": "In Pictures",
    "text": "In Pictures\n\n\n\n\n\n\nG\n\nBookstore Relational Diagram\n\n\nBookstore\n\nBookstore\n\nName\n\nLocation\n\nBooklist\n\nGet_Inventory()\n\nSort_Inventory()\n\n\n\nPlace\n\nPlace\n\nCity\n\nState\n\nCountry\n\nPrint_Map()\n\n\n\nBookstore:loc-&gt;Place:placehead\n\n\nHas One\n\n\n\nBook\n\nBook\n\nTitle\n\nAuthors\n\nNum Pages\n\nPreview()\n\n\n\nBookstore:bl-&gt;Book:bookhead\n\n\nHas Multiple\n\n\n\nPerson\n\nPerson\n\nFamily Name\n\nGiven Name\n\n\n\nBook:auths-&gt;Person:personhead\n\n\nHas Multiple",
    "crumbs": [
      "Week 4: {{< var w04.date-md >}}"
    ]
  },
  {
    "objectID": "w04/index.html#creating-classes",
    "href": "w04/index.html#creating-classes",
    "title": "Week 4: Data Structures from Scratch with OOP",
    "section": "Creating Classes",
    "text": "Creating Classes\n\nUse case: Creating an inventory system for a Bookstore\n\n\n\n\n\nCode\nclass Bookstore:\n    def __init__(self, name, location):\n        self.name = name\n        self.location = location\n        self.books = []\n\n    def __getitem__(self, index):\n        return self.books[index]\n\n    def __repr__(self):\n        return self.__str__()\n\n    def __str__(self):\n        return f\"Bookstore[{self.get_num_books()} books]\"\n\n    def add_books(self, book_list):\n        self.books.extend(book_list)\n\n    def get_books(self):\n        return self.books\n\n    def get_inventory(self):\n        book_lines = []\n        for book_index, book in enumerate(self.get_books()):\n            cur_book_line = f\"{book_index}. {str(book)}\"\n            book_lines.append(cur_book_line)\n        return \"\\n\".join(book_lines)\n\n    def get_num_books(self):\n        return len(self.get_books())\n\n    def sort_books(self, sort_key):\n        self.books.sort(key=sort_key)\n\nclass Book:\n    def __init__(self, title, authors, num_pages):\n        self.title = title\n        self.authors = authors\n        self.num_pages = num_pages\n\n    def __str__(self):\n        return f\"Book[title={self.get_title()}, authors={self.get_authors()}, pages={self.get_num_pages()}]\"\n\n    def get_authors(self):\n        return self.authors\n\n    def get_first_author(self):\n        return self.authors[0]\n\n    def get_num_pages(self):\n        return self.num_pages\n\n    def get_title(self):\n        return self.title\n\nclass Person:\n    def __init__(self, family_name, given_name):\n        self.family_name = family_name\n        self.given_name = given_name\n\n    def __repr__(self):\n        return self.__str__()\n\n    def __str__(self):\n        return f\"Person[{self.get_family_name()}, {self.get_given_name()}]\"\n\n    def get_family_name(self):\n        return self.family_name\n\n    def get_given_name(self):\n        return self.given_name\n\n\n\n\n\nCode\nmy_bookstore = Bookstore(\"Bookland\", \"Washington, DC\")\nplath = Person(\"Plath\", \"Sylvia\")\nbell_jar = Book(\"The Bell Jar\", [plath], 244)\nmarx = Person(\"Marx\", \"Karl\")\nengels = Person(\"Engels\", \"Friedrich\")\nmanifesto = Book(\"The Communist Manifesto\", [marx, engels], 43)\nelster = Person(\"Elster\", \"Jon\")\ncement = Book(\"The Cement of Society\", [elster], 311)\nmy_bookstore.add_books([bell_jar, manifesto, cement])\nprint(my_bookstore)\nprint(my_bookstore[0])\nprint(\"Inventory:\")\nprint(my_bookstore.get_inventory())\n\n\nBookstore[3 books]\nBook[title=The Bell Jar, authors=[Person[Plath, Sylvia]], pages=244]\nInventory:\n0. Book[title=The Bell Jar, authors=[Person[Plath, Sylvia]], pages=244]\n1. Book[title=The Communist Manifesto, authors=[Person[Marx, Karl], Person[Engels, Friedrich]], pages=43]\n2. Book[title=The Cement of Society, authors=[Person[Elster, Jon]], pages=311]",
    "crumbs": [
      "Week 4: {{< var w04.date-md >}}"
    ]
  },
  {
    "objectID": "w04/index.html#doing-things-with-classes",
    "href": "w04/index.html#doing-things-with-classes",
    "title": "Week 4: Data Structures from Scratch with OOP",
    "section": "Doing Things With Classes",
    "text": "Doing Things With Classes\n\nNow we can use our OOP structure, for example to sort the inventory in different ways!\n\n\n\n\nAlphabetical (By First Author)\n\n\n\nCode\nsort_alpha = lambda x: x.get_first_author().get_family_name()\nmy_bookstore.sort_books(sort_key = sort_alpha)\nprint(my_bookstore.get_inventory())\n\n\n0. Book[title=The Cement of Society, authors=[Person[Elster, Jon]], pages=311]\n1. Book[title=The Communist Manifesto, authors=[Person[Marx, Karl], Person[Engels, Friedrich]], pages=43]\n2. Book[title=The Bell Jar, authors=[Person[Plath, Sylvia]], pages=244]\n\n\n\n\nBy Page Count\n\n\n\nCode\nsort_pages = lambda x: x.get_num_pages()\nmy_bookstore.sort_books(sort_key = sort_pages)\nprint(my_bookstore.get_inventory())\n\n\n0. Book[title=The Communist Manifesto, authors=[Person[Marx, Karl], Person[Engels, Friedrich]], pages=43]\n1. Book[title=The Bell Jar, authors=[Person[Plath, Sylvia]], pages=244]\n2. Book[title=The Cement of Society, authors=[Person[Elster, Jon]], pages=311]",
    "crumbs": [
      "Week 4: {{< var w04.date-md >}}"
    ]
  },
  {
    "objectID": "w04/index.html#inheritance-and-polymorphism",
    "href": "w04/index.html#inheritance-and-polymorphism",
    "title": "Week 4: Data Structures from Scratch with OOP",
    "section": "Inheritance and Polymorphism",
    "text": "Inheritance and Polymorphism\n\nEncapsulate general properties in parent class, specific properties in child classes\n\n\n\n\n(You can edit this or make your own UML diagrams in nomnoml!)",
    "crumbs": [
      "Week 4: {{< var w04.date-md >}}"
    ]
  },
  {
    "objectID": "w04/index.html#or-is-this-better",
    "href": "w04/index.html#or-is-this-better",
    "title": "Week 4: Data Structures from Scratch with OOP",
    "section": "Or‚Ä¶ Is This Better?",
    "text": "Or‚Ä¶ Is This Better?\n\n\n\nEdit in nomnoml",
    "crumbs": [
      "Week 4: {{< var w04.date-md >}}"
    ]
  },
  {
    "objectID": "w04/index.html#design-choices",
    "href": "w04/index.html#design-choices",
    "title": "Week 4: Data Structures from Scratch with OOP",
    "section": "Design Choices",
    "text": "Design Choices\n\nGoal is encapsulation: which objects should have which properties/methods?\nExample: Fiction vs.¬†Non-Fiction. How important is this distinction for your use case?\n\n\n\n\nOption 1: As Property of Book\n\n\n\nCode\nfrom enum import Enum\nclass BookType(Enum):\n    NONFICTION = 0\n    FICTION = 1\n\nclass Book:\n    def __init__(self, title: str, authors: list[Person], num_pages: int, type: BookType):\n        self.title = title\n        self.authors = authors\n        self.num_pages = num_pages\n        self.type = type\n\n    def __str__(self):\n        return f\"Book[title={self.title}, authors={self.authors}, pages={self.num_pages}, type={self.type}]\"\n\n\n\n\nCode\njoyce = Person(\"Joyce\", \"James\")\nulysses = Book(\"Ulysses\", [joyce], 732, BookType.FICTION)\nschelling = Person(\"Schelling\", \"Thomas\")\nmicromotives = Book(\"Micromotives and Macrobehavior\", [schelling], 252, BookType.NONFICTION)\nprint(ulysses)\nprint(micromotives)\n\n\nBook[title=Ulysses, authors=[Person[Joyce, James]], pages=732, type=BookType.FICTION]\nBook[title=Micromotives and Macrobehavior, authors=[Person[Schelling, Thomas]], pages=252, type=BookType.NONFICTION]\n\n\n\n\nOption 2: Separate Classes\n\n\n\nCode\n# class Book defined as earlier\nclass FictionBook(Book):\n    def __init__(self, title, authors, num_pages, characters):\n        super().__init__(title, authors, num_pages)\n        self.characters = characters\n\nclass NonfictionBook(Book):\n    def __init__(self, title, authors, num_pages, topic):\n        super().__init__(title, authors, num_pages)\n        self.topic = topic\n\n\n\n\nCode\njoyce = Person(\"Joyce\", \"James\")\nulysses = FictionBook(\"Ulysses\", [joyce], 732, [\"Daedalus\"])\nschelling = Person(\"Schelling\", \"Thomas\")\nmicromotives = NonfictionBook(\"Micromotives and Macrobehavior\", [schelling], 252, \"Economics\")\nprint(ulysses)\nprint(micromotives)\n\n\nBook[title=Ulysses, authors=[Person[Joyce, James]], pages=732]\nBook[title=Micromotives and Macrobehavior, authors=[Person[Schelling, Thomas]], pages=252]",
    "crumbs": [
      "Week 4: {{< var w04.date-md >}}"
    ]
  },
  {
    "objectID": "w04/index.html#looking-under-the-hood-of-a-data-structure",
    "href": "w04/index.html#looking-under-the-hood-of-a-data-structure",
    "title": "Week 4: Data Structures from Scratch with OOP",
    "section": "Looking Under the Hood of a Data Structure",
    "text": "Looking Under the Hood of a Data Structure\n\nLast week we saw the math for why we can ‚Äúabstract away from‚Äù the details of how a particular language works\nWe want to understand these structures independently of the specifics of their implementation in Python (for now)\nSo, let‚Äôs construct our own simplified versions of the basic structures, and use these simplified versions to get a sense for their efficiency\n\n(The ‚Äútrue‚Äù Python versions may be hyper-optimized but, as we‚Äôll see, there are fundamental constraints on runtime, assuming \\(P \\neq NP\\))",
    "crumbs": [
      "Week 4: {{< var w04.date-md >}}"
    ]
  },
  {
    "objectID": "w04/index.html#tuples",
    "href": "w04/index.html#tuples",
    "title": "Week 4: Data Structures from Scratch with OOP",
    "section": "Tuples",
    "text": "Tuples\n\n\nCode\nclass MyTuple:\n  def __init__(self, thing1, thing2):\n    self.thing1 = thing1\n    self.thing2 = thing2\n\n  def __repr__(self):\n    return f\"({self.thing1}, {self.thing2})\"\n\n  def __str__(self):\n    return self.__repr__()\n\nt1 = MyTuple('a','b')\nt2 = MyTuple(111, 222)\nprint(t1)\nprint(t2)\n\n\n(a, b)\n(111, 222)",
    "crumbs": [
      "Week 4: {{< var w04.date-md >}}"
    ]
  },
  {
    "objectID": "w04/index.html#lists",
    "href": "w04/index.html#lists",
    "title": "Week 4: Data Structures from Scratch with OOP",
    "section": "Lists",
    "text": "Lists\n\n\nThe list itself just points to a root item:\n\n\nCode\nclass MyList:\n  def __init__(self):\n    self.root = None\n\n  def append(self, new_item):\n    if self.root is None:\n      self.root = MyListItem(new_item)\n    else:\n      self.root.append(new_item)\n\n  def __repr__(self):\n    return self.root.__repr__()\n\n\n\nAn item has contents, pointer to next item:\n\n\nCode\nclass MyListItem:\n  def __init__(self, content):\n    self.content = content\n    self.next = None\n\n  def append(self, new_item):\n    if self.next is None:\n      self.next = MyListItem(new_item)\n    else:\n      self.next.append(new_item)\n\n  def __repr__(self):\n    my_content = self.content\n    return my_content if self.next is None else f\"{my_content}, {self.next.__repr__()}\"\n\n\n\n\n\n\nCode\nusers = MyList()\nusers.append('Jeff')\nusers.append('Alma')\nusers.append('Bo')\nprint(users)\n\n\nJeff, Alma, Bo",
    "crumbs": [
      "Week 4: {{< var w04.date-md >}}"
    ]
  },
  {
    "objectID": "w04/index.html#so-how-many-steps-are-required",
    "href": "w04/index.html#so-how-many-steps-are-required",
    "title": "Week 4: Data Structures from Scratch with OOP",
    "section": "So, How Many ‚ÄúSteps‚Äù Are Required‚Ä¶",
    "text": "So, How Many ‚ÄúSteps‚Äù Are Required‚Ä¶\n\nTo retrieve the first element in a MyTuple?\nTo retrieve the last element in a MyTuple?\nTo retrieve the first element in a MyList?\nTo retrieve the last element in a MyList?",
    "crumbs": [
      "Week 4: {{< var w04.date-md >}}"
    ]
  },
  {
    "objectID": "w04/index.html#how-many-steps",
    "href": "w04/index.html#how-many-steps",
    "title": "Week 4: Data Structures from Scratch with OOP",
    "section": "How Many Steps?",
    "text": "How Many Steps?\n\n\nWith a MyTuple:\n\n\nCode\nt1.thing1\n\n\n'a'\n\n\n\\(\\implies\\) 1 step\n\n\nCode\nt1.thing2\n\n\n'b'\n\n\n\\(\\implies\\) 1 step\n\nWith a MyList:\n\n\nCode\nprint(users.root.content)\n\n\nJeff\n\n\n\\(\\implies\\) 1 step\n\n\nCode\ncurrent_node = users.root\nwhile current_node.next is not None:\n  current_node = current_node.next\nprint(current_node.content)\n\n\nBo\n\n\n\\(\\implies\\) (3 steps)\n‚Ä¶But why 3? How many steps if the list contained 5 elements? \\(N\\) elements?",
    "crumbs": [
      "Week 4: {{< var w04.date-md >}}"
    ]
  },
  {
    "objectID": "w04/index.html#visualizing-linkedlists",
    "href": "w04/index.html#visualizing-linkedlists",
    "title": "Week 4: Data Structures from Scratch with OOP",
    "section": "Visualizing LinkedLists",
    "text": "Visualizing LinkedLists\n\n\n\nCode\nfrom hw2 import LinkedList, InventoryItem\nll = LinkedList()\nitem1 = InventoryItem('Mango', 50)\nll.append(item1)\nitem2 = InventoryItem('Pickle', 60)\nll.append(item2)\nitem3 = InventoryItem('Artichoke', 55)\nll.append(item3)\nitem5 = InventoryItem('Banana', 123)\nll.append(item5)\nitem6 = InventoryItem('Aardvark', 11)\nll.append(item6)\nHTML(visualize_ll(ll))",
    "crumbs": [
      "Week 4: {{< var w04.date-md >}}"
    ]
  },
  {
    "objectID": "w04/index.html#linkedlist-foundation-for-most-data-structures",
    "href": "w04/index.html#linkedlist-foundation-for-most-data-structures",
    "title": "Week 4: Data Structures from Scratch with OOP",
    "section": "LinkedList: Foundation for Most(?) Data Structures!",
    "text": "LinkedList: Foundation for Most(?) Data Structures!\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclass LinkedList(BaseModel):\n  root: LinkedListNode | None\n\nclass LinkedListNode(BaseModel):\n  content: object\n  next: LinkedListNode | None\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclass BinaryTree(BaseModel):\n  root: BinaryTreeNode | None\n\nclass BinaryTreeNode(BaseModel):\n  content: object\n  left: BinaryTreeNode | None\n  right: BinaryTreeNode | None\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclass QuadTree(BaseModel):\n  root: QuadTreeNode | None\n\nclass QuadTreeNode:\n  content: object\n  nw: QuadTreeNode | None\n  ne: QuadTreeNode | None\n  sw: QuadTreeNode | None\n  se: QuadTreeNode | None",
    "crumbs": [
      "Week 4: {{< var w04.date-md >}}"
    ]
  },
  {
    "objectID": "w04/index.html#visualizing-binarysearchtree",
    "href": "w04/index.html#visualizing-binarysearchtree",
    "title": "Week 4: Data Structures from Scratch with OOP",
    "section": "Visualizing BinarySearchTree",
    "text": "Visualizing BinarySearchTree\n\n\nCode\nfrom hw2 import BinarySearchTree\nbst = BinarySearchTree()\nitem1 = InventoryItem('Mango', 50)\nbst.add(item1)\nitem2 = InventoryItem('Pickle', 60)\nbst.add(item2)\nitem3 = InventoryItem('Artichoke', 55)\nbst.add(item3)\nitem5 = InventoryItem('Banana', 123)\nbst.add(item5)\nitem6 = InventoryItem('Aardvark', 11)\nbst.add(item6)\nHTML(visualize(bst))\n\n\nWarning: node None_0, port f1 unrecognized\nWarning: node None_1, port f1 unrecognized\nWarning: node None_2, port f1 unrecognized\nWarning: node None_3, port f1 unrecognized\nWarning: node None_4, port f1 unrecognized\nWarning: node None_5, port f1 unrecognized",
    "crumbs": [
      "Week 4: {{< var w04.date-md >}}"
    ]
  },
  {
    "objectID": "w04/index.html#so-then-why-is-this-a-whole-dsan-class",
    "href": "w04/index.html#so-then-why-is-this-a-whole-dsan-class",
    "title": "Week 4: Data Structures from Scratch with OOP",
    "section": "So Then‚Ä¶ Why Is This a Whole DSAN Class?",
    "text": "So Then‚Ä¶ Why Is This a Whole DSAN Class?\n\nThe core structures are identical, but we can optimize different goals (efficient insertion, sorting, retrieval, deletion, ‚Ä¶) by changing the invariants maintained by the algorithms internal to our structure\nCrucial Insertion-Sort invariant: \\(\\textsf{Sorted}(1,i)\\) true when we move to entry \\(i + 1\\) (key)\nCrucial HW2(!) invariant: \\(\\textsf{Up-To-Date-Favorite}(1,i-1)\\) true when entry \\(i + 1\\) (next result in dataset) arrives\n\\(\\implies\\) Efficiency of obtaining favorite style guaranteed to be constant-time, \\(\\overline{O}(1)\\)!\nOtherwise, would be \\(\\overline{O}(n) &gt; \\overline{O}(1)\\) (linear approach) or at best \\(\\overline{O}(\\log_2(n)) &gt; \\overline{O}(1)\\) (divide-and-conquer)",
    "crumbs": [
      "Week 4: {{< var w04.date-md >}}"
    ]
  },
  {
    "objectID": "w04/index.html#our-list-of-item-price-pairs",
    "href": "w04/index.html#our-list-of-item-price-pairs",
    "title": "Week 4: Data Structures from Scratch with OOP",
    "section": "Our List of (Item, Price) Pairs",
    "text": "Our List of (Item, Price) Pairs\n\n\nCode\nprice_list = []\nprice_list.append(('Banana', 10))\nprice_list.append(('Apple', 2))\nprice_list.append(('Four Loko', 5))\nprice_list\n\n\n[('Banana', 10), ('Apple', 2), ('Four Loko', 5)]\n\n\n\nAs the list gets longer, it gets harder and harder to find where you wrote down a specific item and its price\nAs you now know, you could use linear search, \\(\\overline{O}(n)\\), or if you ensure alphabetical order (an invariant!), you could use binary, divide-and-conquer search, \\(\\overline{O}(\\log_2(n))\\)\nWe can do even better: \\(\\overline{O}(1)\\). First w/magic, but then math",
    "crumbs": [
      "Week 4: {{< var w04.date-md >}}"
    ]
  },
  {
    "objectID": "w04/index.html#strange-at-first-technique-for-algorithm-analysis-oracles",
    "href": "w04/index.html#strange-at-first-technique-for-algorithm-analysis-oracles",
    "title": "Week 4: Data Structures from Scratch with OOP",
    "section": "Strange-At-First Technique for Algorithm Analysis: Oracles",
    "text": "Strange-At-First Technique for Algorithm Analysis: Oracles\n\nWhat if we had a magical wizard who could just tell us where to find an item we were looking for?\nSounds like I‚Äôm joking or saying ‚Äúwhat if we had a billion $ and infinite aura and we could fly and walk through walls‚Äù\nAnd yet, through the magic of math and computer science, there are concrete hashing algorithms which ensure (in a mathematically-provable way!) ‚Äúalmost certain‚Äù \\(\\overline{O}(1)\\) lookup time",
    "crumbs": [
      "Week 4: {{< var w04.date-md >}}"
    ]
  },
  {
    "objectID": "w04/index.html#mathematical-strategy-of-oracles",
    "href": "w04/index.html#mathematical-strategy-of-oracles",
    "title": "Week 4: Data Structures from Scratch with OOP",
    "section": "Mathematical Strategy of Oracles",
    "text": "Mathematical Strategy of Oracles\n\nWe‚Äôll use a concrete, simplified hash function to illustrate\nMathematically we‚Äôll be able to get something like\n\n\\[\nT(n) = \\overline{O}(1 + \\underbrace{\\epsilon}_{\\mathclap{\\text{Collision rate}}} \\cdot n)\n\\]\n\nWhich tells us: if we had an oracle who could ensure near-0 collision rates, then \\(T(n) = \\overline{O}(1)\\).\nAnd, by a beautiful division-of-labor, other computer scientists figure out the near-0 collision rates part, giving us\n\n\\[\np^{‚úÖ} = [T(n) = \\overline{O}(1 + \\epsilon n)], q^{‚úÖ} = [\\epsilon \\approx 0],\\text{ so } p \\wedge q \\implies T(n) \\overset{‚úÖ}{=} \\overline{O}(1).\n\\]",
    "crumbs": [
      "Week 4: {{< var w04.date-md >}}"
    ]
  },
  {
    "objectID": "w04/index.html#back-to-the-price-list",
    "href": "w04/index.html#back-to-the-price-list",
    "title": "Week 4: Data Structures from Scratch with OOP",
    "section": "Back to the Price List",
    "text": "Back to the Price List\n\nOur hash function: hash(item) = first letter of item\n\n\\[\nh(\\texttt{x}) = \\texttt{x[0]}\n\\]\n\nh('Banana') = 'B', h('Monkey') = 'M'\nWith this function in hand, we can create a length-26 array, one slot for each letter in alphabet, and then write down (item, price) pairs in whatever slot item hashes to",
    "crumbs": [
      "Week 4: {{< var w04.date-md >}}"
    ]
  },
  {
    "objectID": "w04/index.html#the-importance-of-differentiating-operations-insertion-vs.-lookup",
    "href": "w04/index.html#the-importance-of-differentiating-operations-insertion-vs.-lookup",
    "title": "Week 4: Data Structures from Scratch with OOP",
    "section": "The Importance of Differentiating Operations: Insertion vs.¬†Lookup",
    "text": "The Importance of Differentiating Operations: Insertion vs.¬†Lookup\n\nSo far, we have \\(\\overline{O}(1)\\) insertion via hashing\nWe also get \\(\\overline{O}(1)\\) lookup!\nWhen customer hands us an item (say, 'Banana'), we compute the hash (B), look in that slot, and obtain the price for bananas.\nWe also get \\(\\overline{O}(1)\\) updating (hash to find the old price, update it to have new price) and \\(\\overline{O}(1)\\) deletion (hash to find the slot containing the item, then erase it from that slot)",
    "crumbs": [
      "Week 4: {{< var w04.date-md >}}"
    ]
  },
  {
    "objectID": "w04/index.html#so-whats-the-catch",
    "href": "w04/index.html#so-whats-the-catch",
    "title": "Week 4: Data Structures from Scratch with OOP",
    "section": "So What‚Äôs the Catch???",
    "text": "So What‚Äôs the Catch???\n\nBLUEBERRIES show up to ruin our day (as usual üòû)\nWe hash, so far so good: h('Blueberries') = 'B'\nBut then we go to the B slot and see that (Bananas, 10) is already there!!! Wtf do we do here‚Ä¶ don‚Äôt panic!\nThe answer? We open our HW2 from DSAN 5500 and remember that we have our lovely friend the LinkedList that we can use whenever and however we want!",
    "crumbs": [
      "Week 4: {{< var w04.date-md >}}"
    ]
  },
  {
    "objectID": "w04/index.html#arrays-vs.-linked-lists",
    "href": "w04/index.html#arrays-vs.-linked-lists",
    "title": "Week 4: Data Structures from Scratch with OOP",
    "section": "Arrays vs.¬†Linked Lists",
    "text": "Arrays vs.¬†Linked Lists\n\nJeff is hiding something here‚Ä¶ Why jump to LinkedList? Why not just‚Ä¶ another length-26 array, for example?\nFor this we open up our Week 1 slides and remember the stack vs.¬†heap distinction: we know how many letters in the alphabet, we don‚Äôt know how many items starting with B (or, if we do, we want to be able to expand/contract our price list to handle new/discontinued items)\nTerminology for this kind of ‚Äúhybrid‚Äù data structure: HashTable is an Array that ‚Äúdegenerates into‚Äù a LinkedList (when there are collisions)",
    "crumbs": [
      "Week 4: {{< var w04.date-md >}}"
    ]
  },
  {
    "objectID": "w04/index.html#look-how-far-we-came",
    "href": "w04/index.html#look-how-far-we-came",
    "title": "Week 4: Data Structures from Scratch with OOP",
    "section": "Look How Far We Came!",
    "text": "Look How Far We Came!\n\nBeginning of class: Only structure we knew allowing insertion (LinkedList) was \\(\\overline{O}(n)\\) for everythihg\nEnd of class: New structure where suddenly everything is \\(\\overline{O}(1)\\), except in ‚Äúunlucky‚Äù cases, in which it partially ‚Äúdegenerates‚Äù into a LinkedList\n\\(\\implies\\) The ‚Äúinevitable‚Äù \\(\\overline{O}(n)\\) runtime has transformed into the unlucky worst-case upper bound\n\\(\\implies\\) By taking core data structures/algorithms from your toolkit, you can ‚Äúpiece together‚Äù hybrid structures whose whole (runtime) is better than the sum of its parts",
    "crumbs": [
      "Week 4: {{< var w04.date-md >}}"
    ]
  },
  {
    "objectID": "w04/index.html#taking-this-idea-and-running-with-it",
    "href": "w04/index.html#taking-this-idea-and-running-with-it",
    "title": "Week 4: Data Structures from Scratch with OOP",
    "section": "Taking This Idea and Running With It",
    "text": "Taking This Idea and Running With It\n\nNext week we‚Äôll look at BinarySearchTree (BST)\nSince it‚Äôs just a glorified LinkedList, we‚Äôll be able to take our HashMap from today and ‚Äúdrop in‚Äù the BST to play the role the LinkedList is playing right now\nIf collision, we‚Äôll create a BST with its \\(\\overline{O}(\\log(n))\\) operations, rather than a LinkedList with its \\(\\overline{O}(n)\\) operations\n\\(\\implies\\) HashMap will go from:\n\n\\(\\overline{O}(1)\\) best-case but \\(\\overline{O}(n)\\) worst-case to\n\\(\\overline{O}(1)\\) best-case but \\(\\overline{O}(\\log_2(n))\\) worst-case!",
    "crumbs": [
      "Week 4: {{< var w04.date-md >}}"
    ]
  },
  {
    "objectID": "w04/slides.html#breaking-a-problem-into-interacting-parts",
    "href": "w04/slides.html#breaking-a-problem-into-interacting-parts",
    "title": "Week 4: Data Structures from Scratch with OOP",
    "section": "Breaking a Problem into (Interacting) Parts",
    "text": "Breaking a Problem into (Interacting) Parts\n\nPython so far: ‚ÄúData science mode‚Äù\n\nStart at top of file with raw data\nWrite lines of code until problem solved\n\nPython in this class: ‚ÄúSoftware engineering mode‚Äù\n\nBreak system down into parts\nWrite each part separately\nLink parts together to create the whole\n\n(One implication: .py files may be easier than .ipynb for development! Can you think of why?)"
  },
  {
    "objectID": "w04/slides.html#how-does-a-calculator-work",
    "href": "w04/slides.html#how-does-a-calculator-work",
    "title": "Week 4: Data Structures from Scratch with OOP",
    "section": "How Does A Calculator Work?",
    "text": "How Does A Calculator Work?\n\n(Calculator image from Wikimedia Commons)"
  },
  {
    "objectID": "w04/slides.html#key-oop-feature-1-encapsulation",
    "href": "w04/slides.html#key-oop-feature-1-encapsulation",
    "title": "Week 4: Data Structures from Scratch with OOP",
    "section": "Key OOP Feature #1: Encapsulation",
    "text": "Key OOP Feature #1: Encapsulation\n\nImagine you‚Äôre on a team trying to make a calculator\nOne person can write the Screen class, another person can write the Button class, and so on\nNatural division of labor! (May seem silly for a calculator, but imagine as your app scales up)"
  },
  {
    "objectID": "w04/slides.html#key-oop-feature-2-abstraction",
    "href": "w04/slides.html#key-oop-feature-2-abstraction",
    "title": "Week 4: Data Structures from Scratch with OOP",
    "section": "Key OOP Feature #2: Abstraction",
    "text": "Key OOP Feature #2: Abstraction\n\nAbstraction complements this Encapsulation: the Screen team doesn‚Äôt need to know the internal details of Button (just it‚Äôs API), and vice-versa\nRelevant data and functions can be ‚Äúpublic‚Äù, irrelevant internal data and functions ‚Äúprivate‚Äù\n(Like with type hints), Python doesn‚Äôt enforce this distinction, but (unlike with type hints) most libraries do separate public from private by a variable-naming convention‚Ä¶"
  },
  {
    "objectID": "w04/slides.html#public-protected-private-attributes-in-python",
    "href": "w04/slides.html#public-protected-private-attributes-in-python",
    "title": "Week 4: Data Structures from Scratch with OOP",
    "section": "Public, Protected, Private Attributes in Python",
    "text": "Public, Protected, Private Attributes in Python\n\n[Public (default)] No underscores: public_var\n[Protected] One underscore: _protected_var\n[Private] Two underscores: __private_var\n\n\n\n\n\nCode\nclass MySecretInfo:\n  __the_info = \"I love Carly Rae Jepsen\"\n\ninfo_obj = MySecretInfo()\ninfo_obj.__the_info\n\n\n\n---------------------------------------------------------------------------\nAttributeError                            Traceback (most recent call last)\nCell In[1], line 5\n      2   __the_info = \"I love Carly Rae Jepsen\"\n      4 info_obj = MySecretInfo()\n----&gt; 5 info_obj.__the_info\n\nAttributeError: 'MySecretInfo' object has no attribute '__the_info'\n\n\n\nGuess we can‚Äôt access it then, right? üòÆ‚Äçüí®\n\n\n\nCode\ninfo_obj._MySecretInfo__the_info\n\n\n'I love Carly Rae Jepsen'\n\n\n\nNOO MY SECRET!!! üò≠\nPls don‚Äôt tell anyone"
  },
  {
    "objectID": "w04/slides.html#key-oop-features-3-4-inheritance-polymorphism",
    "href": "w04/slides.html#key-oop-features-3-4-inheritance-polymorphism",
    "title": "Week 4: Data Structures from Scratch with OOP",
    "section": "Key OOP Features #3-4: Inheritance, Polymorphism",
    "text": "Key OOP Features #3-4: Inheritance, Polymorphism\n\nBetter explained in diagrams than words (next 10 slides!), but we can get a sense by thinking about their etymology:\n‚ÄúInheritance‚Äù comes from ‚Äúheir‚Äù, like ‚Äúheir to the throne‚Äù\n\nParent passes on [things they possess] to their children\n\n‚ÄúPolymorphism‚Äù: Poly = ‚Äúmany‚Äù, Morphe = ‚Äúforms‚Äù\n\nHow does Python know what to do when we print()?\nIt ‚Äújust works‚Äù because print() (through __str__()) takes on many (!) forms (!): each type of object has its own implementation of __str__()"
  },
  {
    "objectID": "w04/slides.html#use-case-bookstore-inventory-management",
    "href": "w04/slides.html#use-case-bookstore-inventory-management",
    "title": "Week 4: Data Structures from Scratch with OOP",
    "section": "Use Case: Bookstore Inventory Management",
    "text": "Use Case: Bookstore Inventory Management\n\nImage source"
  },
  {
    "objectID": "w04/slides.html#in-pictures",
    "href": "w04/slides.html#in-pictures",
    "title": "Week 4: Data Structures from Scratch with OOP",
    "section": "In Pictures",
    "text": "In Pictures\n\n\n\n\n\n\nG\n\nBookstore Relational Diagram\n\n\nBookstore\n\nBookstore\n\nName\n\nLocation\n\nBooklist\n\nGet_Inventory()\n\nSort_Inventory()\n\n\n\nPlace\n\nPlace\n\nCity\n\nState\n\nCountry\n\nPrint_Map()\n\n\n\nBookstore:loc-&gt;Place:placehead\n\n\nHas One\n\n\n\nBook\n\nBook\n\nTitle\n\nAuthors\n\nNum Pages\n\nPreview()\n\n\n\nBookstore:bl-&gt;Book:bookhead\n\n\nHas Multiple\n\n\n\nPerson\n\nPerson\n\nFamily Name\n\nGiven Name\n\n\n\nBook:auths-&gt;Person:personhead\n\n\nHas Multiple"
  },
  {
    "objectID": "w04/slides.html#creating-classes",
    "href": "w04/slides.html#creating-classes",
    "title": "Week 4: Data Structures from Scratch with OOP",
    "section": "Creating Classes",
    "text": "Creating Classes\n\nUse case: Creating an inventory system for a Bookstore\n\n\n\n\n\nCode\nclass Bookstore:\n    def __init__(self, name, location):\n        self.name = name\n        self.location = location\n        self.books = []\n\n    def __getitem__(self, index):\n        return self.books[index]\n\n    def __repr__(self):\n        return self.__str__()\n\n    def __str__(self):\n        return f\"Bookstore[{self.get_num_books()} books]\"\n\n    def add_books(self, book_list):\n        self.books.extend(book_list)\n\n    def get_books(self):\n        return self.books\n\n    def get_inventory(self):\n        book_lines = []\n        for book_index, book in enumerate(self.get_books()):\n            cur_book_line = f\"{book_index}. {str(book)}\"\n            book_lines.append(cur_book_line)\n        return \"\\n\".join(book_lines)\n\n    def get_num_books(self):\n        return len(self.get_books())\n\n    def sort_books(self, sort_key):\n        self.books.sort(key=sort_key)\n\nclass Book:\n    def __init__(self, title, authors, num_pages):\n        self.title = title\n        self.authors = authors\n        self.num_pages = num_pages\n\n    def __str__(self):\n        return f\"Book[title={self.get_title()}, authors={self.get_authors()}, pages={self.get_num_pages()}]\"\n\n    def get_authors(self):\n        return self.authors\n\n    def get_first_author(self):\n        return self.authors[0]\n\n    def get_num_pages(self):\n        return self.num_pages\n\n    def get_title(self):\n        return self.title\n\nclass Person:\n    def __init__(self, family_name, given_name):\n        self.family_name = family_name\n        self.given_name = given_name\n\n    def __repr__(self):\n        return self.__str__()\n\n    def __str__(self):\n        return f\"Person[{self.get_family_name()}, {self.get_given_name()}]\"\n\n    def get_family_name(self):\n        return self.family_name\n\n    def get_given_name(self):\n        return self.given_name\n\n\n\n\n\nCode\nmy_bookstore = Bookstore(\"Bookland\", \"Washington, DC\")\nplath = Person(\"Plath\", \"Sylvia\")\nbell_jar = Book(\"The Bell Jar\", [plath], 244)\nmarx = Person(\"Marx\", \"Karl\")\nengels = Person(\"Engels\", \"Friedrich\")\nmanifesto = Book(\"The Communist Manifesto\", [marx, engels], 43)\nelster = Person(\"Elster\", \"Jon\")\ncement = Book(\"The Cement of Society\", [elster], 311)\nmy_bookstore.add_books([bell_jar, manifesto, cement])\nprint(my_bookstore)\nprint(my_bookstore[0])\nprint(\"Inventory:\")\nprint(my_bookstore.get_inventory())\n\n\nBookstore[3 books]\nBook[title=The Bell Jar, authors=[Person[Plath, Sylvia]], pages=244]\nInventory:\n0. Book[title=The Bell Jar, authors=[Person[Plath, Sylvia]], pages=244]\n1. Book[title=The Communist Manifesto, authors=[Person[Marx, Karl], Person[Engels, Friedrich]], pages=43]\n2. Book[title=The Cement of Society, authors=[Person[Elster, Jon]], pages=311]"
  },
  {
    "objectID": "w04/slides.html#doing-things-with-classes",
    "href": "w04/slides.html#doing-things-with-classes",
    "title": "Week 4: Data Structures from Scratch with OOP",
    "section": "Doing Things With Classes",
    "text": "Doing Things With Classes\n\nNow we can use our OOP structure, for example to sort the inventory in different ways!\n\n\n\n\nAlphabetical (By First Author)\n\n\n\nCode\nsort_alpha = lambda x: x.get_first_author().get_family_name()\nmy_bookstore.sort_books(sort_key = sort_alpha)\nprint(my_bookstore.get_inventory())\n\n\n0. Book[title=The Cement of Society, authors=[Person[Elster, Jon]], pages=311]\n1. Book[title=The Communist Manifesto, authors=[Person[Marx, Karl], Person[Engels, Friedrich]], pages=43]\n2. Book[title=The Bell Jar, authors=[Person[Plath, Sylvia]], pages=244]\n\n\n\n\nBy Page Count\n\n\n\nCode\nsort_pages = lambda x: x.get_num_pages()\nmy_bookstore.sort_books(sort_key = sort_pages)\nprint(my_bookstore.get_inventory())\n\n\n0. Book[title=The Communist Manifesto, authors=[Person[Marx, Karl], Person[Engels, Friedrich]], pages=43]\n1. Book[title=The Bell Jar, authors=[Person[Plath, Sylvia]], pages=244]\n2. Book[title=The Cement of Society, authors=[Person[Elster, Jon]], pages=311]"
  },
  {
    "objectID": "w04/slides.html#inheritance-and-polymorphism",
    "href": "w04/slides.html#inheritance-and-polymorphism",
    "title": "Week 4: Data Structures from Scratch with OOP",
    "section": "Inheritance and Polymorphism",
    "text": "Inheritance and Polymorphism\n\nEncapsulate general properties in parent class, specific properties in child classes\n\n\n(You can edit this or make your own UML diagrams in nomnoml!)"
  },
  {
    "objectID": "w04/slides.html#or-is-this-better",
    "href": "w04/slides.html#or-is-this-better",
    "title": "Week 4: Data Structures from Scratch with OOP",
    "section": "Or‚Ä¶ Is This Better?",
    "text": "Or‚Ä¶ Is This Better?\n\nEdit in nomnoml"
  },
  {
    "objectID": "w04/slides.html#design-choices",
    "href": "w04/slides.html#design-choices",
    "title": "Week 4: Data Structures from Scratch with OOP",
    "section": "Design Choices",
    "text": "Design Choices\n\nGoal is encapsulation: which objects should have which properties/methods?\nExample: Fiction vs.¬†Non-Fiction. How important is this distinction for your use case?\n\n\n\n\nOption 1: As Property of Book\n\n\n\nCode\nfrom enum import Enum\nclass BookType(Enum):\n    NONFICTION = 0\n    FICTION = 1\n\nclass Book:\n    def __init__(self, title: str, authors: list[Person], num_pages: int, type: BookType):\n        self.title = title\n        self.authors = authors\n        self.num_pages = num_pages\n        self.type = type\n\n    def __str__(self):\n        return f\"Book[title={self.title}, authors={self.authors}, pages={self.num_pages}, type={self.type}]\"\n\n\n\n\nCode\njoyce = Person(\"Joyce\", \"James\")\nulysses = Book(\"Ulysses\", [joyce], 732, BookType.FICTION)\nschelling = Person(\"Schelling\", \"Thomas\")\nmicromotives = Book(\"Micromotives and Macrobehavior\", [schelling], 252, BookType.NONFICTION)\nprint(ulysses)\nprint(micromotives)\n\n\nBook[title=Ulysses, authors=[Person[Joyce, James]], pages=732, type=BookType.FICTION]\nBook[title=Micromotives and Macrobehavior, authors=[Person[Schelling, Thomas]], pages=252, type=BookType.NONFICTION]\n\n\n\n\nOption 2: Separate Classes\n\n\n\nCode\n# class Book defined as earlier\nclass FictionBook(Book):\n    def __init__(self, title, authors, num_pages, characters):\n        super().__init__(title, authors, num_pages)\n        self.characters = characters\n\nclass NonfictionBook(Book):\n    def __init__(self, title, authors, num_pages, topic):\n        super().__init__(title, authors, num_pages)\n        self.topic = topic\n\n\n\n\nCode\njoyce = Person(\"Joyce\", \"James\")\nulysses = FictionBook(\"Ulysses\", [joyce], 732, [\"Daedalus\"])\nschelling = Person(\"Schelling\", \"Thomas\")\nmicromotives = NonfictionBook(\"Micromotives and Macrobehavior\", [schelling], 252, \"Economics\")\nprint(ulysses)\nprint(micromotives)\n\n\nBook[title=Ulysses, authors=[Person[Joyce, James]], pages=732]\nBook[title=Micromotives and Macrobehavior, authors=[Person[Schelling, Thomas]], pages=252]"
  },
  {
    "objectID": "w04/slides.html#looking-under-the-hood-of-a-data-structure",
    "href": "w04/slides.html#looking-under-the-hood-of-a-data-structure",
    "title": "Week 4: Data Structures from Scratch with OOP",
    "section": "Looking Under the Hood of a Data Structure",
    "text": "Looking Under the Hood of a Data Structure\n\nLast week we saw the math for why we can ‚Äúabstract away from‚Äù the details of how a particular language works\nWe want to understand these structures independently of the specifics of their implementation in Python (for now)\nSo, let‚Äôs construct our own simplified versions of the basic structures, and use these simplified versions to get a sense for their efficiency\n\n(The ‚Äútrue‚Äù Python versions may be hyper-optimized but, as we‚Äôll see, there are fundamental constraints on runtime, assuming \\(P \\neq NP\\))"
  },
  {
    "objectID": "w04/slides.html#tuples",
    "href": "w04/slides.html#tuples",
    "title": "Week 4: Data Structures from Scratch with OOP",
    "section": "Tuples",
    "text": "Tuples\n\n\nCode\nclass MyTuple:\n  def __init__(self, thing1, thing2):\n    self.thing1 = thing1\n    self.thing2 = thing2\n\n  def __repr__(self):\n    return f\"({self.thing1}, {self.thing2})\"\n\n  def __str__(self):\n    return self.__repr__()\n\nt1 = MyTuple('a','b')\nt2 = MyTuple(111, 222)\nprint(t1)\nprint(t2)\n\n\n(a, b)\n(111, 222)"
  },
  {
    "objectID": "w04/slides.html#lists",
    "href": "w04/slides.html#lists",
    "title": "Week 4: Data Structures from Scratch with OOP",
    "section": "Lists",
    "text": "Lists\n\n\nThe list itself just points to a root item:\n\n\nCode\nclass MyList:\n  def __init__(self):\n    self.root = None\n\n  def append(self, new_item):\n    if self.root is None:\n      self.root = MyListItem(new_item)\n    else:\n      self.root.append(new_item)\n\n  def __repr__(self):\n    return self.root.__repr__()\n\n\n\nAn item has contents, pointer to next item:\n\n\nCode\nclass MyListItem:\n  def __init__(self, content):\n    self.content = content\n    self.next = None\n\n  def append(self, new_item):\n    if self.next is None:\n      self.next = MyListItem(new_item)\n    else:\n      self.next.append(new_item)\n\n  def __repr__(self):\n    my_content = self.content\n    return my_content if self.next is None else f\"{my_content}, {self.next.__repr__()}\"\n\n\n\n\n\nCode\nusers = MyList()\nusers.append('Jeff')\nusers.append('Alma')\nusers.append('Bo')\nprint(users)\n\n\nJeff, Alma, Bo"
  },
  {
    "objectID": "w04/slides.html#so-how-many-steps-are-required",
    "href": "w04/slides.html#so-how-many-steps-are-required",
    "title": "Week 4: Data Structures from Scratch with OOP",
    "section": "So, How Many ‚ÄúSteps‚Äù Are Required‚Ä¶",
    "text": "So, How Many ‚ÄúSteps‚Äù Are Required‚Ä¶\n\nTo retrieve the first element in a MyTuple?\nTo retrieve the last element in a MyTuple?\nTo retrieve the first element in a MyList?\nTo retrieve the last element in a MyList?"
  },
  {
    "objectID": "w04/slides.html#how-many-steps",
    "href": "w04/slides.html#how-many-steps",
    "title": "Week 4: Data Structures from Scratch with OOP",
    "section": "How Many Steps?",
    "text": "How Many Steps?\n\n\nWith a MyTuple:\n\n\nCode\nt1.thing1\n\n\n'a'\n\n\n\\(\\implies\\) 1 step\n\n\nCode\nt1.thing2\n\n\n'b'\n\n\n\\(\\implies\\) 1 step\n\nWith a MyList:\n\n\nCode\nprint(users.root.content)\n\n\nJeff\n\n\n\\(\\implies\\) 1 step\n\n\nCode\ncurrent_node = users.root\nwhile current_node.next is not None:\n  current_node = current_node.next\nprint(current_node.content)\n\n\nBo\n\n\n\\(\\implies\\) (3 steps)\n‚Ä¶But why 3? How many steps if the list contained 5 elements? \\(N\\) elements?"
  },
  {
    "objectID": "w04/slides.html#visualizing-linkedlists",
    "href": "w04/slides.html#visualizing-linkedlists",
    "title": "Week 4: Data Structures from Scratch with OOP",
    "section": "Visualizing LinkedLists",
    "text": "Visualizing LinkedLists\n\n\n\nCode\nfrom hw2 import LinkedList, InventoryItem\nll = LinkedList()\nitem1 = InventoryItem('Mango', 50)\nll.append(item1)\nitem2 = InventoryItem('Pickle', 60)\nll.append(item2)\nitem3 = InventoryItem('Artichoke', 55)\nll.append(item3)\nitem5 = InventoryItem('Banana', 123)\nll.append(item5)\nitem6 = InventoryItem('Aardvark', 11)\nll.append(item6)\nHTML(visualize_ll(ll))"
  },
  {
    "objectID": "w04/slides.html#linkedlist-foundation-for-most-data-structures",
    "href": "w04/slides.html#linkedlist-foundation-for-most-data-structures",
    "title": "Week 4: Data Structures from Scratch with OOP",
    "section": "LinkedList: Foundation for Most(?) Data Structures!",
    "text": "LinkedList: Foundation for Most(?) Data Structures!\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclass LinkedList(BaseModel):\n  root: LinkedListNode | None\n\nclass LinkedListNode(BaseModel):\n  content: object\n  next: LinkedListNode | None\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclass BinaryTree(BaseModel):\n  root: BinaryTreeNode | None\n\nclass BinaryTreeNode(BaseModel):\n  content: object\n  left: BinaryTreeNode | None\n  right: BinaryTreeNode | None\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclass QuadTree(BaseModel):\n  root: QuadTreeNode | None\n\nclass QuadTreeNode:\n  content: object\n  nw: QuadTreeNode | None\n  ne: QuadTreeNode | None\n  sw: QuadTreeNode | None\n  se: QuadTreeNode | None"
  },
  {
    "objectID": "w04/slides.html#visualizing-binarysearchtree",
    "href": "w04/slides.html#visualizing-binarysearchtree",
    "title": "Week 4: Data Structures from Scratch with OOP",
    "section": "Visualizing BinarySearchTree",
    "text": "Visualizing BinarySearchTree\n\n\n\nCode\nfrom hw2 import BinarySearchTree\nbst = BinarySearchTree()\nitem1 = InventoryItem('Mango', 50)\nbst.add(item1)\nitem2 = InventoryItem('Pickle', 60)\nbst.add(item2)\nitem3 = InventoryItem('Artichoke', 55)\nbst.add(item3)\nitem5 = InventoryItem('Banana', 123)\nbst.add(item5)\nitem6 = InventoryItem('Aardvark', 11)\nbst.add(item6)\nHTML(visualize(bst))"
  },
  {
    "objectID": "w04/slides.html#so-then-why-is-this-a-whole-dsan-class",
    "href": "w04/slides.html#so-then-why-is-this-a-whole-dsan-class",
    "title": "Week 4: Data Structures from Scratch with OOP",
    "section": "So Then‚Ä¶ Why Is This a Whole DSAN Class?",
    "text": "So Then‚Ä¶ Why Is This a Whole DSAN Class?\n\nThe core structures are identical, but we can optimize different goals (efficient insertion, sorting, retrieval, deletion, ‚Ä¶) by changing the invariants maintained by the algorithms internal to our structure\nCrucial Insertion-Sort invariant: \\(\\textsf{Sorted}(1,i)\\) true when we move to entry \\(i + 1\\) (key)\nCrucial HW2(!) invariant: \\(\\textsf{Up-To-Date-Favorite}(1,i-1)\\) true when entry \\(i + 1\\) (next result in dataset) arrives\n\\(\\implies\\) Efficiency of obtaining favorite style guaranteed to be constant-time, \\(\\overline{O}(1)\\)!\nOtherwise, would be \\(\\overline{O}(n) &gt; \\overline{O}(1)\\) (linear approach) or at best \\(\\overline{O}(\\log_2(n)) &gt; \\overline{O}(1)\\) (divide-and-conquer)"
  },
  {
    "objectID": "w04/slides.html#our-list-of-item-price-pairs",
    "href": "w04/slides.html#our-list-of-item-price-pairs",
    "title": "Week 4: Data Structures from Scratch with OOP",
    "section": "Our List of (Item, Price) Pairs",
    "text": "Our List of (Item, Price) Pairs\n\n\nCode\nprice_list = []\nprice_list.append(('Banana', 10))\nprice_list.append(('Apple', 2))\nprice_list.append(('Four Loko', 5))\nprice_list\n\n\n[('Banana', 10), ('Apple', 2), ('Four Loko', 5)]\n\n\n\nAs the list gets longer, it gets harder and harder to find where you wrote down a specific item and its price\nAs you now know, you could use linear search, \\(\\overline{O}(n)\\), or if you ensure alphabetical order (an invariant!), you could use binary, divide-and-conquer search, \\(\\overline{O}(\\log_2(n))\\)\nWe can do even better: \\(\\overline{O}(1)\\). First w/magic, but then math"
  },
  {
    "objectID": "w04/slides.html#strange-at-first-technique-for-algorithm-analysis-oracles",
    "href": "w04/slides.html#strange-at-first-technique-for-algorithm-analysis-oracles",
    "title": "Week 4: Data Structures from Scratch with OOP",
    "section": "Strange-At-First Technique for Algorithm Analysis: Oracles",
    "text": "Strange-At-First Technique for Algorithm Analysis: Oracles\n\nWhat if we had a magical wizard who could just tell us where to find an item we were looking for?\nSounds like I‚Äôm joking or saying ‚Äúwhat if we had a billion $ and infinite aura and we could fly and walk through walls‚Äù\nAnd yet, through the magic of math and computer science, there are concrete hashing algorithms which ensure (in a mathematically-provable way!) ‚Äúalmost certain‚Äù \\(\\overline{O}(1)\\) lookup time"
  },
  {
    "objectID": "w04/slides.html#mathematical-strategy-of-oracles",
    "href": "w04/slides.html#mathematical-strategy-of-oracles",
    "title": "Week 4: Data Structures from Scratch with OOP",
    "section": "Mathematical Strategy of Oracles",
    "text": "Mathematical Strategy of Oracles\n\nWe‚Äôll use a concrete, simplified hash function to illustrate\nMathematically we‚Äôll be able to get something like\n\n\\[\nT(n) = \\overline{O}(1 + \\underbrace{\\epsilon}_{\\mathclap{\\text{Collision rate}}} \\cdot n)\n\\]\n\nWhich tells us: if we had an oracle who could ensure near-0 collision rates, then \\(T(n) = \\overline{O}(1)\\).\nAnd, by a beautiful division-of-labor, other computer scientists figure out the near-0 collision rates part, giving us\n\n\\[\np^{‚úÖ} = [T(n) = \\overline{O}(1 + \\epsilon n)], q^{‚úÖ} = [\\epsilon \\approx 0],\\text{ so } p \\wedge q \\implies T(n) \\overset{‚úÖ}{=} \\overline{O}(1).\n\\]"
  },
  {
    "objectID": "w04/slides.html#back-to-the-price-list",
    "href": "w04/slides.html#back-to-the-price-list",
    "title": "Week 4: Data Structures from Scratch with OOP",
    "section": "Back to the Price List",
    "text": "Back to the Price List\n\nOur hash function: hash(item) = first letter of item\n\n\\[\nh(\\texttt{x}) = \\texttt{x[0]}\n\\]\n\nh('Banana') = 'B', h('Monkey') = 'M'\nWith this function in hand, we can create a length-26 array, one slot for each letter in alphabet, and then write down (item, price) pairs in whatever slot item hashes to"
  },
  {
    "objectID": "w04/slides.html#the-importance-of-differentiating-operations-insertion-vs.-lookup",
    "href": "w04/slides.html#the-importance-of-differentiating-operations-insertion-vs.-lookup",
    "title": "Week 4: Data Structures from Scratch with OOP",
    "section": "The Importance of Differentiating Operations: Insertion vs.¬†Lookup",
    "text": "The Importance of Differentiating Operations: Insertion vs.¬†Lookup\n\nSo far, we have \\(\\overline{O}(1)\\) insertion via hashing\nWe also get \\(\\overline{O}(1)\\) lookup!\nWhen customer hands us an item (say, 'Banana'), we compute the hash (B), look in that slot, and obtain the price for bananas.\nWe also get \\(\\overline{O}(1)\\) updating (hash to find the old price, update it to have new price) and \\(\\overline{O}(1)\\) deletion (hash to find the slot containing the item, then erase it from that slot)"
  },
  {
    "objectID": "w04/slides.html#so-whats-the-catch",
    "href": "w04/slides.html#so-whats-the-catch",
    "title": "Week 4: Data Structures from Scratch with OOP",
    "section": "So What‚Äôs the Catch???",
    "text": "So What‚Äôs the Catch???\n\nBLUEBERRIES show up to ruin our day (as usual üòû)\nWe hash, so far so good: h('Blueberries') = 'B'\nBut then we go to the B slot and see that (Bananas, 10) is already there!!! Wtf do we do here‚Ä¶ don‚Äôt panic!\nThe answer? We open our HW2 from DSAN 5500 and remember that we have our lovely friend the LinkedList that we can use whenever and however we want!"
  },
  {
    "objectID": "w04/slides.html#arrays-vs.-linked-lists",
    "href": "w04/slides.html#arrays-vs.-linked-lists",
    "title": "Week 4: Data Structures from Scratch with OOP",
    "section": "Arrays vs.¬†Linked Lists",
    "text": "Arrays vs.¬†Linked Lists\n\nJeff is hiding something here‚Ä¶ Why jump to LinkedList? Why not just‚Ä¶ another length-26 array, for example?\nFor this we open up our Week 1 slides and remember the stack vs.¬†heap distinction: we know how many letters in the alphabet, we don‚Äôt know how many items starting with B (or, if we do, we want to be able to expand/contract our price list to handle new/discontinued items)\nTerminology for this kind of ‚Äúhybrid‚Äù data structure: HashTable is an Array that ‚Äúdegenerates into‚Äù a LinkedList (when there are collisions)"
  },
  {
    "objectID": "w04/slides.html#look-how-far-we-came",
    "href": "w04/slides.html#look-how-far-we-came",
    "title": "Week 4: Data Structures from Scratch with OOP",
    "section": "Look How Far We Came!",
    "text": "Look How Far We Came!\n\nBeginning of class: Only structure we knew allowing insertion (LinkedList) was \\(\\overline{O}(n)\\) for everythihg\nEnd of class: New structure where suddenly everything is \\(\\overline{O}(1)\\), except in ‚Äúunlucky‚Äù cases, in which it partially ‚Äúdegenerates‚Äù into a LinkedList\n\\(\\implies\\) The ‚Äúinevitable‚Äù \\(\\overline{O}(n)\\) runtime has transformed into the unlucky worst-case upper bound\n\\(\\implies\\) By taking core data structures/algorithms from your toolkit, you can ‚Äúpiece together‚Äù hybrid structures whose whole (runtime) is better than the sum of its parts"
  },
  {
    "objectID": "w04/slides.html#taking-this-idea-and-running-with-it",
    "href": "w04/slides.html#taking-this-idea-and-running-with-it",
    "title": "Week 4: Data Structures from Scratch with OOP",
    "section": "Taking This Idea and Running With It",
    "text": "Taking This Idea and Running With It\n\nNext week we‚Äôll look at BinarySearchTree (BST)\nSince it‚Äôs just a glorified LinkedList, we‚Äôll be able to take our HashMap from today and ‚Äúdrop in‚Äù the BST to play the role the LinkedList is playing right now\nIf collision, we‚Äôll create a BST with its \\(\\overline{O}(\\log(n))\\) operations, rather than a LinkedList with its \\(\\overline{O}(n)\\) operations\n\\(\\implies\\) HashMap will go from:\n\n\\(\\overline{O}(1)\\) best-case but \\(\\overline{O}(n)\\) worst-case to\n\\(\\overline{O}(1)\\) best-case but \\(\\overline{O}(\\log_2(n))\\) worst-case!"
  },
  {
    "objectID": "w05/index.html",
    "href": "w05/index.html",
    "title": "Week 5: Hash Tables and Binary Search Trees",
    "section": "",
    "text": "Open slides in new window ‚Üí",
    "crumbs": [
      "Week 5: {{< var w05.date-md >}}"
    ]
  },
  {
    "objectID": "w05/index.html#our-list-of-item-price-pairs",
    "href": "w05/index.html#our-list-of-item-price-pairs",
    "title": "Week 5: Hash Tables and Binary Search Trees",
    "section": "Our List of (Item, Price) Pairs",
    "text": "Our List of (Item, Price) Pairs\n\n\nCode\nprice_list = []\nprice_list.append(('Banana', 10))\nprice_list.append(('Apple', 2))\nprice_list.append(('Four Loko', 5))\nprice_list\n\n\n[('Banana', 10), ('Apple', 2), ('Four Loko', 5)]\n\n\n\nAs the list gets longer, it gets harder and harder to find where you wrote down a specific item and its price\nAs you now know, you could use linear search, \\(\\overline{O}(n)\\), or if you ensure alphabetical order (an invariant!), you could use binary, divide-and-conquer search, \\(\\overline{O}(\\log_2(n))\\)\nWe can do even better: \\(\\overline{O}(1)\\). First w/magic, but then math",
    "crumbs": [
      "Week 5: {{< var w05.date-md >}}"
    ]
  },
  {
    "objectID": "w05/index.html#strange-at-first-technique-for-algorithm-analysis-oracles",
    "href": "w05/index.html#strange-at-first-technique-for-algorithm-analysis-oracles",
    "title": "Week 5: Hash Tables and Binary Search Trees",
    "section": "Strange-At-First Technique for Algorithm Analysis: Oracles",
    "text": "Strange-At-First Technique for Algorithm Analysis: Oracles\n\nWhat if we had a magical wizard who could just tell us where to find an item we were looking for?\nSounds like I‚Äôm joking or saying ‚Äúwhat if we had a billion $ and infinite aura and we could fly and walk through walls‚Äù\nAnd yet, through the magic of math and computer science, there are concrete hashing algorithms which ensure (in a mathematically-provable way!) ‚Äúalmost certain‚Äù \\(\\overline{O}(1)\\) lookup time",
    "crumbs": [
      "Week 5: {{< var w05.date-md >}}"
    ]
  },
  {
    "objectID": "w05/index.html#mathematical-strategy-of-oracles",
    "href": "w05/index.html#mathematical-strategy-of-oracles",
    "title": "Week 5: Hash Tables and Binary Search Trees",
    "section": "Mathematical Strategy of Oracles",
    "text": "Mathematical Strategy of Oracles\n\nWe‚Äôll use a concrete, simplified hash function to illustrate\nMathematically we‚Äôll be able to get something like\n\n\\[\nT(n) = \\overline{O}(1 + \\underbrace{\\epsilon}_{\\mathclap{\\text{Collision rate}}} \\cdot n)\n\\]\n\nWhich tells us: if we had an oracle who could ensure near-0 collision rates, then \\(T(n) = \\overline{O}(1)\\).\nAnd, by a beautiful division-of-labor, other computer scientists figure out the near-0 collision rates part, giving us\n\n\\[\np^{‚úÖ} = [T(n) = \\overline{O}(1 + \\epsilon n)], q^{‚úÖ} = [\\epsilon \\approx 0],\\text{ so } p \\wedge q \\implies T(n) \\overset{‚úÖ}{=} \\overline{O}(1).\n\\]",
    "crumbs": [
      "Week 5: {{< var w05.date-md >}}"
    ]
  },
  {
    "objectID": "w05/index.html#back-to-the-price-list",
    "href": "w05/index.html#back-to-the-price-list",
    "title": "Week 5: Hash Tables and Binary Search Trees",
    "section": "Back to the Price List",
    "text": "Back to the Price List\n\nOur hash function: hash(item) = first letter of item\n\n\\[\nh(\\texttt{x}) = \\texttt{x[0]}\n\\]\n\nh('Banana') = 'B', h('Monkey') = 'M'\nWith this function in hand, we can create a length-26 array, one slot for each letter in alphabet, and then write down (item, price) pairs in whatever slot item hashes to",
    "crumbs": [
      "Week 5: {{< var w05.date-md >}}"
    ]
  },
  {
    "objectID": "w05/index.html#the-importance-of-differentiating-operations-insertion-vs.-lookup",
    "href": "w05/index.html#the-importance-of-differentiating-operations-insertion-vs.-lookup",
    "title": "Week 5: Hash Tables and Binary Search Trees",
    "section": "The Importance of Differentiating Operations: Insertion vs.¬†Lookup",
    "text": "The Importance of Differentiating Operations: Insertion vs.¬†Lookup\n\nSo far, we have \\(\\overline{O}(1)\\) insertion via hashing\nWe also get \\(\\overline{O}(1)\\) lookup!\nWhen customer hands us an item (say, 'Banana'), we compute the hash (B), look in that slot, and obtain the price for bananas.\nWe also get \\(\\overline{O}(1)\\) updating (hash to find the old price, update it to have new price) and \\(\\overline{O}(1)\\) deletion (hash to find the slot containing the item, then erase it from that slot)",
    "crumbs": [
      "Week 5: {{< var w05.date-md >}}"
    ]
  },
  {
    "objectID": "w05/index.html#so-whats-the-catch",
    "href": "w05/index.html#so-whats-the-catch",
    "title": "Week 5: Hash Tables and Binary Search Trees",
    "section": "So What‚Äôs the Catch???",
    "text": "So What‚Äôs the Catch???\n\nBLUEBERRIES show up to ruin our day (as usual üòû)\nWe hash, so far so good: h('Blueberries') = 'B'\nBut then we go to the B slot and see that (Bananas, 10) is already there!!! Wtf do we do here‚Ä¶ don‚Äôt panic!\nThe answer? We open our HW2 from DSAN 5500 and remember that we have our lovely friend the LinkedList that we can use whenever and however we want!",
    "crumbs": [
      "Week 5: {{< var w05.date-md >}}"
    ]
  },
  {
    "objectID": "w05/index.html#arrays-vs.-linked-lists",
    "href": "w05/index.html#arrays-vs.-linked-lists",
    "title": "Week 5: Hash Tables and Binary Search Trees",
    "section": "Arrays vs.¬†Linked Lists",
    "text": "Arrays vs.¬†Linked Lists\n\nJeff is hiding something here‚Ä¶ Why jump to LinkedList? Why not just‚Ä¶ another length-26 array, for example?\nFor this we open up our Week 1 slides and remember the stack vs.¬†heap distinction: we know how many letters in the alphabet, we don‚Äôt know how many items starting with B (or, if we do, we want to be able to expand/contract our price list to handle new/discontinued items)\nTerminology for this kind of ‚Äúhybrid‚Äù data structure: HashTable is an Array that ‚Äúdegenerates into‚Äù a LinkedList (when there are collisions)",
    "crumbs": [
      "Week 5: {{< var w05.date-md >}}"
    ]
  },
  {
    "objectID": "w05/index.html#look-how-far-we-came",
    "href": "w05/index.html#look-how-far-we-came",
    "title": "Week 5: Hash Tables and Binary Search Trees",
    "section": "Look How Far We Came!",
    "text": "Look How Far We Came!\n\nLast week: Only structure we knew allowing insertion (LinkedList) was \\(\\overline{O}(n)\\) for everythihg\nThis week: New structure where suddenly everything is \\(\\overline{O}(1)\\), except in ‚Äúunlucky‚Äù cases, in which it partially ‚Äúdegenerates‚Äù into a LinkedList\n\\(\\implies\\) The ‚Äúinevitable‚Äù \\(\\overline{O}(n)\\) runtime has transformed into the unlucky worst-case upper bound (feels like yesterday, all this was a dream)\n\\(\\implies\\) By taking core data structures/algorithms from your toolkit, you can ‚Äúpiece together‚Äù hybrid structures whose whole (runtime) is better than the sum of its parts",
    "crumbs": [
      "Week 5: {{< var w05.date-md >}}"
    ]
  },
  {
    "objectID": "w05/index.html#hash-tables-tldr-edition",
    "href": "w05/index.html#hash-tables-tldr-edition",
    "title": "Week 5: Hash Tables and Binary Search Trees",
    "section": "Hash Tables: tl;dr Edition",
    "text": "Hash Tables: tl;dr Edition\n\nKeys \\(k \\in \\mathcal{K}\\) are plugged into a (deterministic) hash function \\(h: \\mathcal{K} \\rightarrow \\{1, \\ldots, N\\}\\), producing an index where \\(k\\) is stored\nIf nothing at that index yet, store \\((k,v)\\) in empty slot\nIf already an item at that index, we have a ‚ö†Ô∏ècollision‚ö†Ô∏è\nWe could just throw away the old value (HW2 Part 1)\nOtherwise, need a way to store multiple items in one slot‚Ä¶ (a way to dynamically grow storage at given index)\nSolution you know so far: Linked Lists\nNew solution: Binary Search Trees!",
    "crumbs": [
      "Week 5: {{< var w05.date-md >}}"
    ]
  },
  {
    "objectID": "w05/index.html#bst-the-final-missing-piece",
    "href": "w05/index.html#bst-the-final-missing-piece",
    "title": "Week 5: Hash Tables and Binary Search Trees",
    "section": "BST: The Final Missing Piece",
    "text": "BST: The Final Missing Piece\n\nJust a glorified LinkedList! We‚Äôll be able to take our HashMap and ‚Äúdrop in‚Äù the BST to play the role LinkedList is playing right now\nIf collision, we‚Äôll create a BST with its \\(\\overline{O}(\\log(n))\\) operations, rather than a LinkedList with its \\(\\overline{O}(n)\\) operations\n\\(\\implies\\) HashMap will go from:\n\n\\(\\overline{O}(1)\\) best-case but \\(\\overline{O}(n)\\) worst-case to\n\\(\\overline{O}(1)\\) best-case but \\(\\overline{O}(\\log_2(n))\\) worst-case!",
    "crumbs": [
      "Week 5: {{< var w05.date-md >}}"
    ]
  },
  {
    "objectID": "w05/index.html#linked-lists-divide-and-conquer-bsts",
    "href": "w05/index.html#linked-lists-divide-and-conquer-bsts",
    "title": "Week 5: Hash Tables and Binary Search Trees",
    "section": "Linked Lists + Divide-and-Conquer = BSTs",
    "text": "Linked Lists + Divide-and-Conquer = BSTs\n\nBy now, the word ‚ÄúLinked List‚Äù should make you groan, cross your arms and start tapping your feet with impatience\n‚ÄúHere we go again‚Ä¶ the Linked List is gonna make us traverse through every single element before we reach the one we‚Äôre looking for‚Äù üòñ\nLinked List = Canon in D\nBinary Search Tree = Canon in D played by Hiromi Uehara‚Ä¶",
    "crumbs": [
      "Week 5: {{< var w05.date-md >}}"
    ]
  },
  {
    "objectID": "w05/index.html#hiromi-uehara",
    "href": "w05/index.html#hiromi-uehara",
    "title": "Week 5: Hash Tables and Binary Search Trees",
    "section": "Hiromi Uehara",
    "text": "Hiromi Uehara",
    "crumbs": [
      "Week 5: {{< var w05.date-md >}}"
    ]
  },
  {
    "objectID": "w05/index.html#the-metaphor-goes-deep",
    "href": "w05/index.html#the-metaphor-goes-deep",
    "title": "Week 5: Hash Tables and Binary Search Trees",
    "section": "The Metaphor Goes Deep!",
    "text": "The Metaphor Goes Deep!\n\nUehara‚Äôs Canon in D = Pachelbel‚Äôs + Fancier notes/rhythms on top of it\nBinary Search Trees = Linked Lists + Fancier structure built on top of it\n\nSpecifically: ‚Äúnext‚Äù pointer can now branch left or right, to ensure ordering of nodes\n\n\n\n\n\n\n\n\nclass LinkedListNode:\n    @property content\n    @property next\n\n\nclass BinarySearchTreeNode:\n    @property content\n    @property left\n    @property right",
    "crumbs": [
      "Week 5: {{< var w05.date-md >}}"
    ]
  },
  {
    "objectID": "w05/index.html#visualizing-bsts",
    "href": "w05/index.html#visualizing-bsts",
    "title": "Week 5: Hash Tables and Binary Search Trees",
    "section": "Visualizing BSTs",
    "text": "Visualizing BSTs\n\n\nCode\nfrom hw2 import LinkedList, InventoryItem, BinarySearchTree\nbst = BinarySearchTree()\nitem1 = InventoryItem('Mango', 50)\nbst.add(item1)\nitem2 = InventoryItem('Pickle', 60)\nbst.add(item2)\nitem3 = InventoryItem('Artichoke', 55)\nbst.add(item3)\nitem5 = InventoryItem('Banana', 123)\nbst.add(item5)\nitem6 = InventoryItem('Aardvark', 11)\nbst.add(item6)\nHTML(visualize(bst))\n\n\nWarning: node None_0, port f1 unrecognized\nWarning: node None_1, port f1 unrecognized\nWarning: node None_2, port f1 unrecognized\nWarning: node None_3, port f1 unrecognized\nWarning: node None_4, port f1 unrecognized\nWarning: node None_5, port f1 unrecognized",
    "crumbs": [
      "Week 5: {{< var w05.date-md >}}"
    ]
  },
  {
    "objectID": "w05/index.html#practical-considerations",
    "href": "w05/index.html#practical-considerations",
    "title": "Week 5: Hash Tables and Binary Search Trees",
    "section": "Practical Considerations",
    "text": "Practical Considerations\n\nHash Maps: Only useful if keys are hashable\n\nPython has a built-in collections.abc.Hashable class, such that hash(my_obj) works iff isinstance(my_obj, Hashable)\n\nBinary Search Trees: Only useful if keys have an ordering\n\n‚ÄúStandard‚Äù classes (int, str, datetime) come with implementations of ordering, but if you make your own class you need to implement the ordering for it!\n\n(Linked Lists still work for non-hashable/orderable objects!)",
    "crumbs": [
      "Week 5: {{< var w05.date-md >}}"
    ]
  },
  {
    "objectID": "w05/index.html#why-just-work",
    "href": "w05/index.html#why-just-work",
    "title": "Week 5: Hash Tables and Binary Search Trees",
    "section": "Why ==, <, >= ‚ÄúJust Work‚Äù",
    "text": "Why ==, &lt;, &gt;= ‚ÄúJust Work‚Äù\n\nNot magic! Someone has explicitly written a set of functions telling Python what to do when it sees e.g.¬†obj1 &lt; obj2\nExample: let‚Äôs implement an ordering of vectors \\(\\mathbf{x} \\in \\mathbb{R}^2\\) based on Pareto dominance",
    "crumbs": [
      "Week 5: {{< var w05.date-md >}}"
    ]
  },
  {
    "objectID": "w05/index.html#ordering-vectors-via-pareto-dominance",
    "href": "w05/index.html#ordering-vectors-via-pareto-dominance",
    "title": "Week 5: Hash Tables and Binary Search Trees",
    "section": "Ordering Vectors via Pareto Dominance",
    "text": "Ordering Vectors via Pareto Dominance\n\n\nCode\nclass UtilVector:\n    def __init__(self, u1, u2):\n        self.u1 = u1\n        self.u2 = u2\n    \n    def __eq__(self, other):\n        if not isinstance(other, UtilVector):\n            return NotImplemented\n        return self.u1 == other.u1 and self.u2 == other.u2\n\n    def __ne__(self, other):\n        if not isinstance(other, UtilVector):\n            return NotImplemented\n        return self.u1 != other.u1 or self.u2 != other.u2\n    \n    def __gt__(self, other):\n        if not isinstance(other, UtilVector):\n            return NotImplemented\n        return self.u1 &gt; other.u1 and self.u2 &gt;= other.u2 or self.u1 &gt;= other.u1 and self.u2 &gt; other.u2\n\n    def __ge__(self, other):\n        return self.__gt__(other) or self.__eq__(other)\n        \n    def __lt__(self, other):\n        if not isinstance(other, UtilVector):\n            return NotImplemented\n        return other.__gt__(self)\n\n    def __le__(self, other):\n        return self.__lt__(other) or self.__eq__(other)\nxA = UtilVector(2, 2)\nxB = UtilVector(3, 2)\nprint(xB &gt; xA)\nxC = UtilVector(2, 3)\nprint(xC &gt; xB)\nimport itertools\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nx0 = UtilVector(4, 6)\nutil_vals = np.arange(0, 11, 0.5)\nutil_pairs = list(itertools.product(util_vals, util_vals))\nutil_df = pd.DataFrame(util_pairs, columns=['x','y'])\ndef compare_to_x0(row):\n    row_vec = UtilVector(row['x'], row['y'])\n    gt_result = int(row_vec &gt; x0)\n    lt_result = int(row_vec &lt; x0)\n    return gt_result - lt_result\nutil_df['greater'] = util_df.apply(compare_to_x0, axis=1)\n#my_palette = sns.color_palette(['#E69F00','lightgray','#CCFFCC'])\nmy_palette = sns.color_palette(['#FF3535','lightgray','#35FF35'])\nsns.relplot(\n    data=util_df,\n    x='x', y='y',\n    hue='greater',\n    palette=my_palette,\n    marker='X', s=150\n);\nx0_df = pd.DataFrame({'x': [4], 'y': [6]})\nplt.scatter(data=x0_df, x='x', y='y', color='black')\nplt.gca().set_aspect('equal')\n\n\nTrue\nFalse",
    "crumbs": [
      "Week 5: {{< var w05.date-md >}}"
    ]
  },
  {
    "objectID": "w05/index.html#back-to-bsts",
    "href": "w05/index.html#back-to-bsts",
    "title": "Week 5: Hash Tables and Binary Search Trees",
    "section": "Back to BSTs",
    "text": "Back to BSTs\n\nFor HW2, we provide you with an InventoryItem class\nTwo instance variables: item_name and price\nEquivalence relations:\n\n__eq__(other), __ne__(other)\n\nOrdering relations:\n\n__lt__(other), __le__(other), __gt__(other), __ge__(other)\n\nBonus: __repr__() and __str__()",
    "crumbs": [
      "Week 5: {{< var w05.date-md >}}"
    ]
  },
  {
    "objectID": "w05/index.html#lls-rightarrow-bsts-the-hard-part",
    "href": "w05/index.html#lls-rightarrow-bsts-the-hard-part",
    "title": "Week 5: Hash Tables and Binary Search Trees",
    "section": "LLs \\(\\rightarrow\\) BSTs: The Hard Part",
    "text": "LLs \\(\\rightarrow\\) BSTs: The Hard Part\n\nWhen we were working with LinkedLists, we could access all items by just ‚Äúlooping through‚Äù, from one element to the next, printing as we go along.\nBut‚Ä¶ for a BinarySearchTree, since our structure can now branch as we traverse it‚Ä¶ How do we ‚Äúloop through‚Äù a BST?\nTwo fundamentally different ways to traverse every node in our BST\n‚ÄúOpposites‚Äù of each other, so that one is often extremely efficient and the other extremely inefficient for a given task\nYour job as a data scientist is to think carefully about which one is more efficient for a given goal!",
    "crumbs": [
      "Week 5: {{< var w05.date-md >}}"
    ]
  },
  {
    "objectID": "w05/index.html#two-ways-to-traverse-irl-version",
    "href": "w05/index.html#two-ways-to-traverse-irl-version",
    "title": "Week 5: Hash Tables and Binary Search Trees",
    "section": "Two Ways to Traverse: IRL Version",
    "text": "Two Ways to Traverse: IRL Version\n\nImagine we‚Äôre trying to learn about a topic \\(\\tau\\) using Wikipedia, so we find its article \\(\\tau_0\\)\nThere are two ‚Äúextremes‚Äù in terms of strategies we could follow for learning, given the contents of the article as well as the links it contains to other articles\n\n\n\n\n\n\n\n Depth-First Search (DFS)\n\n\n\n\nOpen \\(\\tau_0\\) and start reading it; When we encounter a link we always click it and immediately start reading the new article.\nIf we hit an article with no links (or a dead end/broken link), we finish reading it and click the back button, picking up where we left off in the previous article. When we reach the end of \\(\\tau_0\\), we‚Äôre done!\n\n\n\n\n\n\n\n\n\n Breadth-First Search (BFS)\n\n\n\n\nBookmark \\(\\tau_0\\) in a folder called ‚ÄúLevel 0 Articles‚Äù; open and start reading it\nWhen we encounter a link, we put it in a ‚ÄúLevel 1 Articles‚Äù folder, but continue reading \\(\\tau_0\\) until we reach the end.\nWe then open all ‚ÄúLevel 1 Articles‚Äù in new tabs, placing links we encounter in these articles into a ‚ÄúLevel 2 Articles‚Äù folder, that we only start reading once all ‚ÄúLevel 1 Articles‚Äù are read\nWe continue like this, reading ‚ÄúLevel 3 Articles‚Äù once we‚Äôre done with ‚ÄúLevel 2 Articles‚Äù, ‚ÄúLevel 4 Articles‚Äù once we‚Äôre done with ‚ÄúLevel 3 Articles‚Äù, and so on. (Can you see a sense in which this is the ‚Äúopposite‚Äù of DFS?)\n\n\n\n\n‚Ä¶Let‚Äôs try them out! I clicked ‚ÄúRandom Article‚Äù and got Eustache de Saint Pierre",
    "crumbs": [
      "Week 5: {{< var w05.date-md >}}"
    ]
  },
  {
    "objectID": "w05/index.html#two-ways-to-traverse-picture-version",
    "href": "w05/index.html#two-ways-to-traverse-picture-version",
    "title": "Week 5: Hash Tables and Binary Search Trees",
    "section": "Two Ways to Traverse: Picture Version",
    "text": "Two Ways to Traverse: Picture Version\n\n\n\n\nCode\nfrom hw2 import IterAlgorithm, NodeProcessor\nvisualize(bst)\n\n\nWarning: node None_0, port f1 unrecognized\nWarning: node None_1, port f1 unrecognized\nWarning: node None_2, port f1 unrecognized\nWarning: node None_3, port f1 unrecognized\nWarning: node None_4, port f1 unrecognized\nWarning: node None_5, port f1 unrecognized\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nprint(\"DFS:\")\ndfs_processor = NodeProcessor(IterAlgorithm.DEPTH_FIRST)\n#print(type(dfs_processor.node_container))\ndfs_processor.iterate_over(bst)\n\nprint(\"\\nBFS:\")\nbfs_processor = NodeProcessor(IterAlgorithm.BREADTH_FIRST)\n#print(type(bfs_processor.node_container))\nbfs_processor.iterate_over(bst)\n\n\nDFS:\nInventoryItem[item_name=Mango,price=50]\nInventoryItem[item_name=Pickle,price=60]\nInventoryItem[item_name=Artichoke,price=55]\nInventoryItem[item_name=Banana,price=123]\nInventoryItem[item_name=Aardvark,price=11]\n\nBFS:\nInventoryItem[item_name=Mango,price=50]\nInventoryItem[item_name=Artichoke,price=55]\nInventoryItem[item_name=Pickle,price=60]\nInventoryItem[item_name=Aardvark,price=11]\nInventoryItem[item_name=Banana,price=123]",
    "crumbs": [
      "Week 5: {{< var w05.date-md >}}"
    ]
  },
  {
    "objectID": "w05/index.html#two-ways-to-traverse-in-words-version",
    "href": "w05/index.html#two-ways-to-traverse-in-words-version",
    "title": "Week 5: Hash Tables and Binary Search Trees",
    "section": "Two Ways to Traverse: In-Words Version",
    "text": "Two Ways to Traverse: In-Words Version\n\nDepth-First Search (DFS): With this approach, we iterate through the BST by always taking the left child as the ‚Äúnext‚Äù child until we hit a leaf node (which means, we cannot follow this left-child pointer any longer, since a leaf node does not have a left child or a right child!), and only at that point do we back up and take the right children we skipped.\nBreadth-First Search (BFS): This is the ‚Äúopposite‚Äù of DFS in the sense that we traverse the tree level-by-level, never moving to the next level of the tree until we‚Äôre sure that we have visited every node on the current level.",
    "crumbs": [
      "Week 5: {{< var w05.date-md >}}"
    ]
  },
  {
    "objectID": "w05/index.html#two-ways-to-traverse-animated-version",
    "href": "w05/index.html#two-ways-to-traverse-animated-version",
    "title": "Week 5: Hash Tables and Binary Search Trees",
    "section": "Two Ways to Traverse: Animated Version",
    "text": "Two Ways to Traverse: Animated Version\n\n\n\n\n\n\n\n\n\nDepth-First Search (from Wikimedia Commons)\n\n\n\n\n\n\n\nBreadth-First Search (from Wikimedia Commons)",
    "crumbs": [
      "Week 5: {{< var w05.date-md >}}"
    ]
  },
  {
    "objectID": "w05/index.html#two-ways-to-traverse-underlying-data-structures-version",
    "href": "w05/index.html#two-ways-to-traverse-underlying-data-structures-version",
    "title": "Week 5: Hash Tables and Binary Search Trees",
    "section": "Two Ways to Traverse: Underlying Data Structures Version",
    "text": "Two Ways to Traverse: Underlying Data Structures Version\n\nNow that you have some intuition, you may be thinking that they might require very different code to implement ü§î\nThis is where the mathematical-formal linkage between the two becomes ultra helpful!\nIt turns out (and a full-on algorithmic theory course makes you prove) that\n\n\nDepth-First Search can be accomplished by processing nodes in an order determined by adding each to a stack, while\nBreadth-First Search can be accomplished by processing nodes in an order determined by adding each to a queue!\n\n\n\\(\\implies\\) Literally identical code, ‚Äúpulling out‚Äù the word stack and replacing it with the word queue within your code (or vice-versa).\nIf you have your Software Engineer Hats on, you‚Äôll recognize this as a job for an abstraction layer!",
    "crumbs": [
      "Week 5: {{< var w05.date-md >}}"
    ]
  },
  {
    "objectID": "w05/index.html#two-ways-to-traverse-hw2-version",
    "href": "w05/index.html#two-ways-to-traverse-hw2-version",
    "title": "Week 5: Hash Tables and Binary Search Trees",
    "section": "Two Ways to Traverse: HW2 Version",
    "text": "Two Ways to Traverse: HW2 Version\n\nYou‚Äôll make a class called NodeProcessor, with a single iterate_over(tree) function\nThis function‚Äîwithout any changes in the code or even any if statements!‚Äîwill be capable of both DFS and BFS\nIt will take in a ThingContainer (could be a stack or a queue, you won‚Äôt know which), which has two functions:\n\nput_new_thing_in(new_thing)\ntake_existing_thing_out()",
    "crumbs": [
      "Week 5: {{< var w05.date-md >}}"
    ]
  },
  {
    "objectID": "w05/index.html#three-animals-in-the-dfs-species",
    "href": "w05/index.html#three-animals-in-the-dfs-species",
    "title": "Week 5: Hash Tables and Binary Search Trees",
    "section": "Three Animals in the DFS Species",
    "text": "Three Animals in the DFS Species\n\n\n\n\n\n\n\nDFS Procedure\nAlgorithm\n\n\n\n\nPre-Order Traversal\n1. Print node2. Traverse left subtree3. Traverse right subtree\n\n\nIn-Order Traversal üßê‚ÄºÔ∏è\n1. Traverse left subtree2. Print node3. Traverse right subtree\n\n\nPost-Order Traversal\n1. Traverse left subtree2. Traverse right subtree3. Print node",
    "crumbs": [
      "Week 5: {{< var w05.date-md >}}"
    ]
  },
  {
    "objectID": "w05/index.html#the-three-animals-traverse-our-inventory-tree",
    "href": "w05/index.html#the-three-animals-traverse-our-inventory-tree",
    "title": "Week 5: Hash Tables and Binary Search Trees",
    "section": "The Three Animals Traverse our Inventory Tree",
    "text": "The Three Animals Traverse our Inventory Tree\n\n\nCode\nvisualize(bst)\n\n\nWarning: node None_0, port f1 unrecognized\nWarning: node None_1, port f1 unrecognized\nWarning: node None_2, port f1 unrecognized\nWarning: node None_3, port f1 unrecognized\nWarning: node None_4, port f1 unrecognized\nWarning: node None_5, port f1 unrecognized",
    "crumbs": [
      "Week 5: {{< var w05.date-md >}}"
    ]
  },
  {
    "objectID": "w05/index.html#final-notes-for-hw2",
    "href": "w05/index.html#final-notes-for-hw2",
    "title": "Week 5: Hash Tables and Binary Search Trees",
    "section": "Final Notes for HW2",
    "text": "Final Notes for HW2\n\nThe last part challenges you to ask: why stop at a hash based on just the first letter of the key?\nWe could just as easily use the first two letters:\nh('AA') = 0, h('AB') = 1, ‚Ä¶, h('AZ') = 25,\nh('BA') = 26, h('BB') = 27, ‚Ä¶, h('BZ') = 51,\nh('CA') = 52, ‚Ä¶, h('ZZ') = 675.\nYou will see how this gets us even closer to the elusive \\(O(1)\\)! And we could get even closer with three letters, four letters, ‚Ä¶ ü§îü§îü§î",
    "crumbs": [
      "Week 5: {{< var w05.date-md >}}"
    ]
  },
  {
    "objectID": "w05/slides.html#our-list-of-item-price-pairs",
    "href": "w05/slides.html#our-list-of-item-price-pairs",
    "title": "Week 5: Hash Tables and Binary Search Trees",
    "section": "Our List of (Item, Price) Pairs",
    "text": "Our List of (Item, Price) Pairs\n\n\nCode\nprice_list = []\nprice_list.append(('Banana', 10))\nprice_list.append(('Apple', 2))\nprice_list.append(('Four Loko', 5))\nprice_list\n\n\n[('Banana', 10), ('Apple', 2), ('Four Loko', 5)]\n\n\n\nAs the list gets longer, it gets harder and harder to find where you wrote down a specific item and its price\nAs you now know, you could use linear search, \\(\\overline{O}(n)\\), or if you ensure alphabetical order (an invariant!), you could use binary, divide-and-conquer search, \\(\\overline{O}(\\log_2(n))\\)\nWe can do even better: \\(\\overline{O}(1)\\). First w/magic, but then math"
  },
  {
    "objectID": "w05/slides.html#strange-at-first-technique-for-algorithm-analysis-oracles",
    "href": "w05/slides.html#strange-at-first-technique-for-algorithm-analysis-oracles",
    "title": "Week 5: Hash Tables and Binary Search Trees",
    "section": "Strange-At-First Technique for Algorithm Analysis: Oracles",
    "text": "Strange-At-First Technique for Algorithm Analysis: Oracles\n\nWhat if we had a magical wizard who could just tell us where to find an item we were looking for?\nSounds like I‚Äôm joking or saying ‚Äúwhat if we had a billion $ and infinite aura and we could fly and walk through walls‚Äù\nAnd yet, through the magic of math and computer science, there are concrete hashing algorithms which ensure (in a mathematically-provable way!) ‚Äúalmost certain‚Äù \\(\\overline{O}(1)\\) lookup time"
  },
  {
    "objectID": "w05/slides.html#mathematical-strategy-of-oracles",
    "href": "w05/slides.html#mathematical-strategy-of-oracles",
    "title": "Week 5: Hash Tables and Binary Search Trees",
    "section": "Mathematical Strategy of Oracles",
    "text": "Mathematical Strategy of Oracles\n\nWe‚Äôll use a concrete, simplified hash function to illustrate\nMathematically we‚Äôll be able to get something like\n\n\\[\nT(n) = \\overline{O}(1 + \\underbrace{\\epsilon}_{\\mathclap{\\text{Collision rate}}} \\cdot n)\n\\]\n\nWhich tells us: if we had an oracle who could ensure near-0 collision rates, then \\(T(n) = \\overline{O}(1)\\).\nAnd, by a beautiful division-of-labor, other computer scientists figure out the near-0 collision rates part, giving us\n\n\\[\np^{‚úÖ} = [T(n) = \\overline{O}(1 + \\epsilon n)], q^{‚úÖ} = [\\epsilon \\approx 0],\\text{ so } p \\wedge q \\implies T(n) \\overset{‚úÖ}{=} \\overline{O}(1).\n\\]"
  },
  {
    "objectID": "w05/slides.html#back-to-the-price-list",
    "href": "w05/slides.html#back-to-the-price-list",
    "title": "Week 5: Hash Tables and Binary Search Trees",
    "section": "Back to the Price List",
    "text": "Back to the Price List\n\nOur hash function: hash(item) = first letter of item\n\n\\[\nh(\\texttt{x}) = \\texttt{x[0]}\n\\]\n\nh('Banana') = 'B', h('Monkey') = 'M'\nWith this function in hand, we can create a length-26 array, one slot for each letter in alphabet, and then write down (item, price) pairs in whatever slot item hashes to"
  },
  {
    "objectID": "w05/slides.html#the-importance-of-differentiating-operations-insertion-vs.-lookup",
    "href": "w05/slides.html#the-importance-of-differentiating-operations-insertion-vs.-lookup",
    "title": "Week 5: Hash Tables and Binary Search Trees",
    "section": "The Importance of Differentiating Operations: Insertion vs.¬†Lookup",
    "text": "The Importance of Differentiating Operations: Insertion vs.¬†Lookup\n\nSo far, we have \\(\\overline{O}(1)\\) insertion via hashing\nWe also get \\(\\overline{O}(1)\\) lookup!\nWhen customer hands us an item (say, 'Banana'), we compute the hash (B), look in that slot, and obtain the price for bananas.\nWe also get \\(\\overline{O}(1)\\) updating (hash to find the old price, update it to have new price) and \\(\\overline{O}(1)\\) deletion (hash to find the slot containing the item, then erase it from that slot)"
  },
  {
    "objectID": "w05/slides.html#so-whats-the-catch",
    "href": "w05/slides.html#so-whats-the-catch",
    "title": "Week 5: Hash Tables and Binary Search Trees",
    "section": "So What‚Äôs the Catch???",
    "text": "So What‚Äôs the Catch???\n\nBLUEBERRIES show up to ruin our day (as usual üòû)\nWe hash, so far so good: h('Blueberries') = 'B'\nBut then we go to the B slot and see that (Bananas, 10) is already there!!! Wtf do we do here‚Ä¶ don‚Äôt panic!\nThe answer? We open our HW2 from DSAN 5500 and remember that we have our lovely friend the LinkedList that we can use whenever and however we want!"
  },
  {
    "objectID": "w05/slides.html#arrays-vs.-linked-lists",
    "href": "w05/slides.html#arrays-vs.-linked-lists",
    "title": "Week 5: Hash Tables and Binary Search Trees",
    "section": "Arrays vs.¬†Linked Lists",
    "text": "Arrays vs.¬†Linked Lists\n\nJeff is hiding something here‚Ä¶ Why jump to LinkedList? Why not just‚Ä¶ another length-26 array, for example?\nFor this we open up our Week 1 slides and remember the stack vs.¬†heap distinction: we know how many letters in the alphabet, we don‚Äôt know how many items starting with B (or, if we do, we want to be able to expand/contract our price list to handle new/discontinued items)\nTerminology for this kind of ‚Äúhybrid‚Äù data structure: HashTable is an Array that ‚Äúdegenerates into‚Äù a LinkedList (when there are collisions)"
  },
  {
    "objectID": "w05/slides.html#look-how-far-we-came",
    "href": "w05/slides.html#look-how-far-we-came",
    "title": "Week 5: Hash Tables and Binary Search Trees",
    "section": "Look How Far We Came!",
    "text": "Look How Far We Came!\n\nLast week: Only structure we knew allowing insertion (LinkedList) was \\(\\overline{O}(n)\\) for everythihg\nThis week: New structure where suddenly everything is \\(\\overline{O}(1)\\), except in ‚Äúunlucky‚Äù cases, in which it partially ‚Äúdegenerates‚Äù into a LinkedList\n\\(\\implies\\) The ‚Äúinevitable‚Äù \\(\\overline{O}(n)\\) runtime has transformed into the unlucky worst-case upper bound (feels like yesterday, all this was a dream)\n\\(\\implies\\) By taking core data structures/algorithms from your toolkit, you can ‚Äúpiece together‚Äù hybrid structures whose whole (runtime) is better than the sum of its parts"
  },
  {
    "objectID": "w05/slides.html#hash-tables-tldr-edition",
    "href": "w05/slides.html#hash-tables-tldr-edition",
    "title": "Week 5: Hash Tables and Binary Search Trees",
    "section": "Hash Tables: tl;dr Edition",
    "text": "Hash Tables: tl;dr Edition\n\nKeys \\(k \\in \\mathcal{K}\\) are plugged into a (deterministic) hash function \\(h: \\mathcal{K} \\rightarrow \\{1, \\ldots, N\\}\\), producing an index where \\(k\\) is stored\nIf nothing at that index yet, store \\((k,v)\\) in empty slot\nIf already an item at that index, we have a ‚ö†Ô∏ècollision‚ö†Ô∏è\nWe could just throw away the old value (HW2 Part 1)\nOtherwise, need a way to store multiple items in one slot‚Ä¶ (a way to dynamically grow storage at given index)\nSolution you know so far: Linked Lists\nNew solution: Binary Search Trees!"
  },
  {
    "objectID": "w05/slides.html#bst-the-final-missing-piece",
    "href": "w05/slides.html#bst-the-final-missing-piece",
    "title": "Week 5: Hash Tables and Binary Search Trees",
    "section": "BST: The Final Missing Piece",
    "text": "BST: The Final Missing Piece\n\nJust a glorified LinkedList! We‚Äôll be able to take our HashMap and ‚Äúdrop in‚Äù the BST to play the role LinkedList is playing right now\nIf collision, we‚Äôll create a BST with its \\(\\overline{O}(\\log(n))\\) operations, rather than a LinkedList with its \\(\\overline{O}(n)\\) operations\n\\(\\implies\\) HashMap will go from:\n\n\\(\\overline{O}(1)\\) best-case but \\(\\overline{O}(n)\\) worst-case to\n\\(\\overline{O}(1)\\) best-case but \\(\\overline{O}(\\log_2(n))\\) worst-case!"
  },
  {
    "objectID": "w05/slides.html#linked-lists-divide-and-conquer-bsts",
    "href": "w05/slides.html#linked-lists-divide-and-conquer-bsts",
    "title": "Week 5: Hash Tables and Binary Search Trees",
    "section": "Linked Lists + Divide-and-Conquer = BSTs",
    "text": "Linked Lists + Divide-and-Conquer = BSTs\n\nBy now, the word ‚ÄúLinked List‚Äù should make you groan, cross your arms and start tapping your feet with impatience\n‚ÄúHere we go again‚Ä¶ the Linked List is gonna make us traverse through every single element before we reach the one we‚Äôre looking for‚Äù üòñ\nLinked List = Canon in D\nBinary Search Tree = Canon in D played by Hiromi Uehara‚Ä¶"
  },
  {
    "objectID": "w05/slides.html#hiromi-uehara",
    "href": "w05/slides.html#hiromi-uehara",
    "title": "Week 5: Hash Tables and Binary Search Trees",
    "section": "Hiromi Uehara",
    "text": "Hiromi Uehara"
  },
  {
    "objectID": "w05/slides.html#the-metaphor-goes-deep",
    "href": "w05/slides.html#the-metaphor-goes-deep",
    "title": "Week 5: Hash Tables and Binary Search Trees",
    "section": "The Metaphor Goes Deep!",
    "text": "The Metaphor Goes Deep!\n\nUehara‚Äôs Canon in D = Pachelbel‚Äôs + Fancier notes/rhythms on top of it\nBinary Search Trees = Linked Lists + Fancier structure built on top of it\n\nSpecifically: ‚Äúnext‚Äù pointer can now branch left or right, to ensure ordering of nodes\n\n\n\n\n\n\n\n\nclass LinkedListNode:\n    @property content\n    @property next\n\n\nclass BinarySearchTreeNode:\n    @property content\n    @property left\n    @property right"
  },
  {
    "objectID": "w05/slides.html#visualizing-bsts",
    "href": "w05/slides.html#visualizing-bsts",
    "title": "Week 5: Hash Tables and Binary Search Trees",
    "section": "Visualizing BSTs",
    "text": "Visualizing BSTs\n\n\n\nCode\nfrom hw2 import LinkedList, InventoryItem, BinarySearchTree\nbst = BinarySearchTree()\nitem1 = InventoryItem('Mango', 50)\nbst.add(item1)\nitem2 = InventoryItem('Pickle', 60)\nbst.add(item2)\nitem3 = InventoryItem('Artichoke', 55)\nbst.add(item3)\nitem5 = InventoryItem('Banana', 123)\nbst.add(item5)\nitem6 = InventoryItem('Aardvark', 11)\nbst.add(item6)\nHTML(visualize(bst))"
  },
  {
    "objectID": "w05/slides.html#practical-considerations",
    "href": "w05/slides.html#practical-considerations",
    "title": "Week 5: Hash Tables and Binary Search Trees",
    "section": "Practical Considerations",
    "text": "Practical Considerations\n\nHash Maps: Only useful if keys are hashable\n\nPython has a built-in collections.abc.Hashable class, such that hash(my_obj) works iff isinstance(my_obj, Hashable)\n\nBinary Search Trees: Only useful if keys have an ordering\n\n‚ÄúStandard‚Äù classes (int, str, datetime) come with implementations of ordering, but if you make your own class you need to implement the ordering for it!\n\n(Linked Lists still work for non-hashable/orderable objects!)"
  },
  {
    "objectID": "w05/slides.html#why-just-work",
    "href": "w05/slides.html#why-just-work",
    "title": "Week 5: Hash Tables and Binary Search Trees",
    "section": "Why ==, <, >= ‚ÄúJust Work‚Äù",
    "text": "Why ==, &lt;, &gt;= ‚ÄúJust Work‚Äù\n\nNot magic! Someone has explicitly written a set of functions telling Python what to do when it sees e.g.¬†obj1 &lt; obj2\nExample: let‚Äôs implement an ordering of vectors \\(\\mathbf{x} \\in \\mathbb{R}^2\\) based on Pareto dominance"
  },
  {
    "objectID": "w05/slides.html#ordering-vectors-via-pareto-dominance",
    "href": "w05/slides.html#ordering-vectors-via-pareto-dominance",
    "title": "Week 5: Hash Tables and Binary Search Trees",
    "section": "Ordering Vectors via Pareto Dominance",
    "text": "Ordering Vectors via Pareto Dominance\n\n\n\nCode\nclass UtilVector:\n    def __init__(self, u1, u2):\n        self.u1 = u1\n        self.u2 = u2\n    \n    def __eq__(self, other):\n        if not isinstance(other, UtilVector):\n            return NotImplemented\n        return self.u1 == other.u1 and self.u2 == other.u2\n\n    def __ne__(self, other):\n        if not isinstance(other, UtilVector):\n            return NotImplemented\n        return self.u1 != other.u1 or self.u2 != other.u2\n    \n    def __gt__(self, other):\n        if not isinstance(other, UtilVector):\n            return NotImplemented\n        return self.u1 &gt; other.u1 and self.u2 &gt;= other.u2 or self.u1 &gt;= other.u1 and self.u2 &gt; other.u2\n\n    def __ge__(self, other):\n        return self.__gt__(other) or self.__eq__(other)\n        \n    def __lt__(self, other):\n        if not isinstance(other, UtilVector):\n            return NotImplemented\n        return other.__gt__(self)\n\n    def __le__(self, other):\n        return self.__lt__(other) or self.__eq__(other)\nxA = UtilVector(2, 2)\nxB = UtilVector(3, 2)\nprint(xB &gt; xA)\nxC = UtilVector(2, 3)\nprint(xC &gt; xB)\nimport itertools\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nx0 = UtilVector(4, 6)\nutil_vals = np.arange(0, 11, 0.5)\nutil_pairs = list(itertools.product(util_vals, util_vals))\nutil_df = pd.DataFrame(util_pairs, columns=['x','y'])\ndef compare_to_x0(row):\n    row_vec = UtilVector(row['x'], row['y'])\n    gt_result = int(row_vec &gt; x0)\n    lt_result = int(row_vec &lt; x0)\n    return gt_result - lt_result\nutil_df['greater'] = util_df.apply(compare_to_x0, axis=1)\n#my_palette = sns.color_palette(['#E69F00','lightgray','#CCFFCC'])\nmy_palette = sns.color_palette(['#FF3535','lightgray','#35FF35'])\nsns.relplot(\n    data=util_df,\n    x='x', y='y',\n    hue='greater',\n    palette=my_palette,\n    marker='X', s=150\n);\nx0_df = pd.DataFrame({'x': [4], 'y': [6]})\nplt.scatter(data=x0_df, x='x', y='y', color='black')\nplt.gca().set_aspect('equal')\n\n\n\nTrue\nFalse"
  },
  {
    "objectID": "w05/slides.html#back-to-bsts",
    "href": "w05/slides.html#back-to-bsts",
    "title": "Week 5: Hash Tables and Binary Search Trees",
    "section": "Back to BSTs",
    "text": "Back to BSTs\n\nFor HW2, we provide you with an InventoryItem class\nTwo instance variables: item_name and price\nEquivalence relations:\n\n__eq__(other), __ne__(other)\n\nOrdering relations:\n\n__lt__(other), __le__(other), __gt__(other), __ge__(other)\n\nBonus: __repr__() and __str__()"
  },
  {
    "objectID": "w05/slides.html#lls-rightarrow-bsts-the-hard-part",
    "href": "w05/slides.html#lls-rightarrow-bsts-the-hard-part",
    "title": "Week 5: Hash Tables and Binary Search Trees",
    "section": "LLs \\(\\rightarrow\\) BSTs: The Hard Part",
    "text": "LLs \\(\\rightarrow\\) BSTs: The Hard Part\n\nWhen we were working with LinkedLists, we could access all items by just ‚Äúlooping through‚Äù, from one element to the next, printing as we go along.\nBut‚Ä¶ for a BinarySearchTree, since our structure can now branch as we traverse it‚Ä¶ How do we ‚Äúloop through‚Äù a BST?\nTwo fundamentally different ways to traverse every node in our BST\n‚ÄúOpposites‚Äù of each other, so that one is often extremely efficient and the other extremely inefficient for a given task\nYour job as a data scientist is to think carefully about which one is more efficient for a given goal!"
  },
  {
    "objectID": "w05/slides.html#two-ways-to-traverse-irl-version",
    "href": "w05/slides.html#two-ways-to-traverse-irl-version",
    "title": "Week 5: Hash Tables and Binary Search Trees",
    "section": "Two Ways to Traverse: IRL Version",
    "text": "Two Ways to Traverse: IRL Version\n\nImagine we‚Äôre trying to learn about a topic \\(\\tau\\) using Wikipedia, so we find its article \\(\\tau_0\\)\nThere are two ‚Äúextremes‚Äù in terms of strategies we could follow for learning, given the contents of the article as well as the links it contains to other articles\n\n\n\n\n\n Depth-First Search (DFS)\n\n\n\nOpen \\(\\tau_0\\) and start reading it; When we encounter a link we always click it and immediately start reading the new article.\nIf we hit an article with no links (or a dead end/broken link), we finish reading it and click the back button, picking up where we left off in the previous article. When we reach the end of \\(\\tau_0\\), we‚Äôre done!\n\n\n\n\n\n\n\n\n\n Breadth-First Search (BFS)\n\n\n\nBookmark \\(\\tau_0\\) in a folder called ‚ÄúLevel 0 Articles‚Äù; open and start reading it\nWhen we encounter a link, we put it in a ‚ÄúLevel 1 Articles‚Äù folder, but continue reading \\(\\tau_0\\) until we reach the end.\nWe then open all ‚ÄúLevel 1 Articles‚Äù in new tabs, placing links we encounter in these articles into a ‚ÄúLevel 2 Articles‚Äù folder, that we only start reading once all ‚ÄúLevel 1 Articles‚Äù are read\nWe continue like this, reading ‚ÄúLevel 3 Articles‚Äù once we‚Äôre done with ‚ÄúLevel 2 Articles‚Äù, ‚ÄúLevel 4 Articles‚Äù once we‚Äôre done with ‚ÄúLevel 3 Articles‚Äù, and so on. (Can you see a sense in which this is the ‚Äúopposite‚Äù of DFS?)\n\n\n\n\n\n\n‚Ä¶Let‚Äôs try them out! I clicked ‚ÄúRandom Article‚Äù and got Eustache de Saint Pierre"
  },
  {
    "objectID": "w05/slides.html#two-ways-to-traverse-picture-version",
    "href": "w05/slides.html#two-ways-to-traverse-picture-version",
    "title": "Week 5: Hash Tables and Binary Search Trees",
    "section": "Two Ways to Traverse: Picture Version",
    "text": "Two Ways to Traverse: Picture Version\n\n\n\n\nCode\nfrom hw2 import IterAlgorithm, NodeProcessor\nvisualize(bst)\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nprint(\"DFS:\")\ndfs_processor = NodeProcessor(IterAlgorithm.DEPTH_FIRST)\n#print(type(dfs_processor.node_container))\ndfs_processor.iterate_over(bst)\n\nprint(\"\\nBFS:\")\nbfs_processor = NodeProcessor(IterAlgorithm.BREADTH_FIRST)\n#print(type(bfs_processor.node_container))\nbfs_processor.iterate_over(bst)\n\n\nDFS:\nInventoryItem[item_name=Mango,price=50]\nInventoryItem[item_name=Pickle,price=60]\nInventoryItem[item_name=Artichoke,price=55]\nInventoryItem[item_name=Banana,price=123]\nInventoryItem[item_name=Aardvark,price=11]\n\nBFS:\nInventoryItem[item_name=Mango,price=50]\nInventoryItem[item_name=Artichoke,price=55]\nInventoryItem[item_name=Pickle,price=60]\nInventoryItem[item_name=Aardvark,price=11]\nInventoryItem[item_name=Banana,price=123]"
  },
  {
    "objectID": "w05/slides.html#two-ways-to-traverse-in-words-version",
    "href": "w05/slides.html#two-ways-to-traverse-in-words-version",
    "title": "Week 5: Hash Tables and Binary Search Trees",
    "section": "Two Ways to Traverse: In-Words Version",
    "text": "Two Ways to Traverse: In-Words Version\n\nDepth-First Search (DFS): With this approach, we iterate through the BST by always taking the left child as the ‚Äúnext‚Äù child until we hit a leaf node (which means, we cannot follow this left-child pointer any longer, since a leaf node does not have a left child or a right child!), and only at that point do we back up and take the right children we skipped.\nBreadth-First Search (BFS): This is the ‚Äúopposite‚Äù of DFS in the sense that we traverse the tree level-by-level, never moving to the next level of the tree until we‚Äôre sure that we have visited every node on the current level."
  },
  {
    "objectID": "w05/slides.html#two-ways-to-traverse-animated-version",
    "href": "w05/slides.html#two-ways-to-traverse-animated-version",
    "title": "Week 5: Hash Tables and Binary Search Trees",
    "section": "Two Ways to Traverse: Animated Version",
    "text": "Two Ways to Traverse: Animated Version\n\n\n\n\n\n\n\n\n\nDepth-First Search (from Wikimedia Commons)\n\n\n\n\n\n\n\nBreadth-First Search (from Wikimedia Commons)"
  },
  {
    "objectID": "w05/slides.html#two-ways-to-traverse-underlying-data-structures-version",
    "href": "w05/slides.html#two-ways-to-traverse-underlying-data-structures-version",
    "title": "Week 5: Hash Tables and Binary Search Trees",
    "section": "Two Ways to Traverse: Underlying Data Structures Version",
    "text": "Two Ways to Traverse: Underlying Data Structures Version\n\nNow that you have some intuition, you may be thinking that they might require very different code to implement ü§î\nThis is where the mathematical-formal linkage between the two becomes ultra helpful!\nIt turns out (and a full-on algorithmic theory course makes you prove) that\n\n\nDepth-First Search can be accomplished by processing nodes in an order determined by adding each to a stack, while\nBreadth-First Search can be accomplished by processing nodes in an order determined by adding each to a queue!\n\n\n\\(\\implies\\) Literally identical code, ‚Äúpulling out‚Äù the word stack and replacing it with the word queue within your code (or vice-versa).\nIf you have your Software Engineer Hats on, you‚Äôll recognize this as a job for an abstraction layer!"
  },
  {
    "objectID": "w05/slides.html#two-ways-to-traverse-hw2-version",
    "href": "w05/slides.html#two-ways-to-traverse-hw2-version",
    "title": "Week 5: Hash Tables and Binary Search Trees",
    "section": "Two Ways to Traverse: HW2 Version",
    "text": "Two Ways to Traverse: HW2 Version\n\nYou‚Äôll make a class called NodeProcessor, with a single iterate_over(tree) function\nThis function‚Äîwithout any changes in the code or even any if statements!‚Äîwill be capable of both DFS and BFS\nIt will take in a ThingContainer (could be a stack or a queue, you won‚Äôt know which), which has two functions:\n\nput_new_thing_in(new_thing)\ntake_existing_thing_out()"
  },
  {
    "objectID": "w05/slides.html#three-animals-in-the-dfs-species",
    "href": "w05/slides.html#three-animals-in-the-dfs-species",
    "title": "Week 5: Hash Tables and Binary Search Trees",
    "section": "Three Animals in the DFS Species",
    "text": "Three Animals in the DFS Species\n\n\n\n\n\n\n\nDFS Procedure\nAlgorithm\n\n\n\n\nPre-Order Traversal\n1. Print node2. Traverse left subtree3. Traverse right subtree\n\n\nIn-Order Traversal üßê‚ÄºÔ∏è\n1. Traverse left subtree2. Print node3. Traverse right subtree\n\n\nPost-Order Traversal\n1. Traverse left subtree2. Traverse right subtree3. Print node"
  },
  {
    "objectID": "w05/slides.html#the-three-animals-traverse-our-inventory-tree",
    "href": "w05/slides.html#the-three-animals-traverse-our-inventory-tree",
    "title": "Week 5: Hash Tables and Binary Search Trees",
    "section": "The Three Animals Traverse our Inventory Tree",
    "text": "The Three Animals Traverse our Inventory Tree\n\n\nCode\nvisualize(bst)"
  },
  {
    "objectID": "w05/slides.html#final-notes-for-hw2",
    "href": "w05/slides.html#final-notes-for-hw2",
    "title": "Week 5: Hash Tables and Binary Search Trees",
    "section": "Final Notes for HW2",
    "text": "Final Notes for HW2\n\nThe last part challenges you to ask: why stop at a hash based on just the first letter of the key?\nWe could just as easily use the first two letters:\nh('AA') = 0, h('AB') = 1, ‚Ä¶, h('AZ') = 25,\nh('BA') = 26, h('BB') = 27, ‚Ä¶, h('BZ') = 51,\nh('CA') = 52, ‚Ä¶, h('ZZ') = 675.\nYou will see how this gets us even closer to the elusive \\(O(1)\\)! And we could get even closer with three letters, four letters, ‚Ä¶ ü§îü§îü§î"
  },
  {
    "objectID": "recordings/index.html",
    "href": "recordings/index.html",
    "title": "Lecture Recordings",
    "section": "",
    "text": "Week\n\n\nTitle\n\n\nDate\n\n\n\n\n\n\n11\n\n\nWeek 11: Moving from Serial to Parallel Pipelines\n\n\nMonday Apr 8, 2024\n\n\n\n\n10\n\n\nWeek 10: Data Pipeline Orchestration\n\n\nMonday Mar 25, 2024\n\n\n\n\n9\n\n\nWeek 9: Data Validation, Data Processing Pipelines\n\n\nMonday Mar 18, 2024\n\n\n\n\n8\n\n\nWeek 8: In-Class Midterm\n\n\nMonday Mar 11, 2024\n\n\n\n\n6\n\n\nWeek 6: Code Examples and Midterm Prep\n\n\nTuesday Feb 20, 2024\n\n\n\n\n5\n\n\nWeek 5: Binary Search Trees\n\n\nMonday Feb 12, 2024\n\n\n\n\n4\n\n\nWeek 4: Heaps, Stacks, Hash Maps\n\n\nMonday Feb 5, 2024\n\n\n\n\n3\n\n\nWeek 3: Data Structures and Computational Complexity\n\n\nMonday Jan 29, 2024\n\n\n\n\n2\n\n\nWeek 2: Software Design Patterns and Object-Oriented Programming\n\n\nMonday Jan 22, 2024\n\n\n\n\n1\n\n\nWeek 1: Course Intro and Motivation\n\n\nWednesday Jan 10, 2024\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "writeups/prefect/index.html",
    "href": "writeups/prefect/index.html",
    "title": "‚ÄòServing‚Äô Code to Prefect from Colab",
    "section": "",
    "text": "There‚Äôs a detail in terms of how Prefect‚Äôs UI actually accesses and runs the code you write in your Colab notebook cells that I totally failed to spend enough time talking about, and it‚Äôs leading to a lot of confusion towards the end of HW3, so I wanted to write this to clarify those details quickly in a way to let you finish HW3 as easily as possible!"
  },
  {
    "objectID": "writeups/prefect/index.html#two-ways-of-running-code",
    "href": "writeups/prefect/index.html#two-ways-of-running-code",
    "title": "‚ÄòServing‚Äô Code to Prefect from Colab",
    "section": "Two Ways of Running Code",
    "text": "Two Ways of Running Code\nUp until this unit with Prefect and pipeline orchestration libraries, you really only had one way of writing and executing code:\n\nWrite the code in a cell of an .ipynb notebook, then\nClick the Run button (or Cmd+EnterCmd+Enter), and see what happens\n\n(This is related to clicking the Render/Preview button, since you can think of that as a shortcut for running all the cells and combining the results into an HTML document)\nIn the first few questions, where we just ask you to write flows (consisting of a series of tasks), the code still runs in this way, so it seems like not much has changed, and that Prefect is just a fancy wrapper around the way you‚Äôve run code before‚Ä¶\nWhen you create a Prefect deployment, though (which is different from a flow, in an important way), the process is different, and it‚Äôs going to feel less intuitive at first because you won‚Äôt instantly see the results from running your code when you click the run button! Now the process of running your code will instead look like:\n\nWrite the code in a cell of an .ipynb, where instead of calling the flow function in the normal way (like my_flow()), you instead use Prefect‚Äôs special .serve() function (like my_flow.serve())\nSave the code to a .py file using the %%writefile &lt;filename&gt;.py cell magic\nRun the saved .py file from a different code cell, using the %run &lt;filename&gt;.py cell magic, which:\n\nRegisters (or, ‚Äúposts‚Äù) the deployment on Prefect Cloud, as a piece of code that you‚Äôd like to allow it to manage, and then\nServes the flow as an ongoing process, meaning that it actually just sits and waits to be run externally!\n\nBecause of the way Step 3 works, now to actually execute the flow, you need to go into the Prefect UI and trigger the run of the code somehow: one way is to just click the ‚ÄúRun‚Äù -&gt; ‚ÄúQuick run‚Äù button in the upper-right of the Prefect UI page for the Deployment, and another is to use ‚ÄúRun‚Äù -&gt; ‚ÄúCustom run‚Äù:\n\n\n\n\n\nAn advantage to using ‚ÄúCustom run‚Äù is that you‚Äôll be able to update the parameters to your flow before running it.\nThen, at the end of HW3, you encountered a third way that the code can be run, that is, using a schedule. In the Prefect UI, if the schedule that you passed as an argument to .serve() was parsed correctly, you should see the schedule details in a panel directly underneath the run button1:\n\n\n\n\n\n\nSo, to summarize:\n\nIn a non-Prefect setting, your code lives in a notebook cell, waiting to be run. When you run the cell, the code is sent to the Python interpreter, and any outputs produced when it is interpreted are displayed underneath the code cell.\nIn a Prefect setting, your code still lives in a notebook cell, but now when you run the cell (or, in our case, when you run the .py file generated as a copy of the cell) it establishes a connection to Prefect Cloud, allowing the code to be triggered externally:\n\nBy clicking the ‚ÄúRun‚Äù button in Prefect‚Äôs UI,\nOn the basis of a schedule, or\nWhenever some event occurs"
  },
  {
    "objectID": "writeups/prefect/index.html#the-power-of-event-triggers",
    "href": "writeups/prefect/index.html#the-power-of-event-triggers",
    "title": "‚ÄòServing‚Äô Code to Prefect from Colab",
    "section": "The Power of Event Triggers",
    "text": "The Power of Event Triggers\nThe last bullet point in the above summary, of running code whenever a given event occurs, is extremely powerful! I‚Äôm sad that it‚Äôs the one of those three options that we didn‚Äôt get to cover in HW3, but as an example you can think of the Dropbox auto-book-scanner pipeline I showed briefly in class. This pipeline works like:\n\nUpdates to a Dropbox folder (files added, deleted, or modified) are trigger a webhook established from within Prefect‚Äôs UI\nThis Prefect webhook is then set as the event trigger which runs the flow code.\nThe Extract step of the flow code loads the files added to the Dropbox folder into Python‚Äôs memory\nThe Transform step of the flow code runs these files through OCR software, turning PDFs into plaintext that NLP algorithms can work with\nThe Load step of the flow code then adds the extracted plaintext into a MongoDB collection.\n\nSo, hopefully that example can ‚Äúclick‚Äù in your head why the data-processing pipeline setup is so powerful: rather than having to sit there and physically click run on your code to have it carry out some data science procedure, you can instead just write the code then tell Prefect to run it whenever something changes that would require re-running the procedure.\nFor example, if you happened to be the data scientist for a public opinion firm like Pew or Gallup, the non-Prefect way you might operate would be something like:\n\nOne of the poll managers adds new poll data as a into a Dropbox folder as a .csv file\nThe poll manager then sends you an email like ‚ÄúHey, new poll results are available, can you analyze them for me?‚Äù\nWhen you check this email (days later), you download the .csv file onto your computer, and use it as input to some code you‚Äôve written that generates plots at the end, summarizing the results\nYou reply to the poll manager‚Äôs email, saying ‚ÄúHey, here are the plots summarizing the results (attached)‚Äù\nUpon checking this email (yet more days later), the poll manager gives a thumbs-up, or they ask you to re-do the analysis using a different set of data‚Ä¶\n\nNow, I hope you can see how literally this entire chain of events can be automated using Prefect! You can:\n\nTake your analysis and plot-generation function and add @flow to the top of it,\nSet it to run on the trigger ‚ÄúDropbox folder modified‚Äù,\nSet it to place the plots into an Artifact (like we placed the wordcloud into our artifact in HW3), and\nHave this artifact auto-emailed to the poll manager upon completion (using the Automation tool within Prefect‚Äôs UI)\n\nWe didn‚Äôt get to see how the notifications work either (it would have been even messier to grade, unfortunately), but as a preview of how that works, here are the super-basic settings I have for an Automation I made to send me a text message (through Prefect‚Äôs built-in Twilio block) when certain important GitHub repos are pushed to:"
  },
  {
    "objectID": "writeups/prefect/index.html#footnotes",
    "href": "writeups/prefect/index.html#footnotes",
    "title": "‚ÄòServing‚Äô Code to Prefect from Colab",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nThough, frustratingly, Prefect‚Äôs UI is set up so that, if your screen is too small, it instead places this information in a separate tab lower in the UI with the heading ‚ÄúDetails‚Äù.‚Ü©Ô∏é"
  },
  {
    "objectID": "w11/index.html",
    "href": "w11/index.html",
    "title": "Week 11: Parallel Pipelines and Map-Reduce",
    "section": "",
    "text": "Open slides in new window ‚Üí",
    "crumbs": [
      "Week 11: {{< var w11.date-md >}}"
    ]
  },
  {
    "objectID": "w11/index.html#last-week-embarrassingly-parallel",
    "href": "w11/index.html#last-week-embarrassingly-parallel",
    "title": "Week 11: Parallel Pipelines and Map-Reduce",
    "section": "Last Week: Embarrassingly Parallel",
    "text": "Last Week: Embarrassingly Parallel\n\nTechnical definition: tasks within pipeline can easily be parallelized bc no dependence and no need for communication (see next slide). Better video explanation:",
    "crumbs": [
      "Week 11: {{< var w11.date-md >}}"
    ]
  },
  {
    "objectID": "w11/index.html#what-happens-when-code-is-not-embarrassingly-parallel",
    "href": "w11/index.html#what-happens-when-code-is-not-embarrassingly-parallel",
    "title": "Week 11: Parallel Pipelines and Map-Reduce",
    "section": "What Happens When Code is Not Embarrassingly Parallel?",
    "text": "What Happens When Code is Not Embarrassingly Parallel?\n\nThink of the difference between linear and quadratic equations in algebra:\n\\(3x - 1 = 0\\) is ‚Äúembarrassingly‚Äù solvable, on its own: you can solve it directly, by adding 3 to both sides \\(\\implies x = \\frac{1}{3}\\). Same for \\(2x + 3 = 0 \\implies x = -\\frac{3}{2}\\)\nNow consider \\(6x^2 + 7x - 3 = 0\\): Harder to solve ‚Äúdirectly‚Äù, so your instinct might be to turn to the laborious quadratic equation:\n\n\\[\n\\begin{align*}\nx = \\frac{-b \\pm \\sqrt{b^2 - 4ac}}{2a} = \\frac{-7 \\pm \\sqrt{49 - 4(6)(-3)}}{2(6)} = \\frac{-7 \\pm 11}{12} = \\left\\{\\frac{1}{3},-\\frac{3}{2}\\right\\}\n\\end{align*}\n\\]\n\nAnd yet, \\(6x^2 + 7x - 3 = (3x - 1)(2x + 3)\\), meaning that we could have split the problem into two ‚Äúembarrassingly‚Äù solvable pieces, then multiplied to get result!",
    "crumbs": [
      "Week 11: {{< var w11.date-md >}}"
    ]
  },
  {
    "objectID": "w11/index.html#the-analogy-to-map-reduce",
    "href": "w11/index.html#the-analogy-to-map-reduce",
    "title": "Week 11: Parallel Pipelines and Map-Reduce",
    "section": "The Analogy to Map-Reduce",
    "text": "The Analogy to Map-Reduce\n\n\n\n\n\n\n\n\\(\\leadsto\\) If code is not embarrassingly parallel (instinctually requiring laborious serial execution),\n\\(\\underbrace{6x^2 + 7x - 3 = 0}_{\\text{Solve using Quadratic Eqn}}\\)\n\n\nBut can be split into‚Ä¶\n\\((3x - 1)(2x + 3) = 0\\)\n\n\nEmbarrassingly parallel pieces which combine to same result,\n\\(\\underbrace{3x - 1 = 0}_{\\text{Solve directly}}, \\underbrace{2x + 3 = 0}_{\\text{Solve directly}}\\)\n\n\nWe can use map-reduce to achieve ultra speedup (running ‚Äúpieces‚Äù on GPU!)\n\\(\\underbrace{(3x-1)(2x+3) = 0}_{\\text{Solutions satisfy this product}}\\)",
    "crumbs": [
      "Week 11: {{< var w11.date-md >}}"
    ]
  },
  {
    "objectID": "w11/index.html#the-direct-analogy-map-reduce",
    "href": "w11/index.html#the-direct-analogy-map-reduce",
    "title": "Week 11: Parallel Pipelines and Map-Reduce",
    "section": "The Direct Analogy: Map-Reduce!",
    "text": "The Direct Analogy: Map-Reduce!\n\nProblem you‚Äôve seen in DSAN 5000/5100: Computing SSR (Sum of Squared Residuals)\n\\(y = (1,3,2), \\widehat{y} = (2, 5, 0) \\implies \\text{SSR} = (1-2)^2 + (3-5)^2 + (2-0)^2 = 9\\)\nComputing pieces separately:\n\nmap(do_something_with_piece, list_of_pieces)\n\n\nCode\nmy_map = map(lambda input: input**2, [(1-2), (3-5), (2-0)])\nmap_result = list(my_map)\nmap_result\n\n\n[1, 4, 4]\n\n\n\nCombining solved pieces\n\nreduce(how_to_combine_pair_of_pieces, pieces_to_combine)\n\n\nCode\nfrom functools import reduce\nmy_reduce = reduce(lambda piece1, piece2: piece1 + piece2, map_result)\nmy_reduce\n\n\n9",
    "crumbs": [
      "Week 11: {{< var w11.date-md >}}"
    ]
  },
  {
    "objectID": "w11/index.html#functions-vs.-meta-functions",
    "href": "w11/index.html#functions-vs.-meta-functions",
    "title": "Week 11: Parallel Pipelines and Map-Reduce",
    "section": "Functions vs.¬†Meta-Functions",
    "text": "Functions vs.¬†Meta-Functions\n\nYou may have noticed: map() and reduce() are ‚Äúmeta-functions‚Äù: functions that take in other functions as inputs\n\n\n\n\ndef add_5(num):\n  return num + 5\nadd_5(10)\n\n15\n\n\n\n\ndef apply_twice(fn, arg):\n  return fn(fn(arg))\napply_twice(add_5, 10)\n\n20\n\n\n\n\n\nIn Python, functions can be used as vars (Hence lambda):\n\n\nadd_5 = lambda num: num + 5\napply_twice(add_5, 10)\n\n20\n\n\n\nThis relates to a whole paradigm, ‚Äúfunctional programming‚Äù: mostly outside scope of course, but lots of important+useful takeaways/rules-of-thumb! ‚Üí",
    "crumbs": [
      "Week 11: {{< var w11.date-md >}}"
    ]
  },
  {
    "objectID": "w11/index.html#train-your-brain-for-functional-approach-implies-master-debugging",
    "href": "w11/index.html#train-your-brain-for-functional-approach-implies-master-debugging",
    "title": "Week 11: Parallel Pipelines and Map-Reduce",
    "section": "Train Your Brain for Functional Approach \\(\\implies\\) Master Debugging!",
    "text": "Train Your Brain for Functional Approach \\(\\implies\\) Master Debugging!\n\nIn CS Theory: enables formal proofs of correctness\nIn CS practice:\n\n\nWhen a program doesn‚Äôt work, each function is an interface point where you can check that the data are correct. You can look at the intermediate inputs and outputs to quickly isolate the function that‚Äôs responsible for a bug.(from Python‚Äôs ‚ÄúFunctional Programming HowTo‚Äù)",
    "crumbs": [
      "Week 11: {{< var w11.date-md >}}"
    ]
  },
  {
    "objectID": "w11/index.html#code-rightarrow-pipelines-rightarrow-debuggable-pipelines",
    "href": "w11/index.html#code-rightarrow-pipelines-rightarrow-debuggable-pipelines",
    "title": "Week 11: Parallel Pipelines and Map-Reduce",
    "section": "Code \\(\\rightarrow\\) Pipelines \\(\\rightarrow\\) Debuggable Pipelines",
    "text": "Code \\(\\rightarrow\\) Pipelines \\(\\rightarrow\\) Debuggable Pipelines\n\n\nScenario: Run code, check the output, and‚Ä¶ it‚Äôs wrong üòµ what do you do?\nUsual approach: Read lines one-by-one, figuring out what they do, seeing if something pops out that seems wrong; adding comments like # Convert to lowercase\n\n\n\n\nEasy case: found typo in punctuation removal code. Fix the error, add comment like # Remove punctuation\n Rule 1 of FP: transform these comments into function names\n\n\n\nHard case: Something in load_text() modifies a variable that later on breaks remove_punct() (Called a side-effect)\n Rule 2 of FP: NO SIDE-EFFECTS!\n\n\n\n\n\n\n\n\n\n\nG\n\n\n\ninput\nin.txt\n\n\n\nload_text\nload_text\n(Verb)\n\n\n\n\ninput-&gt;load_text\n\n\n\n\n\nlowercase\nlowercase\n(Verb)\n\n\n\n\nload_text-&gt;lowercase\n\n\nüßê ‚úÖ\n\n\n\nremove_punct\nremove_punct\n(Verb)\n\n\n\n\nlowercase-&gt;remove_punct\n\n\nüßê ‚úÖ\n\n\n\nremove_stopwords\nremove_stopwords\n(Verb)\n\n\n\n\nremove_punct-&gt;remove_stopwords\n\n\nüßê ‚ùå‚ùóÔ∏è\n\n\n\noutput\nout.txt\n\n\n\nremove_stopwords-&gt;output\n\n\n\n\n\n\n (Does this way of diagramming a program look familiar?) \n\n\n\n\nWith side effects: ‚ùå \\(\\implies\\) issue is somewhere earlier in the chain üò©üèÉ‚Äç‚ôÇÔ∏è\nNo side effects: ‚ùå \\(\\implies\\) issue must be in remove_punct()!!! üòé ‚è±Ô∏è = üí∞",
    "crumbs": [
      "Week 11: {{< var w11.date-md >}}"
    ]
  },
  {
    "objectID": "w11/index.html#if-this-is-so-useful-why-doesnt-everyone-do-it",
    "href": "w11/index.html#if-this-is-so-useful-why-doesnt-everyone-do-it",
    "title": "Week 11: Parallel Pipelines and Map-Reduce",
    "section": "If This Is So Useful‚Ä¶ Why Doesn‚Äôt Everyone Do It?",
    "text": "If This Is So Useful‚Ä¶ Why Doesn‚Äôt Everyone Do It?\n\n~Trapped in imperative (sequential) coding mindset: Path dependency / QWERTY\nBut the reason we need to start thinking like this is: it‚Äôs 1000x harder to debug parallel code! So we need to be less ad hoc in how we write+debug, from here on out! üôá‚Äç‚ôÇÔ∏èüôè\n\n\n\n\nFrom Leskovec, Rajaraman, and Ullman (2014)\n\n\n\nThe title relates to a classic Economics joke (the best kind of joke): ‚ÄúAn economist and a CEO are walking down the street, when the CEO points at the ground and tells the economist, ‚Äòlook! A $20 bill on the ground!‚Äô The economist keeps on walking, scoffing at the CEO: ‚Äòdon‚Äôt be silly, if there was a $20 bill on the ground, somebody would have picked it up already‚Äô.‚Äù",
    "crumbs": [
      "Week 11: {{< var w11.date-md >}}"
    ]
  },
  {
    "objectID": "w11/index.html#the-killer-application-matrix-multiplication",
    "href": "w11/index.html#the-killer-application-matrix-multiplication",
    "title": "Week 11: Parallel Pipelines and Map-Reduce",
    "section": "The ‚ÄúKiller Application‚Äù: Matrix Multiplication",
    "text": "The ‚ÄúKiller Application‚Äù: Matrix Multiplication\n\n(I learned from Jeff Ullman, who did the obnoxious Stanford thing of mentioning in passing how ‚Äútwo previous students in the class did this for a cool final project on web crawling and, well, it escalated quickly‚Äù, aka became Google)\n\n\n\n\nFrom Leskovec, Rajaraman, and Ullman (2014), which is (legally) free online!",
    "crumbs": [
      "Week 11: {{< var w11.date-md >}}"
    ]
  },
  {
    "objectID": "w11/index.html#the-killer-way-to-learn-text-counts",
    "href": "w11/index.html#the-killer-way-to-learn-text-counts",
    "title": "Week 11: Parallel Pipelines and Map-Reduce",
    "section": "The Killer Way-To-Learn: Text Counts!",
    "text": "The Killer Way-To-Learn: Text Counts!\n\n(2014): Text counts (2.2) \\(\\rightarrow\\) Matrix multiplication (2.3) \\(\\rightarrow \\cdots \\rightarrow\\) PageRank (5.1)\n(And yall thought it was just busywork for HW3 üòè)\nThe goal: User searches ‚ÄúDenzel Curry‚Äù‚Ä¶ How relevant is a given webpage?\nScenario 1: The entire internet fits on CPU \\(\\implies\\) We can just make a big big hash table:\n\n\n\n\n\n\n\n\nG\n\n\n\ninternet\n\nScan in O(n):\nToday Denzel Washington\nate a big bowl of Yum's\ncurry. Denzel allegedly\nrubbed his tum and said\n\"yum yum yum\" when he\ntasted today's curry.\n\"Yum! It is me Denzel,\ncurry is my fav!\", he\nexclaimed. According to\nhis friend Steph, curry\nis indeed Denzel's fav.\nWe are live with Del\nCurry in Washington for\na Denzel curry update.\n\n\n\n\nccounts\n\nOverall Counts\n\n('according',1)\n('allegedly',1)\n('ate',1)\n('big',1)\n('bowl',1)\n('curry',6)\n('del',1)\n('denzel',5)\n('exclaimed',1)\n('fav',2)\n('friend',1)\n('indeed',1)\n('live',1)\n('rubbed',1)\n('said',1)\n('steph',1)\n('tasted',1)\n('today',2)\n('tum',1)\n('update',1)\n('washington',2)\n('yum',4)\n\n\n\n\ninternet-&gt;ccounts\n\n\nHash Table",
    "crumbs": [
      "Week 11: {{< var w11.date-md >}}"
    ]
  },
  {
    "objectID": "w11/index.html#if-everything-doesnt-fit-on-cpu",
    "href": "w11/index.html#if-everything-doesnt-fit-on-cpu",
    "title": "Week 11: Parallel Pipelines and Map-Reduce",
    "section": "If Everything Doesn‚Äôt Fit on CPU‚Ä¶",
    "text": "If Everything Doesn‚Äôt Fit on CPU‚Ä¶\n\n\n\nFrom Cornell Virtual Workshop, ‚ÄúUnderstanding GPU Architecture‚Äù",
    "crumbs": [
      "Week 11: {{< var w11.date-md >}}"
    ]
  },
  {
    "objectID": "w11/index.html#break-the-problem-into-chunks-for-the-green-bois",
    "href": "w11/index.html#break-the-problem-into-chunks-for-the-green-bois",
    "title": "Week 11: Parallel Pipelines and Map-Reduce",
    "section": "Break the Problem into Chunks for the Green Bois!",
    "text": "Break the Problem into Chunks for the Green Bois!\n\n\n\n\n\n\n\nG\n\n\n\nchunked\n\nChunked Document\n\nToday Denzel Washington\nate a big bowl of Yum's\ncurry. Denzel allegedly\nrubbed his tum and said\n\n\"yum yum yum\" when he\ntasted today's curry.\n\"Yum! It is me Denzel,\ncurry is my fav!\", he\n\nexclaimed. According to\nhis friend Steph, curry\nis indeed Denzel's fav.\nWe are live with Del\nCurry in Washington for\na Denzel curry update.\n\n\n\n\nchcounts\n\nChunked Counts\n\n('today',1)\n('denzel',1)\n...\n('tum',1)\n('said',1)\n\n('yum',1)\n('yum',1)\n('yum',1)\n...\n('fav',1)\n\n('exclaimed',1)\n...\n('del',1)\n('curry',1)\n('washington',1)\n('denzel',1)\n('curry',1)\n('update',1)\n\n\n\n\nchunked:p1-&gt;chcounts:p1\n\n\nO(n/4)\n\n\n\nchunked:p2-&gt;chcounts:p2\n\n\nO(n/4)\n\n\n\nchunked:p3-&gt;chcounts:p3\n\n\nO(n/4)\n\n\n\nchunked:p4-&gt;chcounts:p4\n\n\nO(n/4)\n\n\n\nscounts\n\nHashed Counts\n\n('allegedly',1)\n...\n('curry',1)\n('denzel',2)\n...\n('yum',1)\n\n('curry',2)\n('denzel',1)\n...\n('yum',4)\n\n('according',1)\n('curry',1)\n('del',1)\n('denzel',1)\n...\n('curry',2)\n('denzel',1)\n('update',1)\n('washington',1)\n\n\n\n\nchcounts:p1-&gt;scounts:p1\n\n\nO(n/4)\n\n\n\nchcounts:p2-&gt;scounts:p2\n\n\nO(n/4)\n\n\n\nchcounts:p3-&gt;scounts:p3\n\n\nO(n/4)\n\n\n\nchcounts:p4-&gt;scounts:p4\n\n\nO(n/4)\n\n\n\nccounts\n\nOverall Counts\n('according',1)\n('allegedly',1)\n('ate',1)\n('big',1)\n('bowl',1)\n('curry',6)\n('del',1)\n('denzel',5)\n('exclaimed',1)\n('fav',2)\n('friend',1)\n('indeed',1)\n('live',1)\n('rubbed',1)\n('said',1)\n('steph',1)\n('tasted',1)\n('today',2)\n('tum',1)\n('update',1)\n('washington',2)\n('yum',4)\n\n\n\n\nscounts:p1-&gt;ccounts:p1\n\n\n\n\n\nscounts:p2-&gt;ccounts:p1\n\n\n\n\n\nscounts:p3-&gt;ccounts:p1\n\n\n\n\n\nscounts:p4-&gt;ccounts:p1\n\n\n\n\n\nscounts:p2-&gt;ccounts\n\n\n \n\nMerge in\nO(n)\n\n\n\n\n\n\n\n\n\n\\(\\implies\\) Total = \\(O(3n) = O(n)\\)\nBut also optimized in terms of constants, because of sequential memory reads",
    "crumbs": [
      "Week 11: {{< var w11.date-md >}}"
    ]
  },
  {
    "objectID": "w11/index.html#hw4-possibility-1",
    "href": "w11/index.html#hw4-possibility-1",
    "title": "Week 11: Parallel Pipelines and Map-Reduce",
    "section": "HW4 Possibility 1",
    "text": "HW4 Possibility 1\n\nMap-Reduced Matrix-Vector Multiplication\n\n\n\n\nImage source",
    "crumbs": [
      "Week 11: {{< var w11.date-md >}}"
    ]
  },
  {
    "objectID": "w11/index.html#hw4-possibility-2-more-likely",
    "href": "w11/index.html#hw4-possibility-2-more-likely",
    "title": "Week 11: Parallel Pipelines and Map-Reduce",
    "section": "HW4 Possibility 2 (More Likely?)",
    "text": "HW4 Possibility 2 (More Likely?)\n\nScrape quotes in parallel!\nAdvantage: Builds on HW3\nDisadvantage: Embarrassingly parallel, so‚Ä¶ no Map-Reduce coding practice\n(Probable tiebreaker: If you‚Äôre interested in Map-Reduce, do Matrix Multiplication as Final Project!)",
    "crumbs": [
      "Week 11: {{< var w11.date-md >}}"
    ]
  },
  {
    "objectID": "w11/index.html#references",
    "href": "w11/index.html#references",
    "title": "Week 11: Parallel Pipelines and Map-Reduce",
    "section": "References",
    "text": "References\n\n\nLeskovec, Jure, Anand Rajaraman, and Jeffrey David Ullman. 2014. Mining of Massive Datasets. Cambridge University Press.",
    "crumbs": [
      "Week 11: {{< var w11.date-md >}}"
    ]
  },
  {
    "objectID": "w11/slides.html#last-week-embarrassingly-parallel",
    "href": "w11/slides.html#last-week-embarrassingly-parallel",
    "title": "Week 11: Parallel Pipelines and Map-Reduce",
    "section": "Last Week: Embarrassingly Parallel",
    "text": "Last Week: Embarrassingly Parallel\n\nTechnical definition: tasks within pipeline can easily be parallelized bc no dependence and no need for communication (see next slide). Better video explanation:"
  },
  {
    "objectID": "w11/slides.html#what-happens-when-code-is-not-embarrassingly-parallel",
    "href": "w11/slides.html#what-happens-when-code-is-not-embarrassingly-parallel",
    "title": "Week 11: Parallel Pipelines and Map-Reduce",
    "section": "What Happens When Code is Not Embarrassingly Parallel?",
    "text": "What Happens When Code is Not Embarrassingly Parallel?\n\nThink of the difference between linear and quadratic equations in algebra:\n\\(3x - 1 = 0\\) is ‚Äúembarrassingly‚Äù solvable, on its own: you can solve it directly, by adding 3 to both sides \\(\\implies x = \\frac{1}{3}\\). Same for \\(2x + 3 = 0 \\implies x = -\\frac{3}{2}\\)\nNow consider \\(6x^2 + 7x - 3 = 0\\): Harder to solve ‚Äúdirectly‚Äù, so your instinct might be to turn to the laborious quadratic equation:\n\n\\[\n\\begin{align*}\nx = \\frac{-b \\pm \\sqrt{b^2 - 4ac}}{2a} = \\frac{-7 \\pm \\sqrt{49 - 4(6)(-3)}}{2(6)} = \\frac{-7 \\pm 11}{12} = \\left\\{\\frac{1}{3},-\\frac{3}{2}\\right\\}\n\\end{align*}\n\\]\n\nAnd yet, \\(6x^2 + 7x - 3 = (3x - 1)(2x + 3)\\), meaning that we could have split the problem into two ‚Äúembarrassingly‚Äù solvable pieces, then multiplied to get result!"
  },
  {
    "objectID": "w11/slides.html#the-analogy-to-map-reduce",
    "href": "w11/slides.html#the-analogy-to-map-reduce",
    "title": "Week 11: Parallel Pipelines and Map-Reduce",
    "section": "The Analogy to Map-Reduce",
    "text": "The Analogy to Map-Reduce\n\n\n\n\n\n\n\n\\(\\leadsto\\) If code is not embarrassingly parallel (instinctually requiring laborious serial execution),\n\\(\\underbrace{6x^2 + 7x - 3 = 0}_{\\text{Solve using Quadratic Eqn}}\\)\n\n\nBut can be split into‚Ä¶\n\\((3x - 1)(2x + 3) = 0\\)\n\n\nEmbarrassingly parallel pieces which combine to same result,\n\\(\\underbrace{3x - 1 = 0}_{\\text{Solve directly}}, \\underbrace{2x + 3 = 0}_{\\text{Solve directly}}\\)\n\n\nWe can use map-reduce to achieve ultra speedup (running ‚Äúpieces‚Äù on GPU!)\n\\(\\underbrace{(3x-1)(2x+3) = 0}_{\\text{Solutions satisfy this product}}\\)"
  },
  {
    "objectID": "w11/slides.html#the-direct-analogy-map-reduce",
    "href": "w11/slides.html#the-direct-analogy-map-reduce",
    "title": "Week 11: Parallel Pipelines and Map-Reduce",
    "section": "The Direct Analogy: Map-Reduce!",
    "text": "The Direct Analogy: Map-Reduce!\n\nProblem you‚Äôve seen in DSAN 5000/5100: Computing SSR (Sum of Squared Residuals)\n\\(y = (1,3,2), \\widehat{y} = (2, 5, 0) \\implies \\text{SSR} = (1-2)^2 + (3-5)^2 + (2-0)^2 = 9\\)\nComputing pieces separately:\n\nmap(do_something_with_piece, list_of_pieces)\n\n\nCode\nmy_map = map(lambda input: input**2, [(1-2), (3-5), (2-0)])\nmap_result = list(my_map)\nmap_result\n\n\n[1, 4, 4]\n\n\n\nCombining solved pieces\n\nreduce(how_to_combine_pair_of_pieces, pieces_to_combine)\n\n\nCode\nfrom functools import reduce\nmy_reduce = reduce(lambda piece1, piece2: piece1 + piece2, map_result)\nmy_reduce\n\n\n9"
  },
  {
    "objectID": "w11/slides.html#functions-vs.-meta-functions",
    "href": "w11/slides.html#functions-vs.-meta-functions",
    "title": "Week 11: Parallel Pipelines and Map-Reduce",
    "section": "Functions vs.¬†Meta-Functions",
    "text": "Functions vs.¬†Meta-Functions\n\nYou may have noticed: map() and reduce() are ‚Äúmeta-functions‚Äù: functions that take in other functions as inputs\n\n\n\n\ndef add_5(num):\n  return num + 5\nadd_5(10)\n\n15\n\n\n\n\ndef apply_twice(fn, arg):\n  return fn(fn(arg))\napply_twice(add_5, 10)\n\n20\n\n\n\n\nIn Python, functions can be used as vars (Hence lambda):\n\n\nadd_5 = lambda num: num + 5\napply_twice(add_5, 10)\n\n20\n\n\n\nThis relates to a whole paradigm, ‚Äúfunctional programming‚Äù: mostly outside scope of course, but lots of important+useful takeaways/rules-of-thumb! ‚Üí"
  },
  {
    "objectID": "w11/slides.html#train-your-brain-for-functional-approach-implies-master-debugging",
    "href": "w11/slides.html#train-your-brain-for-functional-approach-implies-master-debugging",
    "title": "Week 11: Parallel Pipelines and Map-Reduce",
    "section": "Train Your Brain for Functional Approach \\(\\implies\\) Master Debugging!",
    "text": "Train Your Brain for Functional Approach \\(\\implies\\) Master Debugging!\n\nIn CS Theory: enables formal proofs of correctness\nIn CS practice:\n\n\nWhen a program doesn‚Äôt work, each function is an interface point where you can check that the data are correct. You can look at the intermediate inputs and outputs to quickly isolate the function that‚Äôs responsible for a bug.(from Python‚Äôs ‚ÄúFunctional Programming HowTo‚Äù)"
  },
  {
    "objectID": "w11/slides.html#code-rightarrow-pipelines-rightarrow-debuggable-pipelines",
    "href": "w11/slides.html#code-rightarrow-pipelines-rightarrow-debuggable-pipelines",
    "title": "Week 11: Parallel Pipelines and Map-Reduce",
    "section": "Code \\(\\rightarrow\\) Pipelines \\(\\rightarrow\\) Debuggable Pipelines",
    "text": "Code \\(\\rightarrow\\) Pipelines \\(\\rightarrow\\) Debuggable Pipelines\n\n\nScenario: Run code, check the output, and‚Ä¶ it‚Äôs wrong üòµ what do you do?\nUsual approach: Read lines one-by-one, figuring out what they do, seeing if something pops out that seems wrong; adding comments like # Convert to lowercase\n\n\n\n\nEasy case: found typo in punctuation removal code. Fix the error, add comment like # Remove punctuation\n Rule 1 of FP: transform these comments into function names\n\n\n\nHard case: Something in load_text() modifies a variable that later on breaks remove_punct() (Called a side-effect)\n Rule 2 of FP: NO SIDE-EFFECTS!\n\n\n\n\n\n\n\n\n\nG\n\n\n\ninput\nin.txt\n\n\n\nload_text\nload_text\n(Verb)\n\n\n\n\ninput-&gt;load_text\n\n\n\n\n\nlowercase\nlowercase\n(Verb)\n\n\n\n\nload_text-&gt;lowercase\n\n\nüßê ‚úÖ\n\n\n\nremove_punct\nremove_punct\n(Verb)\n\n\n\n\nlowercase-&gt;remove_punct\n\n\nüßê ‚úÖ\n\n\n\nremove_stopwords\nremove_stopwords\n(Verb)\n\n\n\n\nremove_punct-&gt;remove_stopwords\n\n\nüßê ‚ùå‚ùóÔ∏è\n\n\n\noutput\nout.txt\n\n\n\nremove_stopwords-&gt;output\n\n\n\n\n\n\n (Does this way of diagramming a program look familiar?) \n\n\n\n\nWith side effects: ‚ùå \\(\\implies\\) issue is somewhere earlier in the chain üò©üèÉ‚Äç‚ôÇÔ∏è\nNo side effects: ‚ùå \\(\\implies\\) issue must be in remove_punct()!!! üòé ‚è±Ô∏è = üí∞"
  },
  {
    "objectID": "w11/slides.html#if-this-is-so-useful-why-doesnt-everyone-do-it",
    "href": "w11/slides.html#if-this-is-so-useful-why-doesnt-everyone-do-it",
    "title": "Week 11: Parallel Pipelines and Map-Reduce",
    "section": "If This Is So Useful‚Ä¶ Why Doesn‚Äôt Everyone Do It?",
    "text": "If This Is So Useful‚Ä¶ Why Doesn‚Äôt Everyone Do It?\n\n~Trapped in imperative (sequential) coding mindset: Path dependency / QWERTY\nBut the reason we need to start thinking like this is: it‚Äôs 1000x harder to debug parallel code! So we need to be less ad hoc in how we write+debug, from here on out! üôá‚Äç‚ôÇÔ∏èüôè\n\n\nFrom Leskovec, Rajaraman, and Ullman (2014)\nThe title relates to a classic Economics joke (the best kind of joke): ‚ÄúAn economist and a CEO are walking down the street, when the CEO points at the ground and tells the economist, ‚Äòlook! A $20 bill on the ground!‚Äô The economist keeps on walking, scoffing at the CEO: ‚Äòdon‚Äôt be silly, if there was a $20 bill on the ground, somebody would have picked it up already‚Äô.‚Äù"
  },
  {
    "objectID": "w11/slides.html#the-killer-application-matrix-multiplication",
    "href": "w11/slides.html#the-killer-application-matrix-multiplication",
    "title": "Week 11: Parallel Pipelines and Map-Reduce",
    "section": "The ‚ÄúKiller Application‚Äù: Matrix Multiplication",
    "text": "The ‚ÄúKiller Application‚Äù: Matrix Multiplication\n\n(I learned from Jeff Ullman, who did the obnoxious Stanford thing of mentioning in passing how ‚Äútwo previous students in the class did this for a cool final project on web crawling and, well, it escalated quickly‚Äù, aka became Google)\n\n\nFrom Leskovec, Rajaraman, and Ullman (2014), which is (legally) free online!"
  },
  {
    "objectID": "w11/slides.html#the-killer-way-to-learn-text-counts",
    "href": "w11/slides.html#the-killer-way-to-learn-text-counts",
    "title": "Week 11: Parallel Pipelines and Map-Reduce",
    "section": "The Killer Way-To-Learn: Text Counts!",
    "text": "The Killer Way-To-Learn: Text Counts!\n\n(2014): Text counts (2.2) \\(\\rightarrow\\) Matrix multiplication (2.3) \\(\\rightarrow \\cdots \\rightarrow\\) PageRank (5.1)\n(And yall thought it was just busywork for HW3 üòè)\nThe goal: User searches ‚ÄúDenzel Curry‚Äù‚Ä¶ How relevant is a given webpage?\nScenario 1: The entire internet fits on CPU \\(\\implies\\) We can just make a big big hash table:\n\n\n\n\n\n\n\n\nG\n\n\n\ninternet\n\nScan in O(n):\nToday Denzel Washington\nate a big bowl of Yum's\ncurry. Denzel allegedly\nrubbed his tum and said\n\"yum yum yum\" when he\ntasted today's curry.\n\"Yum! It is me Denzel,\ncurry is my fav!\", he\nexclaimed. According to\nhis friend Steph, curry\nis indeed Denzel's fav.\nWe are live with Del\nCurry in Washington for\na Denzel curry update.\n\n\n\n\nccounts\n\nOverall Counts\n\n('according',1)\n('allegedly',1)\n('ate',1)\n('big',1)\n('bowl',1)\n('curry',6)\n('del',1)\n('denzel',5)\n('exclaimed',1)\n('fav',2)\n('friend',1)\n('indeed',1)\n('live',1)\n('rubbed',1)\n('said',1)\n('steph',1)\n('tasted',1)\n('today',2)\n('tum',1)\n('update',1)\n('washington',2)\n('yum',4)\n\n\n\n\ninternet-&gt;ccounts\n\n\nHash Table"
  },
  {
    "objectID": "w11/slides.html#if-everything-doesnt-fit-on-cpu",
    "href": "w11/slides.html#if-everything-doesnt-fit-on-cpu",
    "title": "Week 11: Parallel Pipelines and Map-Reduce",
    "section": "If Everything Doesn‚Äôt Fit on CPU‚Ä¶",
    "text": "If Everything Doesn‚Äôt Fit on CPU‚Ä¶\n\nFrom Cornell Virtual Workshop, ‚ÄúUnderstanding GPU Architecture‚Äù"
  },
  {
    "objectID": "w11/slides.html#break-the-problem-into-chunks-for-the-green-bois",
    "href": "w11/slides.html#break-the-problem-into-chunks-for-the-green-bois",
    "title": "Week 11: Parallel Pipelines and Map-Reduce",
    "section": "Break the Problem into Chunks for the Green Bois!",
    "text": "Break the Problem into Chunks for the Green Bois!\n\n\n\n\n\n\n\nG\n\n\n\nchunked\n\nChunked Document\n\nToday Denzel Washington\nate a big bowl of Yum's\ncurry. Denzel allegedly\nrubbed his tum and said\n\n\"yum yum yum\" when he\ntasted today's curry.\n\"Yum! It is me Denzel,\ncurry is my fav!\", he\n\nexclaimed. According to\nhis friend Steph, curry\nis indeed Denzel's fav.\nWe are live with Del\nCurry in Washington for\na Denzel curry update.\n\n\n\n\nchcounts\n\nChunked Counts\n\n('today',1)\n('denzel',1)\n...\n('tum',1)\n('said',1)\n\n('yum',1)\n('yum',1)\n('yum',1)\n...\n('fav',1)\n\n('exclaimed',1)\n...\n('del',1)\n('curry',1)\n('washington',1)\n('denzel',1)\n('curry',1)\n('update',1)\n\n\n\n\nchunked:p1-&gt;chcounts:p1\n\n\nO(n/4)\n\n\n\nchunked:p2-&gt;chcounts:p2\n\n\nO(n/4)\n\n\n\nchunked:p3-&gt;chcounts:p3\n\n\nO(n/4)\n\n\n\nchunked:p4-&gt;chcounts:p4\n\n\nO(n/4)\n\n\n\nscounts\n\nHashed Counts\n\n('allegedly',1)\n...\n('curry',1)\n('denzel',2)\n...\n('yum',1)\n\n('curry',2)\n('denzel',1)\n...\n('yum',4)\n\n('according',1)\n('curry',1)\n('del',1)\n('denzel',1)\n...\n('curry',2)\n('denzel',1)\n('update',1)\n('washington',1)\n\n\n\n\nchcounts:p1-&gt;scounts:p1\n\n\nO(n/4)\n\n\n\nchcounts:p2-&gt;scounts:p2\n\n\nO(n/4)\n\n\n\nchcounts:p3-&gt;scounts:p3\n\n\nO(n/4)\n\n\n\nchcounts:p4-&gt;scounts:p4\n\n\nO(n/4)\n\n\n\nccounts\n\nOverall Counts\n('according',1)\n('allegedly',1)\n('ate',1)\n('big',1)\n('bowl',1)\n('curry',6)\n('del',1)\n('denzel',5)\n('exclaimed',1)\n('fav',2)\n('friend',1)\n('indeed',1)\n('live',1)\n('rubbed',1)\n('said',1)\n('steph',1)\n('tasted',1)\n('today',2)\n('tum',1)\n('update',1)\n('washington',2)\n('yum',4)\n\n\n\n\nscounts:p1-&gt;ccounts:p1\n\n\n\n\n\nscounts:p2-&gt;ccounts:p1\n\n\n\n\n\nscounts:p3-&gt;ccounts:p1\n\n\n\n\n\nscounts:p4-&gt;ccounts:p1\n\n\n\n\n\nscounts:p2-&gt;ccounts\n\n\n \n\nMerge in\nO(n)\n\n\n\n\n\n\n\n\n\n\\(\\implies\\) Total = \\(O(3n) = O(n)\\)\nBut also optimized in terms of constants, because of sequential memory reads"
  },
  {
    "objectID": "w11/slides.html#hw4-possibility-1",
    "href": "w11/slides.html#hw4-possibility-1",
    "title": "Week 11: Parallel Pipelines and Map-Reduce",
    "section": "HW4 Possibility 1",
    "text": "HW4 Possibility 1\n\nMap-Reduced Matrix-Vector Multiplication\n\n\nImage source"
  },
  {
    "objectID": "w11/slides.html#hw4-possibility-2-more-likely",
    "href": "w11/slides.html#hw4-possibility-2-more-likely",
    "title": "Week 11: Parallel Pipelines and Map-Reduce",
    "section": "HW4 Possibility 2 (More Likely?)",
    "text": "HW4 Possibility 2 (More Likely?)\n\nScrape quotes in parallel!\nAdvantage: Builds on HW3\nDisadvantage: Embarrassingly parallel, so‚Ä¶ no Map-Reduce coding practice\n(Probable tiebreaker: If you‚Äôre interested in Map-Reduce, do Matrix Multiplication as Final Project!)"
  },
  {
    "objectID": "w11/slides.html#references",
    "href": "w11/slides.html#references",
    "title": "Week 11: Parallel Pipelines and Map-Reduce",
    "section": "References",
    "text": "References\n\n\nLeskovec, Jure, Anand Rajaraman, and Jeffrey David Ullman. 2014. Mining of Massive Datasets. Cambridge University Press."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "DSAN 5500: Data Structures, Objects, and Algorithms in Python",
    "section": "",
    "text": "Welcome to the homepage for DSAN 5500: Data Structures, Objects, and Algorithms in Python, Spring 2025, at Georgetown University! The course takes place on Thursdays from 6:30 to 9:00pm in Healy 104. More details are provided on the syllabus.\n\n\n\n\n\n\n\n\n\nTitle\n\n\nDate\n\n\n\n\n\n\nWeek 1: Course Intro and Motivation\n\n\nJanuary 9\n\n\n\n\nWeek 2: Software Design Patterns and Object-Oriented Programming\n\n\nJanuary 16\n\n\n\n\nWeek 3: Data Structures and Computational Complexity\n\n\nJanuary 23\n\n\n\n\nWeek 4: Data Structures from Scratch with OOP\n\n\nJanuary 30\n\n\n\n\nWeek 5: Hash Tables and Binary Search Trees\n\n\nFebruary 6\n\n\n\n\nWeek 6: Depth-First and Breadth-First Search\n\n\nFebruary 13\n\n\n\n\nWeek 7: Code Examples and Midterm Review\n\n\nFebruary 20\n\n\n\n\nWeek 8: In-Class Midterm\n\n\nFebruary 27\n\n\n\n\nWeek 9: Data Validation, Data Processing Pipelines\n\n\nMarch 13\n\n\n\n\nWeek 10: Data Pipeline Orchestration\n\n\nMarch 20\n\n\n\n\nWeek 11: Parallel Pipelines and Map-Reduce\n\n\nMarch 27\n\n\n\n\nWeek 12: Final Projects, Interfaces\n\n\nApril 3\n\n\n\n\nWeek 13: Applications in NLP\n\n\nApril 10\n\n\n\n\nWeek 14: Applications in Bioinformatics\n\n\nApril 24\n\n\n\n\n\nNo matching items",
    "crumbs": [
      "<i class='bi bi-house pe-1'></i> Home"
    ]
  },
  {
    "objectID": "w09/index.html",
    "href": "w09/index.html",
    "title": "Week 9: Data Validation, Data Processing Pipelines",
    "section": "",
    "text": "Open slides in new window ‚Üí",
    "crumbs": [
      "Week 9: {{< var w09.date-md >}}"
    ]
  },
  {
    "objectID": "w09/index.html#the-necessary-buzzwords",
    "href": "w09/index.html#the-necessary-buzzwords",
    "title": "Week 9: Data Validation, Data Processing Pipelines",
    "section": "The Necessary Buzzwords",
    "text": "The Necessary Buzzwords\n(Underlined words link to ‚ÄúConcepts‚Äù section of Prefect‚Äôs docs)\n\nFlow: The ‚Äúmain thing‚Äù your pipeline is doing!\n\nExcept in simple cases, will consist of multiple Tasks\n\nFlows and Tasks alone already provide much more functionality than ‚Äúbasic‚Äù functions‚Ä¶\nDeployments: Flows + Tasks + Metadata about how and when you want them to run.\n\nPrefect docs: ‚ÄúDeployments elevate workflows from [functions that you call manually] to [API-managed entities].‚Äù",
    "crumbs": [
      "Week 9: {{< var w09.date-md >}}"
    ]
  },
  {
    "objectID": "w09/index.html#deployments-rightarrow-run-flows-programmatically",
    "href": "w09/index.html#deployments-rightarrow-run-flows-programmatically",
    "title": "Week 9: Data Validation, Data Processing Pipelines",
    "section": "Deployments \\(\\Rightarrow\\) Run Flows Programmatically",
    "text": "Deployments \\(\\Rightarrow\\) Run Flows Programmatically",
    "crumbs": [
      "Week 9: {{< var w09.date-md >}}"
    ]
  },
  {
    "objectID": "w09/index.html#the-power-of-deployments",
    "href": "w09/index.html#the-power-of-deployments",
    "title": "Week 9: Data Validation, Data Processing Pipelines",
    "section": "The Power of Deployments",
    "text": "The Power of Deployments\n\n‚ÄúPackaging‚Äù code as Deployments enables Triggers:\n\nOn a particular Schedules: every 4 hours, every day at noon, once per week, etc.\nWhen important Events happen: pushes to GitHub, addition, removal, modification of files in Dropbox, etc.\n\nLogging, Notifications (Slack, email, text messages)\nResults as natural-language explanations (produced by Prefect) or custom summaries, called Artifacts, that you define as part of your flows",
    "crumbs": [
      "Week 9: {{< var w09.date-md >}}"
    ]
  },
  {
    "objectID": "w09/index.html#schedules",
    "href": "w09/index.html#schedules",
    "title": "Week 9: Data Validation, Data Processing Pipelines",
    "section": "Schedules",
    "text": "Schedules\n\nCron: Full-on scheduling language (used by computers since 1975!)\n\n\n\ncrontab.sh\n\n# ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ minute (0‚Äì59)\n# ‚îÇ ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ hour (0‚Äì23)\n# ‚îÇ ‚îÇ ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ day of the month (1‚Äì31)\n# ‚îÇ ‚îÇ ‚îÇ ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ month (1‚Äì12)\n# ‚îÇ ‚îÇ ‚îÇ ‚îÇ ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ day of the week (0‚Äì6) (Sunday to Saturday)\n# ‚îÇ ‚îÇ ‚îÇ ‚îÇ ‚îÇ\n# ‚îÇ ‚îÇ ‚îÇ ‚îÇ ‚îÇ\n# ‚îÇ ‚îÇ ‚îÇ ‚îÇ ‚îÇ\n# * * * * * &lt;command to execute&gt;\n\n\n\n\nInterval\n\n\n\nmy_interval.yml\n\nschedule:\n  interval: 600\n  timezone: America/Chicago\n\n\n\nRRule\n\n\n\nmy_rrule.yml\n\nschedule:\n  rrule: 'FREQ=WEEKLY;BYDAY=MO,WE,FR;UNTIL=20240730T040000Z'",
    "crumbs": [
      "Week 9: {{< var w09.date-md >}}"
    ]
  },
  {
    "objectID": "w09/index.html#events",
    "href": "w09/index.html#events",
    "title": "Week 9: Data Validation, Data Processing Pipelines",
    "section": "Events",
    "text": "Events\n\nThese integrations are nice, but in reality usually overkill: you can just use Webhooks",
    "crumbs": [
      "Week 9: {{< var w09.date-md >}}"
    ]
  },
  {
    "objectID": "w09/index.html#logging",
    "href": "w09/index.html#logging",
    "title": "Week 9: Data Validation, Data Processing Pipelines",
    "section": "Logging",
    "text": "Logging\n\nFor most non-advanced use cases: literally just put log_prints=True as a parameters of your Flow:\n\n\n\nflow_with_logging.py\n\nfrom prefect import task, flow\n\n@task\ndef my_task():\n    print(\"we're logging print statements from a task\")\n\n@flow(log_prints=True)\ndef my_flow():\n    print(\"we're logging print statements from a flow\")\n    my_task()",
    "crumbs": [
      "Week 9: {{< var w09.date-md >}}"
    ]
  },
  {
    "objectID": "w09/index.html#notifications",
    "href": "w09/index.html#notifications",
    "title": "Week 9: Data Validation, Data Processing Pipelines",
    "section": "Notifications",
    "text": "Notifications\n\nActually immensely powerful, because it uses a templating engine called Jinja which is VERY worth learning!\nWith your brain in pipeline mode, think of Jinja as the [?] in:",
    "crumbs": [
      "Week 9: {{< var w09.date-md >}}"
    ]
  },
  {
    "objectID": "w09/index.html#jinja-example",
    "href": "w09/index.html#jinja-example",
    "title": "Week 9: Data Validation, Data Processing Pipelines",
    "section": "Jinja Example",
    "text": "Jinja Example\n\n\n\n\nhomepage.jinja\n\n&lt;h3&gt;{{ me['name'] }}'s Favorite Hobbies&lt;/h3&gt;\n&lt;ul&gt;\n{%- for hobby in hobbies %}\n  &lt;li&gt;{{ hobby }}&lt;/li&gt;\n{%- endfor %}\n&lt;/ul&gt;\n\n\n\n+\n\n\n\n\nrender_jinja.py\n\nfrom jinja2 import Template\ntmpl = Template('homepage.jinja')\ntmpl.render(\n    me = {'name': 'Jeff'},\n    hobbies = [\n        \"sleeping\",\n        \"jetski\",\n        \"getting sturdy\"\n    ]\n)\n\n\n\n\n\n‚Üì\n\n\n\n\n\n\nrendered.html\n\n&lt;h3&gt;Jeff's Favorite Hobbies&lt;/h3&gt;\n&lt;ul&gt;\n  &lt;li&gt;sleeping&lt;/li&gt;\n  &lt;li&gt;jetski&lt;/li&gt;\n  &lt;li&gt;getting sturdy&lt;/li&gt;\n&lt;/ul&gt;\n\n\n\\(\\leadsto\\)\n\nJeff's Favorite Hobbies\n\n  sleeping\n  jetski\n  getting sturdy",
    "crumbs": [
      "Week 9: {{< var w09.date-md >}}"
    ]
  },
  {
    "objectID": "w09/index.html#lab-time",
    "href": "w09/index.html#lab-time",
    "title": "Week 9: Data Validation, Data Processing Pipelines",
    "section": "Lab Time!",
    "text": "Lab Time!\n\nWeek 9 Lab: Pipeline Orchestration with Prefect",
    "crumbs": [
      "Week 9: {{< var w09.date-md >}}"
    ]
  },
  {
    "objectID": "w09/slides.html#the-necessary-buzzwords",
    "href": "w09/slides.html#the-necessary-buzzwords",
    "title": "Week 9: Data Validation, Data Processing Pipelines",
    "section": "The Necessary Buzzwords",
    "text": "The Necessary Buzzwords\n(Underlined words link to ‚ÄúConcepts‚Äù section of Prefect‚Äôs docs)\n\nFlow: The ‚Äúmain thing‚Äù your pipeline is doing!\n\nExcept in simple cases, will consist of multiple Tasks\n\nFlows and Tasks alone already provide much more functionality than ‚Äúbasic‚Äù functions‚Ä¶\nDeployments: Flows + Tasks + Metadata about how and when you want them to run.\n\nPrefect docs: ‚ÄúDeployments elevate workflows from [functions that you call manually] to [API-managed entities].‚Äù"
  },
  {
    "objectID": "w09/slides.html#deployments-rightarrow-run-flows-programmatically",
    "href": "w09/slides.html#deployments-rightarrow-run-flows-programmatically",
    "title": "Week 9: Data Validation, Data Processing Pipelines",
    "section": "Deployments \\(\\Rightarrow\\) Run Flows Programmatically",
    "text": "Deployments \\(\\Rightarrow\\) Run Flows Programmatically"
  },
  {
    "objectID": "w09/slides.html#the-power-of-deployments",
    "href": "w09/slides.html#the-power-of-deployments",
    "title": "Week 9: Data Validation, Data Processing Pipelines",
    "section": "The Power of Deployments",
    "text": "The Power of Deployments\n\n‚ÄúPackaging‚Äù code as Deployments enables Triggers:\n\nOn a particular Schedules: every 4 hours, every day at noon, once per week, etc.\nWhen important Events happen: pushes to GitHub, addition, removal, modification of files in Dropbox, etc.\n\nLogging, Notifications (Slack, email, text messages)\nResults as natural-language explanations (produced by Prefect) or custom summaries, called Artifacts, that you define as part of your flows"
  },
  {
    "objectID": "w09/slides.html#schedules",
    "href": "w09/slides.html#schedules",
    "title": "Week 9: Data Validation, Data Processing Pipelines",
    "section": "Schedules",
    "text": "Schedules\n\nCron: Full-on scheduling language (used by computers since 1975!)\n\n\n\ncrontab.sh\n\n# ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ minute (0‚Äì59)\n# ‚îÇ ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ hour (0‚Äì23)\n# ‚îÇ ‚îÇ ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ day of the month (1‚Äì31)\n# ‚îÇ ‚îÇ ‚îÇ ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ month (1‚Äì12)\n# ‚îÇ ‚îÇ ‚îÇ ‚îÇ ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ day of the week (0‚Äì6) (Sunday to Saturday)\n# ‚îÇ ‚îÇ ‚îÇ ‚îÇ ‚îÇ\n# ‚îÇ ‚îÇ ‚îÇ ‚îÇ ‚îÇ\n# ‚îÇ ‚îÇ ‚îÇ ‚îÇ ‚îÇ\n# * * * * * &lt;command to execute&gt;\n\n\n\n\nInterval\n\n\n\nmy_interval.yml\n\nschedule:\n  interval: 600\n  timezone: America/Chicago\n\n\n\nRRule\n\n\n\nmy_rrule.yml\n\nschedule:\n  rrule: 'FREQ=WEEKLY;BYDAY=MO,WE,FR;UNTIL=20240730T040000Z'"
  },
  {
    "objectID": "w09/slides.html#events",
    "href": "w09/slides.html#events",
    "title": "Week 9: Data Validation, Data Processing Pipelines",
    "section": "Events",
    "text": "Events\n\nThese integrations are nice, but in reality usually overkill: you can just use Webhooks"
  },
  {
    "objectID": "w09/slides.html#logging",
    "href": "w09/slides.html#logging",
    "title": "Week 9: Data Validation, Data Processing Pipelines",
    "section": "Logging",
    "text": "Logging\n\nFor most non-advanced use cases: literally just put log_prints=True as a parameters of your Flow:\n\n\n\nflow_with_logging.py\n\nfrom prefect import task, flow\n\n@task\ndef my_task():\n    print(\"we're logging print statements from a task\")\n\n@flow(log_prints=True)\ndef my_flow():\n    print(\"we're logging print statements from a flow\")\n    my_task()"
  },
  {
    "objectID": "w09/slides.html#notifications",
    "href": "w09/slides.html#notifications",
    "title": "Week 9: Data Validation, Data Processing Pipelines",
    "section": "Notifications",
    "text": "Notifications\n\nActually immensely powerful, because it uses a templating engine called Jinja which is VERY worth learning!\nWith your brain in pipeline mode, think of Jinja as the [?] in:"
  },
  {
    "objectID": "w09/slides.html#jinja-example",
    "href": "w09/slides.html#jinja-example",
    "title": "Week 9: Data Validation, Data Processing Pipelines",
    "section": "Jinja Example",
    "text": "Jinja Example\n\n\n\n\nhomepage.jinja\n\n&lt;h3&gt;{{ me['name'] }}'s Favorite Hobbies&lt;/h3&gt;\n&lt;ul&gt;\n{%- for hobby in hobbies %}\n  &lt;li&gt;{{ hobby }}&lt;/li&gt;\n{%- endfor %}\n&lt;/ul&gt;\n\n\n\n+\n\n\n\n\nrender_jinja.py\n\nfrom jinja2 import Template\ntmpl = Template('homepage.jinja')\ntmpl.render(\n    me = {'name': 'Jeff'},\n    hobbies = [\n        \"sleeping\",\n        \"jetski\",\n        \"getting sturdy\"\n    ]\n)\n\n\n\n\n‚Üì\n\n\n\n\n\n\nrendered.html\n\n&lt;h3&gt;Jeff's Favorite Hobbies&lt;/h3&gt;\n&lt;ul&gt;\n  &lt;li&gt;sleeping&lt;/li&gt;\n  &lt;li&gt;jetski&lt;/li&gt;\n  &lt;li&gt;getting sturdy&lt;/li&gt;\n&lt;/ul&gt;\n\n\n\\(\\leadsto\\)\n\nJeff's Favorite Hobbies\n\n  sleeping\n  jetski\n  getting sturdy"
  },
  {
    "objectID": "w09/slides.html#lab-time",
    "href": "w09/slides.html#lab-time",
    "title": "Week 9: Data Validation, Data Processing Pipelines",
    "section": "Lab Time!",
    "text": "Lab Time!\n\nWeek 9 Lab: Pipeline Orchestration with Prefect"
  },
  {
    "objectID": "w01/index.html",
    "href": "w01/index.html",
    "title": "Week 1: Course Intro and Motivation",
    "section": "",
    "text": "Open slides in new window ‚Üí",
    "crumbs": [
      "Week 1: {{< var w01.date-md >}}"
    ]
  },
  {
    "objectID": "w01/index.html#before-and-after",
    "href": "w01/index.html#before-and-after",
    "title": "Week 1: Course Intro and Motivation",
    "section": "Before and After",
    "text": "Before and After\n\n\n\n\n\n\n\n\n\nPython before taking DSAN 5500\n\n\n\n\n\n\n\nPython after taking DSAN 5500",
    "crumbs": [
      "Week 1: {{< var w01.date-md >}}"
    ]
  },
  {
    "objectID": "w01/index.html#developing-a-comparative-understanding",
    "href": "w01/index.html#developing-a-comparative-understanding",
    "title": "Week 1: Course Intro and Motivation",
    "section": "Developing a Comparative Understanding",
    "text": "Developing a Comparative Understanding\n\n\n\n\n\n\n\n\n\n‚ÄúWe hardly know ourselves, if we know nobody else‚Äù\n\n\n‚Äì(Blue Scholars, ‚ÄúSagaba‚Äù)\n\n\n\n\n\n\nThe course focuses on Python, but part of understanding Python is understanding how Python does things differently from other languages!\nJust as C was ‚Äúovertaken‚Äù by Java, then Java was ‚Äúovertaken‚Äù by Python, Python will someday be overtaken",
    "crumbs": [
      "Week 1: {{< var w01.date-md >}}"
    ]
  },
  {
    "objectID": "w01/index.html#the-numbers",
    "href": "w01/index.html#the-numbers",
    "title": "Week 1: Course Intro and Motivation",
    "section": "The Numbers",
    "text": "The Numbers\n\n\nCode\nimport pandas as pd\nimport numpy as np\nimport plotly.express as px\nimport plotly.io as pio\npio.renderers.default = \"notebook\"\nlang_df = pd.read_csv(\"assets/gh_issues.csv\")\n# The data for 2022 is essentially useless\nlang_df = lang_df[lang_df['year'] &lt;= 2021].copy()\nlang_df['time'] = lang_df['year'].astype(str) + \"_\" + lang_df['quarter'].astype(str)\nlang_df['prop'] = lang_df['count'] / lang_df.groupby('time')['count'].transform('sum')\nlang_df.head()\n#sns.lineplot(data=lang_df, x='year', y='count', color='name')\n# Keep only most popular languages\nkeep_langs = ['Python','JavaScript','C','C++','C#','Java','Ruby']\npop_df = lang_df[lang_df['name'].isin(keep_langs)].copy()\nfig = px.line(pop_df,\n  x='time', y='prop', color='name',\n  template='simple_white', title='Programming Language Popularity Since 2012',\n  labels = {\n    'time': 'Year',\n    'prop': 'Proportion of GitHub Issues'\n  }\n)\nfig.update_layout(\n  xaxis = dict(\n    tickmode = 'array',\n    tickvals = [f\"{year}_1\" for year in range(2012,2022)],\n    ticktext = [f\"{year}\" for year in range(2012,2022)]\n  )\n)\nfig.show()\n\n\n/Users/jpj/.pyenv/versions/3.11.5/lib/python3.11/site-packages/plotly/express/_core.py:2065: FutureWarning:\n\nWhen grouping with a length-1 list-like, you will need to pass a length-1 tuple to get_group in a future version of pandas. Pass `(name,)` instead of `name` to silence this warning.",
    "crumbs": [
      "Week 1: {{< var w01.date-md >}}"
    ]
  },
  {
    "objectID": "w01/index.html#research-particular-subfields",
    "href": "w01/index.html#research-particular-subfields",
    "title": "Week 1: Course Intro and Motivation",
    "section": "Research Particular Subfields!",
    "text": "Research Particular Subfields!\n\nFor example, if you‚Äôre interested in pursuing Economics, you‚Äôll want to learn Stata\nPhysics? You may want to learn MATLAB\nFor pure mathematics: Julia / Mathematica\nStatistics, sociology, psychology, political science: R\nWeb development: JavaScript / TypeScript\nThe holy grail: you‚Äôre comfortable with Python but can also think in general, language-agnostic terms about algorithmic and data-structural efficiency!",
    "crumbs": [
      "Week 1: {{< var w01.date-md >}}"
    ]
  },
  {
    "objectID": "w01/index.html#avoid-analysis-paralysis",
    "href": "w01/index.html#avoid-analysis-paralysis",
    "title": "Week 1: Course Intro and Motivation",
    "section": "Avoid Analysis Paralysis",
    "text": "Avoid Analysis Paralysis\n\n(Easier said than done, admittedly‚Ä¶)\n\n\n\n\nImage source: XKCD",
    "crumbs": [
      "Week 1: {{< var w01.date-md >}}"
    ]
  },
  {
    "objectID": "w01/index.html#tie-yourself-to-the-mast",
    "href": "w01/index.html#tie-yourself-to-the-mast",
    "title": "Week 1: Course Intro and Motivation",
    "section": "Tie Yourself to the Mast",
    "text": "Tie Yourself to the Mast\n\nThe exhausted 3am version of you will thank present you for writing useful comments, exceptions, and type hints!\n\n\n\n\nJohn William Waterhouse, Public domain, via Wikimedia Commons\n\n\n\nDemo: Lab 1",
    "crumbs": [
      "Week 1: {{< var w01.date-md >}}"
    ]
  },
  {
    "objectID": "w01/index.html#types-of-languages",
    "href": "w01/index.html#types-of-languages",
    "title": "Week 1: Course Intro and Motivation",
    "section": "Types of Languages",
    "text": "Types of Languages\n\nCompiled\nInterpreted",
    "crumbs": [
      "Week 1: {{< var w01.date-md >}}"
    ]
  },
  {
    "objectID": "w01/index.html#primitive-types",
    "href": "w01/index.html#primitive-types",
    "title": "Week 1: Course Intro and Motivation",
    "section": "Primitive Types",
    "text": "Primitive Types\n\nBoolean (True or False)\nNumbers (Integers, Decimals)\nNone",
    "crumbs": [
      "Week 1: {{< var w01.date-md >}}"
    ]
  },
  {
    "objectID": "w01/index.html#stack-and-heap",
    "href": "w01/index.html#stack-and-heap",
    "title": "Week 1: Course Intro and Motivation",
    "section": "Stack and Heap",
    "text": "Stack and Heap\nLet‚Äôs look at what happens, in the computer‚Äôs memory, when we run the following code:\n\n\n\n\nCode\nimport datetime\nimport pandas as pd\ncountry_df = pd.read_csv(\"assets/country_pop.csv\")\npop_col = country_df['pop']\nnum_rows = len(country_df)\nfilled = all(~pd.isna(country_df))\nalg_row = country_df.loc[country_df['name'] == \"Algeria\"]\nnum_cols = len(country_df.columns)\nusername = \"Jeff\"\ncur_date = datetime.datetime.now()\ni = 0\nj = None\nz = 314\ncountry_df\n\n\n\n\n\n\n\n\n\nname\npop\n\n\n\n\n0\nAlbania\n2.8\n\n\n1\nAlgeria\n44.2\n\n\n2\nAngola\n34.5",
    "crumbs": [
      "Week 1: {{< var w01.date-md >}}"
    ]
  },
  {
    "objectID": "w01/index.html#algorithmic-thinking",
    "href": "w01/index.html#algorithmic-thinking",
    "title": "Week 1: Course Intro and Motivation",
    "section": "Algorithmic Thinking",
    "text": "Algorithmic Thinking\n\nWhat are the inputs?\nWhat are the outputs?\nStandard cases vs.¬†edge cases\nAdversarial development: brainstorm all of the ways an evil hacker might break your code!",
    "crumbs": [
      "Week 1: {{< var w01.date-md >}}"
    ]
  },
  {
    "objectID": "w01/index.html#example-finding-an-item-within-a-list",
    "href": "w01/index.html#example-finding-an-item-within-a-list",
    "title": "Week 1: Course Intro and Motivation",
    "section": "Example: Finding An Item Within A List",
    "text": "Example: Finding An Item Within A List\n\nSeems straightforward, right? Given a list l, and a value v, return the index of l which contains v\nCorner cases galore‚Ä¶\nWhat if l contains v more than once? What if it doesn‚Äôt contain v at all? What if l is None? What if v is None? What if l isn‚Äôt a list at all? What if v is itself a list?",
    "crumbs": [
      "Week 1: {{< var w01.date-md >}}"
    ]
  },
  {
    "objectID": "w01/index.html#demo",
    "href": "w01/index.html#demo",
    "title": "Week 1: Course Intro and Motivation",
    "section": "Demo",
    "text": "Demo\nStreamlit Dictionary Lookup Demo",
    "crumbs": [
      "Week 1: {{< var w01.date-md >}}"
    ]
  },
  {
    "objectID": "w01/index.html#sanity-preserving-tip",
    "href": "w01/index.html#sanity-preserving-tip",
    "title": "Week 1: Course Intro and Motivation",
    "section": "#1 Sanity-Preserving Tip!",
    "text": "#1 Sanity-Preserving Tip!\n\n(For our purposes) the answer to ‚Äúwhat is Python?‚Äù is: an executable file that runs .py files!\n\ne.g., we can run python mycode.py in Terminal/PowerShell\n\nEverything else: pip, Jupyter, Pandas, etc., is an add-on to this basic functionality!",
    "crumbs": [
      "Week 1: {{< var w01.date-md >}}"
    ]
  },
  {
    "objectID": "w01/index.html#code-blocks-via-indentation",
    "href": "w01/index.html#code-blocks-via-indentation",
    "title": "Week 1: Course Intro and Motivation",
    "section": "Code Blocks via Indentation",
    "text": "Code Blocks via Indentation\n\n\nCode\nfor i in range(5):\n    print(i)\n\n\n0\n1\n2\n3\n4\n\n\n\n\nCode\nfor i in range(5):\nprint(i)\n\n\n\n  Cell In[4], line 2\n    print(i)\n    ^\nIndentationError: expected an indented block after 'for' statement on line 1",
    "crumbs": [
      "Week 1: {{< var w01.date-md >}}"
    ]
  },
  {
    "objectID": "w01/index.html#type-hints",
    "href": "w01/index.html#type-hints",
    "title": "Week 1: Course Intro and Motivation",
    "section": "Type Hints",
    "text": "Type Hints\n\nNot a ‚Äústandard‚Äù Python feature, not enforced by the Python interpreter, but can help you maintain sanity!\n\n\n\n\n\nCode\ndef multiply(thing1, thing2):\n  return thing1 * thing2\nprint(multiply(5, 3))\nprint(multiply(\"fiveee\", 3))\n\n\n15\nfiveeefiveeefiveee\n\n\n\n\n\nCode\nfrom numbers import Number\ndef multiply(thing1: Number, thing2: Number) -&gt; Number:\n  return thing1 * thing2\nprint(multiply(5, 3))\nprint(multiply(\"fiveee\", 3))\n\n\n15\nfiveeefiveeefiveee\n\n\n\n\n\n\nCode\nfrom mypy import api\nresult = api.run(['-c',_i])\nprint(result[0])\n\n\n&lt;string&gt;:3: error: Unsupported left operand type for * (\"Number\")  [operator]\n&lt;string&gt;:4: error: Argument 1 to \"multiply\" has incompatible type \"int\"; expected \"Number\"  [arg-type]\n&lt;string&gt;:4: note: Types from \"numbers\" aren't supported for static type checking\n&lt;string&gt;:4: note: See https://peps.python.org/pep-0484/#the-numeric-tower\n&lt;string&gt;:4: note: Consider using a protocol instead, such as typing.SupportsFloat\n&lt;string&gt;:4: error: Argument 2 to \"multiply\" has incompatible type \"int\"; expected \"Number\"  [arg-type]\n&lt;string&gt;:5: error: Argument 1 to \"multiply\" has incompatible type \"str\"; expected \"Number\"  [arg-type]\n&lt;string&gt;:5: note: Types from \"numbers\" aren't supported for static type checking\n&lt;string&gt;:5: note: See https://peps.python.org/pep-0484/#the-numeric-tower\n&lt;string&gt;:5: note: Consider using a protocol instead, such as typing.SupportsFloat\n&lt;string&gt;:5: error: Argument 2 to \"multiply\" has incompatible type \"int\"; expected \"Number\"  [arg-type]\nFound 5 errors in 1 file (checked 1 source file)",
    "crumbs": [
      "Week 1: {{< var w01.date-md >}}"
    ]
  },
  {
    "objectID": "w01/index.html#unit-testing",
    "href": "w01/index.html#unit-testing",
    "title": "Week 1: Course Intro and Motivation",
    "section": "Unit Testing",
    "text": "Unit Testing\n\nFor your life: test-driven development\n\nIf you‚Äôre coding a duck, you should test that it looks like a duck, quacks like a duck, etc.\n\nFor this class:\n\nPublic tests: Fully visible, see result plus full code\nHidden tests: See result + description of test, but no code\nSecret tests: We run these after you submit, as a major portion of the total grade",
    "crumbs": [
      "Week 1: {{< var w01.date-md >}}"
    ]
  },
  {
    "objectID": "w01/index.html#why-does-the-nyc-subway-have-express-lines",
    "href": "w01/index.html#why-does-the-nyc-subway-have-express-lines",
    "title": "Week 1: Course Intro and Motivation",
    "section": "Why Does The NYC Subway Have Express Lines?",
    "text": "Why Does The NYC Subway Have Express Lines?\n\n\n\nFrom NYC Central Park website",
    "crumbs": [
      "Week 1: {{< var w01.date-md >}}"
    ]
  },
  {
    "objectID": "w01/index.html#why-stop-at-two-levels",
    "href": "w01/index.html#why-stop-at-two-levels",
    "title": "Week 1: Course Intro and Motivation",
    "section": "Why Stop At Two Levels?",
    "text": "Why Stop At Two Levels?\n\n\n\nFrom Skip List Data Structure Explained, Sumit‚Äôs Diary blog",
    "crumbs": [
      "Week 1: {{< var w01.date-md >}}"
    ]
  },
  {
    "objectID": "w01/index.html#how-tf-does-google-maps-work",
    "href": "w01/index.html#how-tf-does-google-maps-work",
    "title": "Week 1: Course Intro and Motivation",
    "section": "How TF Does Google Maps Work?",
    "text": "How TF Does Google Maps Work?\n\nA (mostly) full-on answer: soon to come! Data structures for spatial data\nA step in that direction: Quadtrees! (Fractal DC)\n\n\nJim Kang‚Äôs Quadtree Visualizations",
    "crumbs": [
      "Week 1: {{< var w01.date-md >}}"
    ]
  },
  {
    "objectID": "w01/index.html#the-secretly-exciting-world-of-matrix-multiplication",
    "href": "w01/index.html#the-secretly-exciting-world-of-matrix-multiplication",
    "title": "Week 1: Course Intro and Motivation",
    "section": "The Secretly Exciting World of Matrix Multiplication",
    "text": "The Secretly Exciting World of Matrix Multiplication\n\nFun Fact 1: Most of modern Machine Learning is, at the processor level, just a bunch of matrix operations\nFun Fact 2: The way we‚Äôve all learned how to multiply matrices requires \\(O(N^3)\\) operations, for two \\(N \\times N\\) matrices \\(A\\) and \\(B\\)\nFun Fact 3: \\(\\underbrace{x^2 - y^2}_{\\mathclap{\\times\\text{ twice, }\\pm\\text{ once}}} = \\underbrace{(x+y)(x-y)}_{\\times\\text{once, }\\pm\\text{ twice}}\\)\nFun Fact 4: These are not very fun facts at all",
    "crumbs": [
      "Week 1: {{< var w01.date-md >}}"
    ]
  },
  {
    "objectID": "w01/index.html#why-is-jeff-rambling-about-matrix-math-from-300-years-ago",
    "href": "w01/index.html#why-is-jeff-rambling-about-matrix-math-from-300-years-ago",
    "title": "Week 1: Course Intro and Motivation",
    "section": "Why Is Jeff Rambling About Matrix Math From 300 Years Ago?",
    "text": "Why Is Jeff Rambling About Matrix Math From 300 Years Ago?\n\nThe way we all learned it in school (for \\(N = 2\\)):\n\n\\[\nAB = \\begin{bmatrix}\na_{11} & a_{12} \\\\\na_{21} & a_{22}\n\\end{bmatrix}\n\\begin{bmatrix}\nb_{11} & b_{12} \\\\\nb_{21} & b_{22}\n\\end{bmatrix} =\n\\begin{bmatrix}\na_{11}b_{11} + a_{12}b_{21} & a_{11}b_{12} + a_{12}b_{22} \\\\\na_{21}b_{11} + a_{22}b_{21} & a_{21}b_{12} + a_{22}b_{22}\n\\end{bmatrix}\n\\]\n\n12 operations: 8 multiplications, 4 additions \\(\\implies O(N^3) = O(2^3) = O(8)\\)\nAre we trapped? Like‚Ä¶ what is there to do besides performing these \\(N^3\\) operations, if we want to multiply two \\(N \\times N\\) matrices? Why are we about to move onto yet another slide about this?",
    "crumbs": [
      "Week 1: {{< var w01.date-md >}}"
    ]
  },
  {
    "objectID": "w01/index.html#block-partitioning-matrices",
    "href": "w01/index.html#block-partitioning-matrices",
    "title": "Week 1: Course Intro and Motivation",
    "section": "Block-Partitioning Matrices",
    "text": "Block-Partitioning Matrices\n\nNow let‚Äôs consider big matrices, whose dimensions are a power of 2 (for ease of illustration): \\(A\\) and \\(B\\) are now \\(N \\times N = 2^n \\times 2^n\\) matrices\nWe can ‚Äúdecompose‚Äù the matrix product \\(AB\\) as:\n\n\\[\nAB = \\begin{bmatrix}\nA_{11} & A_{12} \\\\\nA_{21} & A_{22}\n\\end{bmatrix}\n\\begin{bmatrix}\nB_{11} & B_{12} \\\\\nB_{21} & B_{22}\n\\end{bmatrix} =\n\\begin{bmatrix}\nA_{11}B_{11} + A_{12}B_{21} & A_{11}B_{12} + A_{12}B_{22} \\\\\nA_{21}B_{11} + A_{22}B_{21} & A_{21}B_{12} + A_{22}B_{22}\n\\end{bmatrix}\n\\]\n\nWhich gives us a recurrence relation representing the total number of computations required for this big-matrix multiplication: \\(T(N) = \\underbrace{8T(N/2)}_{\\text{Multiplications}} + \\underbrace{\\Theta(1)}_{\\text{Additions}}\\)\nIt turns out that (using a method we‚Äôll learn in Week 3), given this recurrence relation and our base case from the previous slide, this divide-and-conquer approach via block-partitioning doesn‚Äôt help us: we still get \\(T(n) = O(n^3)\\)‚Ä¶\nSo why is Jeff still torturing us with this example?",
    "crumbs": [
      "Week 1: {{< var w01.date-md >}}"
    ]
  },
  {
    "objectID": "w01/index.html#time-for-some-matrix-magic",
    "href": "w01/index.html#time-for-some-matrix-magic",
    "title": "Week 1: Course Intro and Motivation",
    "section": "Time For Some ü™Ñüî•MATRIX MAGIC!üî•ü™Ñ",
    "text": "Time For Some ü™Ñüî•MATRIX MAGIC!üî•ü™Ñ\n\n\nIf we define\n\n\\[\n\\begin{align*}\nm_1 &= (a_{11}+a_{22})(b_{11}+b_{22}) \\\\\nm_2 &= (a_{21}+a_{22})b_{11} \\\\\nm_3 &= a_{11}(b_{12}-b_{22}) \\\\\nm_4 &= a_{22}(b_{21}-b_{11}) \\\\\nm_5 &= (a_{11}+a_{12})b_{22} \\\\\nm_6 &= (a_{21}-a_{11})(b_{11}+b_{12}) \\\\\nm_7 &= (a_{12}-a_{22})(b_{21}+b_{22})\n\\end{align*}\n\\]\n\n\n\nThen we can combine these seven scalar products to obtain our matrix product:\n\n\\[\nAB = \\begin{bmatrix}\nm_1 + m_4 - m_5 + m_7 & m_3 + m_5 \\\\\nm_2 + m_4 & m_1 - m_2 + m_3 + m_6\n\\end{bmatrix}\n\\]\n\n\nTotal operations: 7 multiplications, 18 additions",
    "crumbs": [
      "Week 1: {{< var w01.date-md >}}"
    ]
  },
  {
    "objectID": "w01/index.html#block-partitioned-matrix-magic",
    "href": "w01/index.html#block-partitioned-matrix-magic",
    "title": "Week 1: Course Intro and Motivation",
    "section": "Block-Partitioned Matrix Magic",
    "text": "Block-Partitioned Matrix Magic\n\nUsing the previous slide as our base case and applying this same method to the block-paritioned big matrices, we get the same result, but where the four entries in \\(AB\\) here are now matrices rather than scalars:\n\n\\[\nAB = \\begin{bmatrix}\nM_1 + M_4 - M_5 + M_7 & M_3 + M_5 \\\\\nM_2 + M_4 & M_1 - M_2 + M_3 + M_6\n\\end{bmatrix}\n\\]\n\nWe now have a different recurrence relation: \\(T(N) = \\underbrace{7T(N/2)}_{\\text{Multiplications}} + \\underbrace{\\Theta(N^2)}_{\\text{Additions}}\\)\nAnd it turns out, somewhat miraculously, that the additional time required for the increased number of additions is significantly less than the time savings we obtain by doing 7 instead of 8 multiplications, since this method now runs in \\(T(N) = O(N^{\\log_2(7)}) \\approx O(N^{2.807}) &lt; O(N^3)\\) ü§Ø",
    "crumbs": [
      "Week 1: {{< var w01.date-md >}}"
    ]
  },
  {
    "objectID": "w01/slides.html#before-and-after",
    "href": "w01/slides.html#before-and-after",
    "title": "Week 1: Course Intro and Motivation",
    "section": "Before and After",
    "text": "Before and After\n\n\n\n\n\n\n\n\n\nPython before taking DSAN 5500\n\n\n\n\n\n\n\nPython after taking DSAN 5500"
  },
  {
    "objectID": "w01/slides.html#developing-a-comparative-understanding",
    "href": "w01/slides.html#developing-a-comparative-understanding",
    "title": "Week 1: Course Intro and Motivation",
    "section": "Developing a Comparative Understanding",
    "text": "Developing a Comparative Understanding\n\n\n\n\n\n\n‚ÄúWe hardly know ourselves, if we know nobody else‚Äù\n\n\n‚Äì(Blue Scholars, ‚ÄúSagaba‚Äù)\n\n\n\n\n\n\nThe course focuses on Python, but part of understanding Python is understanding how Python does things differently from other languages!\nJust as C was ‚Äúovertaken‚Äù by Java, then Java was ‚Äúovertaken‚Äù by Python, Python will someday be overtaken"
  },
  {
    "objectID": "w01/slides.html#the-numbers",
    "href": "w01/slides.html#the-numbers",
    "title": "Week 1: Course Intro and Motivation",
    "section": "The Numbers",
    "text": "The Numbers\n\n\nCode\nimport pandas as pd\nimport numpy as np\nimport plotly.express as px\nimport plotly.io as pio\npio.renderers.default = \"notebook\"\nlang_df = pd.read_csv(\"assets/gh_issues.csv\")\n# The data for 2022 is essentially useless\nlang_df = lang_df[lang_df['year'] &lt;= 2021].copy()\nlang_df['time'] = lang_df['year'].astype(str) + \"_\" + lang_df['quarter'].astype(str)\nlang_df['prop'] = lang_df['count'] / lang_df.groupby('time')['count'].transform('sum')\nlang_df.head()\n#sns.lineplot(data=lang_df, x='year', y='count', color='name')\n# Keep only most popular languages\nkeep_langs = ['Python','JavaScript','C','C++','C#','Java','Ruby']\npop_df = lang_df[lang_df['name'].isin(keep_langs)].copy()\nfig = px.line(pop_df,\n  x='time', y='prop', color='name',\n  template='simple_white', title='Programming Language Popularity Since 2012',\n  labels = {\n    'time': 'Year',\n    'prop': 'Proportion of GitHub Issues'\n  }\n)\nfig.update_layout(\n  xaxis = dict(\n    tickmode = 'array',\n    tickvals = [f\"{year}_1\" for year in range(2012,2022)],\n    ticktext = [f\"{year}\" for year in range(2012,2022)]\n  )\n)\nfig.show()"
  },
  {
    "objectID": "w01/slides.html#research-particular-subfields",
    "href": "w01/slides.html#research-particular-subfields",
    "title": "Week 1: Course Intro and Motivation",
    "section": "Research Particular Subfields!",
    "text": "Research Particular Subfields!\n\nFor example, if you‚Äôre interested in pursuing Economics, you‚Äôll want to learn Stata\nPhysics? You may want to learn MATLAB\nFor pure mathematics: Julia / Mathematica\nStatistics, sociology, psychology, political science: R\nWeb development: JavaScript / TypeScript\nThe holy grail: you‚Äôre comfortable with Python but can also think in general, language-agnostic terms about algorithmic and data-structural efficiency!"
  },
  {
    "objectID": "w01/slides.html#avoid-analysis-paralysis",
    "href": "w01/slides.html#avoid-analysis-paralysis",
    "title": "Week 1: Course Intro and Motivation",
    "section": "Avoid Analysis Paralysis",
    "text": "Avoid Analysis Paralysis\n\n(Easier said than done, admittedly‚Ä¶)\n\n\nImage source: XKCD"
  },
  {
    "objectID": "w01/slides.html#tie-yourself-to-the-mast",
    "href": "w01/slides.html#tie-yourself-to-the-mast",
    "title": "Week 1: Course Intro and Motivation",
    "section": "Tie Yourself to the Mast",
    "text": "Tie Yourself to the Mast\n\nThe exhausted 3am version of you will thank present you for writing useful comments, exceptions, and type hints!\n\n\nJohn William Waterhouse, Public domain, via Wikimedia Commons\nDemo: Lab 1"
  },
  {
    "objectID": "w01/slides.html#types-of-languages",
    "href": "w01/slides.html#types-of-languages",
    "title": "Week 1: Course Intro and Motivation",
    "section": "Types of Languages",
    "text": "Types of Languages\n\nCompiled\nInterpreted"
  },
  {
    "objectID": "w01/slides.html#primitive-types",
    "href": "w01/slides.html#primitive-types",
    "title": "Week 1: Course Intro and Motivation",
    "section": "Primitive Types",
    "text": "Primitive Types\n\nBoolean (True or False)\nNumbers (Integers, Decimals)\nNone"
  },
  {
    "objectID": "w01/slides.html#stack-and-heap",
    "href": "w01/slides.html#stack-and-heap",
    "title": "Week 1: Course Intro and Motivation",
    "section": "Stack and Heap",
    "text": "Stack and Heap\nLet‚Äôs look at what happens, in the computer‚Äôs memory, when we run the following code:\n\n\n\n\nCode\nimport datetime\nimport pandas as pd\ncountry_df = pd.read_csv(\"assets/country_pop.csv\")\npop_col = country_df['pop']\nnum_rows = len(country_df)\nfilled = all(~pd.isna(country_df))\nalg_row = country_df.loc[country_df['name'] == \"Algeria\"]\nnum_cols = len(country_df.columns)\nusername = \"Jeff\"\ncur_date = datetime.datetime.now()\ni = 0\nj = None\nz = 314\ncountry_df\n\n\n\n\n\n\n\n\n\nname\npop\n\n\n\n\n0\nAlbania\n2.8\n\n\n1\nAlgeria\n44.2\n\n\n2\nAngola\n34.5"
  },
  {
    "objectID": "w01/slides.html#algorithmic-thinking",
    "href": "w01/slides.html#algorithmic-thinking",
    "title": "Week 1: Course Intro and Motivation",
    "section": "Algorithmic Thinking",
    "text": "Algorithmic Thinking\n\nWhat are the inputs?\nWhat are the outputs?\nStandard cases vs.¬†edge cases\nAdversarial development: brainstorm all of the ways an evil hacker might break your code!"
  },
  {
    "objectID": "w01/slides.html#example-finding-an-item-within-a-list",
    "href": "w01/slides.html#example-finding-an-item-within-a-list",
    "title": "Week 1: Course Intro and Motivation",
    "section": "Example: Finding An Item Within A List",
    "text": "Example: Finding An Item Within A List\n\nSeems straightforward, right? Given a list l, and a value v, return the index of l which contains v\nCorner cases galore‚Ä¶\nWhat if l contains v more than once? What if it doesn‚Äôt contain v at all? What if l is None? What if v is None? What if l isn‚Äôt a list at all? What if v is itself a list?"
  },
  {
    "objectID": "w01/slides.html#demo",
    "href": "w01/slides.html#demo",
    "title": "Week 1: Course Intro and Motivation",
    "section": "Demo",
    "text": "Demo\nStreamlit Dictionary Lookup Demo"
  },
  {
    "objectID": "w01/slides.html#sanity-preserving-tip",
    "href": "w01/slides.html#sanity-preserving-tip",
    "title": "Week 1: Course Intro and Motivation",
    "section": "#1 Sanity-Preserving Tip!",
    "text": "#1 Sanity-Preserving Tip!\n\n(For our purposes) the answer to ‚Äúwhat is Python?‚Äù is: an executable file that runs .py files!\n\ne.g., we can run python mycode.py in Terminal/PowerShell\n\nEverything else: pip, Jupyter, Pandas, etc., is an add-on to this basic functionality!"
  },
  {
    "objectID": "w01/slides.html#code-blocks-via-indentation",
    "href": "w01/slides.html#code-blocks-via-indentation",
    "title": "Week 1: Course Intro and Motivation",
    "section": "Code Blocks via Indentation",
    "text": "Code Blocks via Indentation\n\n\nCode\nfor i in range(5):\n    print(i)\n\n\n0\n1\n2\n3\n4\n\n\n\n\nCode\nfor i in range(5):\nprint(i)\n\n\n\n  Cell In[4], line 2\n    print(i)\n    ^\nIndentationError: expected an indented block after 'for' statement on line 1"
  },
  {
    "objectID": "w01/slides.html#type-hints",
    "href": "w01/slides.html#type-hints",
    "title": "Week 1: Course Intro and Motivation",
    "section": "Type Hints",
    "text": "Type Hints\n\nNot a ‚Äústandard‚Äù Python feature, not enforced by the Python interpreter, but can help you maintain sanity!\n\n\n\n\n\nCode\ndef multiply(thing1, thing2):\n  return thing1 * thing2\nprint(multiply(5, 3))\nprint(multiply(\"fiveee\", 3))\n\n\n15\nfiveeefiveeefiveee\n\n\n\n\n\nCode\nfrom numbers import Number\ndef multiply(thing1: Number, thing2: Number) -&gt; Number:\n  return thing1 * thing2\nprint(multiply(5, 3))\nprint(multiply(\"fiveee\", 3))\n\n\n15\nfiveeefiveeefiveee\n\n\n\n\n\nCode\nfrom mypy import api\nresult = api.run(['-c',_i])\nprint(result[0])\n\n\n&lt;string&gt;:3: error: Unsupported left operand type for * (\"Number\")  [operator]\n&lt;string&gt;:4: error: Argument 1 to \"multiply\" has incompatible type \"int\"; expected \"Number\"  [arg-type]\n&lt;string&gt;:4: note: Types from \"numbers\" aren't supported for static type checking\n&lt;string&gt;:4: note: See https://peps.python.org/pep-0484/#the-numeric-tower\n&lt;string&gt;:4: note: Consider using a protocol instead, such as typing.SupportsFloat\n&lt;string&gt;:4: error: Argument 2 to \"multiply\" has incompatible type \"int\"; expected \"Number\"  [arg-type]\n&lt;string&gt;:5: error: Argument 1 to \"multiply\" has incompatible type \"str\"; expected \"Number\"  [arg-type]\n&lt;string&gt;:5: note: Types from \"numbers\" aren't supported for static type checking\n&lt;string&gt;:5: note: See https://peps.python.org/pep-0484/#the-numeric-tower\n&lt;string&gt;:5: note: Consider using a protocol instead, such as typing.SupportsFloat\n&lt;string&gt;:5: error: Argument 2 to \"multiply\" has incompatible type \"int\"; expected \"Number\"  [arg-type]\nFound 5 errors in 1 file (checked 1 source file)"
  },
  {
    "objectID": "w01/slides.html#unit-testing",
    "href": "w01/slides.html#unit-testing",
    "title": "Week 1: Course Intro and Motivation",
    "section": "Unit Testing",
    "text": "Unit Testing\n\nFor your life: test-driven development\n\nIf you‚Äôre coding a duck, you should test that it looks like a duck, quacks like a duck, etc.\n\nFor this class:\n\nPublic tests: Fully visible, see result plus full code\nHidden tests: See result + description of test, but no code\nSecret tests: We run these after you submit, as a major portion of the total grade"
  },
  {
    "objectID": "w01/slides.html#why-does-the-nyc-subway-have-express-lines",
    "href": "w01/slides.html#why-does-the-nyc-subway-have-express-lines",
    "title": "Week 1: Course Intro and Motivation",
    "section": "Why Does The NYC Subway Have Express Lines?",
    "text": "Why Does The NYC Subway Have Express Lines?\n\nFrom NYC Central Park website"
  },
  {
    "objectID": "w01/slides.html#why-stop-at-two-levels",
    "href": "w01/slides.html#why-stop-at-two-levels",
    "title": "Week 1: Course Intro and Motivation",
    "section": "Why Stop At Two Levels?",
    "text": "Why Stop At Two Levels?\n\nFrom Skip List Data Structure Explained, Sumit‚Äôs Diary blog"
  },
  {
    "objectID": "w01/slides.html#how-tf-does-google-maps-work",
    "href": "w01/slides.html#how-tf-does-google-maps-work",
    "title": "Week 1: Course Intro and Motivation",
    "section": "How TF Does Google Maps Work?",
    "text": "How TF Does Google Maps Work?\n\nA (mostly) full-on answer: soon to come! Data structures for spatial data\nA step in that direction: Quadtrees! (Fractal DC)\n\n\nJim Kang‚Äôs Quadtree Visualizations"
  },
  {
    "objectID": "w01/slides.html#the-secretly-exciting-world-of-matrix-multiplication",
    "href": "w01/slides.html#the-secretly-exciting-world-of-matrix-multiplication",
    "title": "Week 1: Course Intro and Motivation",
    "section": "The Secretly Exciting World of Matrix Multiplication",
    "text": "The Secretly Exciting World of Matrix Multiplication\n\nFun Fact 1: Most of modern Machine Learning is, at the processor level, just a bunch of matrix operations\nFun Fact 2: The way we‚Äôve all learned how to multiply matrices requires \\(O(N^3)\\) operations, for two \\(N \\times N\\) matrices \\(A\\) and \\(B\\)\nFun Fact 3: \\(\\underbrace{x^2 - y^2}_{\\mathclap{\\times\\text{ twice, }\\pm\\text{ once}}} = \\underbrace{(x+y)(x-y)}_{\\times\\text{once, }\\pm\\text{ twice}}\\)\nFun Fact 4: These are not very fun facts at all"
  },
  {
    "objectID": "w01/slides.html#why-is-jeff-rambling-about-matrix-math-from-300-years-ago",
    "href": "w01/slides.html#why-is-jeff-rambling-about-matrix-math-from-300-years-ago",
    "title": "Week 1: Course Intro and Motivation",
    "section": "Why Is Jeff Rambling About Matrix Math From 300 Years Ago?",
    "text": "Why Is Jeff Rambling About Matrix Math From 300 Years Ago?\n\nThe way we all learned it in school (for \\(N = 2\\)):\n\n\\[\nAB = \\begin{bmatrix}\na_{11} & a_{12} \\\\\na_{21} & a_{22}\n\\end{bmatrix}\n\\begin{bmatrix}\nb_{11} & b_{12} \\\\\nb_{21} & b_{22}\n\\end{bmatrix} =\n\\begin{bmatrix}\na_{11}b_{11} + a_{12}b_{21} & a_{11}b_{12} + a_{12}b_{22} \\\\\na_{21}b_{11} + a_{22}b_{21} & a_{21}b_{12} + a_{22}b_{22}\n\\end{bmatrix}\n\\]\n\n12 operations: 8 multiplications, 4 additions \\(\\implies O(N^3) = O(2^3) = O(8)\\)\nAre we trapped? Like‚Ä¶ what is there to do besides performing these \\(N^3\\) operations, if we want to multiply two \\(N \\times N\\) matrices? Why are we about to move onto yet another slide about this?"
  },
  {
    "objectID": "w01/slides.html#block-partitioning-matrices",
    "href": "w01/slides.html#block-partitioning-matrices",
    "title": "Week 1: Course Intro and Motivation",
    "section": "Block-Partitioning Matrices",
    "text": "Block-Partitioning Matrices\n\nNow let‚Äôs consider big matrices, whose dimensions are a power of 2 (for ease of illustration): \\(A\\) and \\(B\\) are now \\(N \\times N = 2^n \\times 2^n\\) matrices\nWe can ‚Äúdecompose‚Äù the matrix product \\(AB\\) as:\n\n\\[\nAB = \\begin{bmatrix}\nA_{11} & A_{12} \\\\\nA_{21} & A_{22}\n\\end{bmatrix}\n\\begin{bmatrix}\nB_{11} & B_{12} \\\\\nB_{21} & B_{22}\n\\end{bmatrix} =\n\\begin{bmatrix}\nA_{11}B_{11} + A_{12}B_{21} & A_{11}B_{12} + A_{12}B_{22} \\\\\nA_{21}B_{11} + A_{22}B_{21} & A_{21}B_{12} + A_{22}B_{22}\n\\end{bmatrix}\n\\]\n\nWhich gives us a recurrence relation representing the total number of computations required for this big-matrix multiplication: \\(T(N) = \\underbrace{8T(N/2)}_{\\text{Multiplications}} + \\underbrace{\\Theta(1)}_{\\text{Additions}}\\)\nIt turns out that (using a method we‚Äôll learn in Week 3), given this recurrence relation and our base case from the previous slide, this divide-and-conquer approach via block-partitioning doesn‚Äôt help us: we still get \\(T(n) = O(n^3)\\)‚Ä¶\nSo why is Jeff still torturing us with this example?"
  },
  {
    "objectID": "w01/slides.html#time-for-some-matrix-magic",
    "href": "w01/slides.html#time-for-some-matrix-magic",
    "title": "Week 1: Course Intro and Motivation",
    "section": "Time For Some ü™Ñüî•MATRIX MAGIC!üî•ü™Ñ",
    "text": "Time For Some ü™Ñüî•MATRIX MAGIC!üî•ü™Ñ\n\n\nIf we define\n\n\\[\n\\begin{align*}\nm_1 &= (a_{11}+a_{22})(b_{11}+b_{22}) \\\\\nm_2 &= (a_{21}+a_{22})b_{11} \\\\\nm_3 &= a_{11}(b_{12}-b_{22}) \\\\\nm_4 &= a_{22}(b_{21}-b_{11}) \\\\\nm_5 &= (a_{11}+a_{12})b_{22} \\\\\nm_6 &= (a_{21}-a_{11})(b_{11}+b_{12}) \\\\\nm_7 &= (a_{12}-a_{22})(b_{21}+b_{22})\n\\end{align*}\n\\]\n\n\n\nThen we can combine these seven scalar products to obtain our matrix product:\n\n\\[\nAB = \\begin{bmatrix}\nm_1 + m_4 - m_5 + m_7 & m_3 + m_5 \\\\\nm_2 + m_4 & m_1 - m_2 + m_3 + m_6\n\\end{bmatrix}\n\\]\n\n\nTotal operations: 7 multiplications, 18 additions"
  },
  {
    "objectID": "w01/slides.html#block-partitioned-matrix-magic",
    "href": "w01/slides.html#block-partitioned-matrix-magic",
    "title": "Week 1: Course Intro and Motivation",
    "section": "Block-Partitioned Matrix Magic",
    "text": "Block-Partitioned Matrix Magic\n\nUsing the previous slide as our base case and applying this same method to the block-paritioned big matrices, we get the same result, but where the four entries in \\(AB\\) here are now matrices rather than scalars:\n\n\\[\nAB = \\begin{bmatrix}\nM_1 + M_4 - M_5 + M_7 & M_3 + M_5 \\\\\nM_2 + M_4 & M_1 - M_2 + M_3 + M_6\n\\end{bmatrix}\n\\]\n\nWe now have a different recurrence relation: \\(T(N) = \\underbrace{7T(N/2)}_{\\text{Multiplications}} + \\underbrace{\\Theta(N^2)}_{\\text{Additions}}\\)\nAnd it turns out, somewhat miraculously, that the additional time required for the increased number of additions is significantly less than the time savings we obtain by doing 7 instead of 8 multiplications, since this method now runs in \\(T(N) = O(N^{\\log_2(7)}) \\approx O(N^{2.807}) &lt; O(N^3)\\) ü§Ø"
  },
  {
    "objectID": "midterm.html",
    "href": "midterm.html",
    "title": "Midterm Study Guide",
    "section": "",
    "text": "Coding Portion: Modifications of LinkedList (Circular / jump-to-end / doubly-linked); non-scary OOP skeleton üôà\nMultiple Choice Portion: Lots more to cover‚Ä¶\n\nHash Tables: \\(O(1 + \\epsilon \\log_2(n))\\), but think about it as:\n\\(1 + (\\text{Collision rate}) \\cdot (\\text{Collision handler efficiency})\\)\nLinked List \\(\\rightarrow\\) Binary Search Tree\nDepth-First vs.¬†Breadth-First: Picture of a tree \\(\\rightarrow\\) (a) what is BFS result, (b) what is (in/pre/post)-order DFS result?\nLastly: Cormen, Leiserson, Rivest, Stein (CLRS), pgs. 17-106",
    "crumbs": [
      "Midterm"
    ]
  },
  {
    "objectID": "midterm.html#midterm-structure",
    "href": "midterm.html#midterm-structure",
    "title": "Midterm Study Guide",
    "section": "",
    "text": "Coding Portion: Modifications of LinkedList (Circular / jump-to-end / doubly-linked); non-scary OOP skeleton üôà\nMultiple Choice Portion: Lots more to cover‚Ä¶\n\nHash Tables: \\(O(1 + \\epsilon \\log_2(n))\\), but think about it as:\n\\(1 + (\\text{Collision rate}) \\cdot (\\text{Collision handler efficiency})\\)\nLinked List \\(\\rightarrow\\) Binary Search Tree\nDepth-First vs.¬†Breadth-First: Picture of a tree \\(\\rightarrow\\) (a) what is BFS result, (b) what is (in/pre/post)-order DFS result?\nLastly: Cormen, Leiserson, Rivest, Stein (CLRS), pgs. 17-106",
    "crumbs": [
      "Midterm"
    ]
  },
  {
    "objectID": "midterm.html#the-two-boxes-that-most-things-in-this-course-can-be-sorted-into",
    "href": "midterm.html#the-two-boxes-that-most-things-in-this-course-can-be-sorted-into",
    "title": "Midterm Study Guide",
    "section": "The Two Boxes That Most Things In This Course Can Be Sorted Into",
    "text": "The Two Boxes That Most Things In This Course Can Be Sorted Into\n\nBox 1: Linear Things\nBox 2: Logarithmic Things\nThings that go into the boxes:\n\nAlgorithms\nData Structures\nSoftware Development Patterns",
    "crumbs": [
      "Midterm"
    ]
  },
  {
    "objectID": "midterm.html#the-boxes",
    "href": "midterm.html#the-boxes",
    "title": "Midterm Study Guide",
    "section": "The Boxes",
    "text": "The Boxes\n\n\n\n\n\n\n\n\n\nLinear Things: \\(O(N)\\)\nLogarithmic Things: \\(O(\\lg{N})\\)\n\n\n\n\nData Structures\nLinkedList\n\nBinarySearchTree\n\n\n\n\n\n\n\nSorting Algorithms\nInsertion-Sort\nMerge-Sort\n\n\nSearch Algorithms\nLinear-Search\nBinary-Search\n\n\nGeneral Pattern\nOne-by-One\nDivide-and-Conquer\n\n\nSteps to Look Up a Word\n\\(N = 102118\\)\n\\(\\lceil \\log_2(N) \\rceil = 17\\)\n\n\n\n\nHash Table: A ‚Äútrick‚Äù that gets us close to \\(O(1)\\), by pre-allocating lots of memory!\n\n\\[\nO(N) \\; \\underbrace{\\leadsto O(\\log_2(N))}_{\\mathclap{\\substack{\\text{More Efficient Algorithm} \\\\ \\text{(Free!)}}}} \\; \\underbrace{\\leadsto O(1 + \\epsilon\\log_2(N))}_{\\substack{\\text{More Memory} \\\\ \\text{(\\$\\$\\$)}}}\n\\]",
    "crumbs": [
      "Midterm"
    ]
  },
  {
    "objectID": "resources.html",
    "href": "resources.html",
    "title": "Resources",
    "section": "",
    "text": "For those looking to get a head start on the course material, you can look over the following two textbooks, which cover the course topics in the same general order that we will cover them (although with very different approaches: the target audience for these tends to be software engineers, who have slightly different needs from us data scientists!)\n\nGoodrich, Michael T., Roberto Tamassia, and Michael H. Goldwasser. 2013. Data Structures and Algorithms in Python. [PDF] [EPUB]\nLee, Kent D., and Steve Hubbard. 2015. Data Structures and Algorithms with Python. [PDF] [EPUB]\n\nFor much of the course we‚Äôll be focusing on a ‚Äústandard‚Äù collection of algorithms that all computer scientists (including data scientists!) should know; the most famous book collecting all of these algorithms into one place is known as ‚ÄúCLRS‚Äù, which is an abbreviation for the family names of the four authors (Cormen, Leiserson, Rivest, and Stein). The authors just released a Fourth Edition of the book in 2022, but the Third Edition is much easier to obtain, and honestly any edition should be fine for the level of depth we‚Äôll be going into:\n\nCormen, Thomas H., Charles E. Leiserson, Ronald R. Rivest, and Clifford Stein. 2022. Introduction to Algorithms, Fourth Edition. [PDF] [EPUB]",
    "crumbs": [
      "Resources"
    ]
  },
  {
    "objectID": "resources.html#textbooks",
    "href": "resources.html#textbooks",
    "title": "Resources",
    "section": "",
    "text": "For those looking to get a head start on the course material, you can look over the following two textbooks, which cover the course topics in the same general order that we will cover them (although with very different approaches: the target audience for these tends to be software engineers, who have slightly different needs from us data scientists!)\n\nGoodrich, Michael T., Roberto Tamassia, and Michael H. Goldwasser. 2013. Data Structures and Algorithms in Python. [PDF] [EPUB]\nLee, Kent D., and Steve Hubbard. 2015. Data Structures and Algorithms with Python. [PDF] [EPUB]\n\nFor much of the course we‚Äôll be focusing on a ‚Äústandard‚Äù collection of algorithms that all computer scientists (including data scientists!) should know; the most famous book collecting all of these algorithms into one place is known as ‚ÄúCLRS‚Äù, which is an abbreviation for the family names of the four authors (Cormen, Leiserson, Rivest, and Stein). The authors just released a Fourth Edition of the book in 2022, but the Third Edition is much easier to obtain, and honestly any edition should be fine for the level of depth we‚Äôll be going into:\n\nCormen, Thomas H., Charles E. Leiserson, Ronald R. Rivest, and Clifford Stein. 2022. Introduction to Algorithms, Fourth Edition. [PDF] [EPUB]",
    "crumbs": [
      "Resources"
    ]
  },
  {
    "objectID": "resources.html#online-resources",
    "href": "resources.html#online-resources",
    "title": "Resources",
    "section": "Online Resources",
    "text": "Online Resources\nIn terms of resources specifically aimed at data scientists, Datacamp has the following sequence of Python-based courses:\n\nIntroduction to Python for Data Science\nPython Data Science Toolbox (Part 1)\nPython Data Science Toolbox (Part 2)\nObject-Oriented Programming in Python",
    "crumbs": [
      "Resources"
    ]
  },
  {
    "objectID": "w13/index.html",
    "href": "w13/index.html",
    "title": "Week 13: Applications in NLP",
    "section": "",
    "text": "Open slides in new window ‚Üí",
    "crumbs": [
      "Week 13: {{< var w13.date-md >}}"
    ]
  },
  {
    "objectID": "w13/index.html#hw3-why-are-counts-insufficient",
    "href": "w13/index.html#hw3-why-are-counts-insufficient",
    "title": "Week 13: Applications in NLP",
    "section": "HW3: Why Are Counts Insufficient?",
    "text": "HW3: Why Are Counts Insufficient?\n\nYou shall know a word by the company it keeps",
    "crumbs": [
      "Week 13: {{< var w13.date-md >}}"
    ]
  },
  {
    "objectID": "w13/index.html#map-reduce-for-counts",
    "href": "w13/index.html#map-reduce-for-counts",
    "title": "Week 13: Applications in NLP",
    "section": "Map-Reduce for Counts",
    "text": "Map-Reduce for Counts",
    "crumbs": [
      "Week 13: {{< var w13.date-md >}}"
    ]
  },
  {
    "objectID": "w13/index.html#references",
    "href": "w13/index.html#references",
    "title": "Week 13: Applications in NLP",
    "section": "References",
    "text": "References",
    "crumbs": [
      "Week 13: {{< var w13.date-md >}}"
    ]
  },
  {
    "objectID": "w13/slides.html#hw3-why-are-counts-insufficient",
    "href": "w13/slides.html#hw3-why-are-counts-insufficient",
    "title": "Week 13: Applications in NLP",
    "section": "HW3: Why Are Counts Insufficient?",
    "text": "HW3: Why Are Counts Insufficient?\n\nYou shall know a word by the company it keeps"
  },
  {
    "objectID": "w13/slides.html#map-reduce-for-counts",
    "href": "w13/slides.html#map-reduce-for-counts",
    "title": "Week 13: Applications in NLP",
    "section": "Map-Reduce for Counts",
    "text": "Map-Reduce for Counts"
  },
  {
    "objectID": "w13/slides.html#references",
    "href": "w13/slides.html#references",
    "title": "Week 13: Applications in NLP",
    "section": "References",
    "text": "References"
  }
]