[
  {
    "objectID": "resources.html",
    "href": "resources.html",
    "title": "Resources",
    "section": "",
    "text": "For those looking to get a head start on the course material, you can look over the following two textbooks, which cover the course topics in the same general order that we will cover them (although with very different approaches: the target audience for these tends to be software engineers, who have slightly different needs from us data scientists!)\n\nGoodrich, Michael T., Roberto Tamassia, and Michael H. Goldwasser. 2013. Data Structures and Algorithms in Python. [PDF] [EPUB]\nLee, Kent D., and Steve Hubbard. 2015. Data Structures and Algorithms with Python. [PDF] [EPUB]\n\nFor much of the course we’ll be focusing on a “standard” collection of algorithms that all computer scientists (including data scientists!) should know; the most famous book collecting all of these algorithms into one place is known as “CLRS”, which is an abbreviation for the family names of the four authors (Cormen, Leiserson, Rivest, and Stein). The authors just released a Fourth Edition of the book in 2022, but the Third Edition is much easier to obtain, and honestly any edition should be fine for the level of depth we’ll be going into: * Cormen, Thomas H., Charles E. Leiserson, Ronald R. Rivest, and Clifford Stein. 2022. Introduction to Algorithms, Fourth Edition. [PDF] [EPUB]"
  },
  {
    "objectID": "resources.html#textbooks",
    "href": "resources.html#textbooks",
    "title": "Resources",
    "section": "",
    "text": "For those looking to get a head start on the course material, you can look over the following two textbooks, which cover the course topics in the same general order that we will cover them (although with very different approaches: the target audience for these tends to be software engineers, who have slightly different needs from us data scientists!)\n\nGoodrich, Michael T., Roberto Tamassia, and Michael H. Goldwasser. 2013. Data Structures and Algorithms in Python. [PDF] [EPUB]\nLee, Kent D., and Steve Hubbard. 2015. Data Structures and Algorithms with Python. [PDF] [EPUB]\n\nFor much of the course we’ll be focusing on a “standard” collection of algorithms that all computer scientists (including data scientists!) should know; the most famous book collecting all of these algorithms into one place is known as “CLRS”, which is an abbreviation for the family names of the four authors (Cormen, Leiserson, Rivest, and Stein). The authors just released a Fourth Edition of the book in 2022, but the Third Edition is much easier to obtain, and honestly any edition should be fine for the level of depth we’ll be going into: * Cormen, Thomas H., Charles E. Leiserson, Ronald R. Rivest, and Clifford Stein. 2022. Introduction to Algorithms, Fourth Edition. [PDF] [EPUB]"
  },
  {
    "objectID": "resources.html#online-resources",
    "href": "resources.html#online-resources",
    "title": "Resources",
    "section": "Online Resources",
    "text": "Online Resources\nIn terms of resources specifically aimed at data scientists, Datacamp has the following sequence of Python-based courses:\n\nIntroduction to Python for Data Science\nPython Data Science Toolbox (Part 1)\nPython Data Science Toolbox (Part 2)\nObject-Oriented Programming in Python"
  },
  {
    "objectID": "w01/slides.html#developing-a-comparative-understanding",
    "href": "w01/slides.html#developing-a-comparative-understanding",
    "title": "Week 1: Python Fundamentals",
    "section": "Developing a Comparative Understanding",
    "text": "Developing a Comparative Understanding\n\n\n\n\n\n\n“We hardly know ourselves, if we know nobody else”\n\n\n–(Blue Scholars, “Sagaba”)\n\n\n\n\n\n\nThe course focuses on Python, but part of understanding Python is understanding how Python does things differently from other languages!\nJust as C was “overtaken” by Java, then Java was “overtaken” by Python, Python will someday be overtaken"
  },
  {
    "objectID": "w01/slides.html#the-numbers",
    "href": "w01/slides.html#the-numbers",
    "title": "Week 1: Python Fundamentals",
    "section": "The Numbers",
    "text": "The Numbers\n\n\nCode\nimport pandas as pd\nimport numpy as np\nimport plotly.express as px\nimport plotly.io as pio\npio.renderers.default = \"notebook\"\nlang_df = pd.read_csv(\"assets/gh_issues.csv\")\n# The data for 2022 is essentially useless\nlang_df = lang_df[lang_df['year'] &lt;= 2021].copy()\nlang_df['time'] = lang_df['year'].astype(str) + \"_\" + lang_df['quarter'].astype(str)\nlang_df['prop'] = lang_df['count'] / lang_df.groupby('time')['count'].transform('sum')\nlang_df.head()\n#sns.lineplot(data=lang_df, x='year', y='count', color='name')\n# Keep only most popular languages\nkeep_langs = ['Python','JavaScript','C','C++','C#','Java','Ruby']\npop_df = lang_df[lang_df['name'].isin(keep_langs)].copy()\nfig = px.line(pop_df,\n  x='time', y='prop', color='name',\n  template='simple_white', title='Programming Language Popularity Since 2012',\n  labels = {\n    'time': 'Year',\n    'prop': 'Proportion of GitHub Issues'\n  }\n)\nfig.update_layout(\n  xaxis = dict(\n    tickmode = 'array',\n    tickvals = [f\"{year}_1\" for year in range(2012,2022)],\n    ticktext = [f\"{year}\" for year in range(2012,2022)]\n  )\n)\nfig.show()"
  },
  {
    "objectID": "w01/slides.html#avoid-analysis-paralysis",
    "href": "w01/slides.html#avoid-analysis-paralysis",
    "title": "Week 1: Python Fundamentals",
    "section": "Avoid Analysis Paralysis",
    "text": "Avoid Analysis Paralysis\n\n(Easier said than done, admittedly…)\n\n\nImage source: XKCD"
  },
  {
    "objectID": "w01/slides.html#tie-yourself-to-the-mast",
    "href": "w01/slides.html#tie-yourself-to-the-mast",
    "title": "Week 1: Python Fundamentals",
    "section": "Tie Yourself to the Mast",
    "text": "Tie Yourself to the Mast\n\nThe 3am, exhausted, brain-barely-working version of you will thank present you for writing useful exceptions and type hints!\n\n\nJohn William Waterhouse, Public domain, via Wikimedia Commons"
  },
  {
    "objectID": "w01/slides.html#types-of-languages",
    "href": "w01/slides.html#types-of-languages",
    "title": "Week 1: Python Fundamentals",
    "section": "Types of Languages",
    "text": "Types of Languages\n\nCompiled\nInterpreted"
  },
  {
    "objectID": "w01/slides.html#primitive-types",
    "href": "w01/slides.html#primitive-types",
    "title": "Week 1: Python Fundamentals",
    "section": "Primitive Types",
    "text": "Primitive Types\n\nBoolean (True or False)\nNumbers (Integers, Decimals)\nStrings\nNone"
  },
  {
    "objectID": "w01/slides.html#stack-and-heap",
    "href": "w01/slides.html#stack-and-heap",
    "title": "Week 1: Python Fundamentals",
    "section": "Stack and Heap",
    "text": "Stack and Heap\nLet’s look at what happens, in the computer’s memory, when we run the following code:\n\n\n\n\nCode\nimport datetime\nimport pandas as pd\ncountry_df = pd.read_csv(\"assets/country_pop.csv\")\npop_col = country_df['pop']\nnum_rows = len(country_df)\nfilled = all(~pd.isna(country_df))\nalg_row = country_df.loc[country_df['name'] == \"Algeria\"]\nnum_cols = len(country_df.columns)\nusername = \"Jeff\"\ncur_date = datetime.datetime.now()\ni = 0\nj = None\nz = 314\ncountry_df\n\n\n\n\n\n\n\n\n\nname\npop\n\n\n\n\n0\nAlbania\n2.8\n\n\n1\nAlgeria\n44.2\n\n\n2\nAngola\n34.5"
  },
  {
    "objectID": "w01/slides.html#algorithmic-thinking",
    "href": "w01/slides.html#algorithmic-thinking",
    "title": "Week 1: Python Fundamentals",
    "section": "Algorithmic Thinking",
    "text": "Algorithmic Thinking\n\nWhat are the inputs?\nWhat are the outputs?\nStandard cases vs. edge cases\nAdversarial development: brainstorm all of the ways an evil hacker might break your code!"
  },
  {
    "objectID": "w01/slides.html#sanity-preserving-tip",
    "href": "w01/slides.html#sanity-preserving-tip",
    "title": "Week 1: Python Fundamentals",
    "section": "#1 Sanity-Preserving Tip!",
    "text": "#1 Sanity-Preserving Tip!\n\n(For our purposes) the answer to “what is Python?” is: an executable file that runs .py files!\n\ne.g., we can run python mycode.py in Terminal/PowerShell\n\nEverything else: pip, Jupyter, Pandas, etc., is an add-on to this basic functionality!"
  },
  {
    "objectID": "w01/slides.html#code-blocks-via-indentation",
    "href": "w01/slides.html#code-blocks-via-indentation",
    "title": "Week 1: Python Fundamentals",
    "section": "Code Blocks via Indentation",
    "text": "Code Blocks via Indentation\n\n\nCode\nfor i in range(5):\n    print(i)\n\n\n0\n1\n2\n3\n4\n\n\n\n\nCode\nfor i in range(5):\nprint(i)\n\n\nIndentationError: expected an indented block after 'for' statement on line 1 (3695896917.py, line 2)"
  },
  {
    "objectID": "w01/slides.html#type-hints",
    "href": "w01/slides.html#type-hints",
    "title": "Week 1: Python Fundamentals",
    "section": "Type Hints",
    "text": "Type Hints\n\nNot a “standard” Python feature, not enforced by the Python interpreter, but can help you maintain sanity!\n\n\n\n\n\nCode\ndef multiply(thing1, thing2):\n  return thing1 * thing2\nprint(multiply(5, 3))\nprint(multiply(\"fiveee\", 3))\n\n\n15\nfiveeefiveeefiveee\n\n\n\n\n\nCode\nfrom numbers import Number\ndef multiply(thing1: Number, thing2: Number) -&gt; Number:\n  return thing1 * thing2\nprint(multiply(5, 3))\nprint(multiply(\"fiveee\", 3))\n\n\n15\nfiveeefiveeefiveee\n\n\n\n\n\n\nCode\nfrom mypy import api\nresult = api.run(['-c',_i])\nprint(result[0])\n\n\n&lt;string&gt;:3: error: Unsupported left operand type for * (\"Number\")  [operator]\n&lt;string&gt;:4: error: Argument 1 to \"multiply\" has incompatible type \"int\"; expected \"Number\"  [arg-type]\n&lt;string&gt;:4: note: Types from \"numbers\" aren't supported for static type checking\n&lt;string&gt;:4: note: See https://peps.python.org/pep-0484/#the-numeric-tower\n&lt;string&gt;:4: note: Consider using a protocol instead, such as typing.SupportsFloat\n&lt;string&gt;:4: error: Argument 2 to \"multiply\" has incompatible type \"int\"; expected \"Number\"  [arg-type]\n&lt;string&gt;:5: error: Argument 1 to \"multiply\" has incompatible type \"str\"; expected \"Number\"  [arg-type]\n&lt;string&gt;:5: note: Types from \"numbers\" aren't supported for static type checking\n&lt;string&gt;:5: note: See https://peps.python.org/pep-0484/#the-numeric-tower\n&lt;string&gt;:5: note: Consider using a protocol instead, such as typing.SupportsFloat\n&lt;string&gt;:5: error: Argument 2 to \"multiply\" has incompatible type \"int\"; expected \"Number\"  [arg-type]\nFound 5 errors in 1 file (checked 1 source file)\n\n\n\n\n\nDSAN 5500 Week 1: Python Fundamentals"
  },
  {
    "objectID": "w01/index.html",
    "href": "w01/index.html",
    "title": "Week 1: Python Fundamentals",
    "section": "",
    "text": "Open slides in new window →"
  },
  {
    "objectID": "w01/index.html#developing-a-comparative-understanding",
    "href": "w01/index.html#developing-a-comparative-understanding",
    "title": "Week 1: Python Fundamentals",
    "section": "Developing a Comparative Understanding",
    "text": "Developing a Comparative Understanding\n\n\n\n\n\n\n\n\n\n“We hardly know ourselves, if we know nobody else”\n\n\n–(Blue Scholars, “Sagaba”)\n\n\n\n\n\n\nThe course focuses on Python, but part of understanding Python is understanding how Python does things differently from other languages!\nJust as C was “overtaken” by Java, then Java was “overtaken” by Python, Python will someday be overtaken"
  },
  {
    "objectID": "w01/index.html#the-numbers",
    "href": "w01/index.html#the-numbers",
    "title": "Week 1: Python Fundamentals",
    "section": "The Numbers",
    "text": "The Numbers\n\n\nCode\nimport pandas as pd\nimport numpy as np\nimport plotly.express as px\nimport plotly.io as pio\npio.renderers.default = \"notebook\"\nlang_df = pd.read_csv(\"assets/gh_issues.csv\")\n# The data for 2022 is essentially useless\nlang_df = lang_df[lang_df['year'] &lt;= 2021].copy()\nlang_df['time'] = lang_df['year'].astype(str) + \"_\" + lang_df['quarter'].astype(str)\nlang_df['prop'] = lang_df['count'] / lang_df.groupby('time')['count'].transform('sum')\nlang_df.head()\n#sns.lineplot(data=lang_df, x='year', y='count', color='name')\n# Keep only most popular languages\nkeep_langs = ['Python','JavaScript','C','C++','C#','Java','Ruby']\npop_df = lang_df[lang_df['name'].isin(keep_langs)].copy()\nfig = px.line(pop_df,\n  x='time', y='prop', color='name',\n  template='simple_white', title='Programming Language Popularity Since 2012',\n  labels = {\n    'time': 'Year',\n    'prop': 'Proportion of GitHub Issues'\n  }\n)\nfig.update_layout(\n  xaxis = dict(\n    tickmode = 'array',\n    tickvals = [f\"{year}_1\" for year in range(2012,2022)],\n    ticktext = [f\"{year}\" for year in range(2012,2022)]\n  )\n)\nfig.show()"
  },
  {
    "objectID": "w01/index.html#avoid-analysis-paralysis",
    "href": "w01/index.html#avoid-analysis-paralysis",
    "title": "Week 1: Python Fundamentals",
    "section": "Avoid Analysis Paralysis",
    "text": "Avoid Analysis Paralysis\n\n(Easier said than done, admittedly…)\n\n\n\n\nImage source: XKCD"
  },
  {
    "objectID": "w01/index.html#tie-yourself-to-the-mast",
    "href": "w01/index.html#tie-yourself-to-the-mast",
    "title": "Week 1: Python Fundamentals",
    "section": "Tie Yourself to the Mast",
    "text": "Tie Yourself to the Mast\n\nThe 3am, exhausted, brain-barely-working version of you will thank present you for writing useful exceptions and type hints!\n\n\n\n\nJohn William Waterhouse, Public domain, via Wikimedia Commons"
  },
  {
    "objectID": "w01/index.html#types-of-languages",
    "href": "w01/index.html#types-of-languages",
    "title": "Week 1: Python Fundamentals",
    "section": "Types of Languages",
    "text": "Types of Languages\n\nCompiled\nInterpreted"
  },
  {
    "objectID": "w01/index.html#primitive-types",
    "href": "w01/index.html#primitive-types",
    "title": "Week 1: Python Fundamentals",
    "section": "Primitive Types",
    "text": "Primitive Types\n\nBoolean (True or False)\nNumbers (Integers, Decimals)\nStrings\nNone"
  },
  {
    "objectID": "w01/index.html#stack-and-heap",
    "href": "w01/index.html#stack-and-heap",
    "title": "Week 1: Python Fundamentals",
    "section": "Stack and Heap",
    "text": "Stack and Heap\nLet’s look at what happens, in the computer’s memory, when we run the following code:\n\n\n\n\nCode\nimport datetime\nimport pandas as pd\ncountry_df = pd.read_csv(\"assets/country_pop.csv\")\npop_col = country_df['pop']\nnum_rows = len(country_df)\nfilled = all(~pd.isna(country_df))\nalg_row = country_df.loc[country_df['name'] == \"Algeria\"]\nnum_cols = len(country_df.columns)\nusername = \"Jeff\"\ncur_date = datetime.datetime.now()\ni = 0\nj = None\nz = 314\ncountry_df\n\n\n\n\n\n\n\n\n\nname\npop\n\n\n\n\n0\nAlbania\n2.8\n\n\n1\nAlgeria\n44.2\n\n\n2\nAngola\n34.5"
  },
  {
    "objectID": "w01/index.html#algorithmic-thinking",
    "href": "w01/index.html#algorithmic-thinking",
    "title": "Week 1: Python Fundamentals",
    "section": "Algorithmic Thinking",
    "text": "Algorithmic Thinking\n\nWhat are the inputs?\nWhat are the outputs?\nStandard cases vs. edge cases\nAdversarial development: brainstorm all of the ways an evil hacker might break your code!"
  },
  {
    "objectID": "w01/index.html#sanity-preserving-tip",
    "href": "w01/index.html#sanity-preserving-tip",
    "title": "Week 1: Python Fundamentals",
    "section": "#1 Sanity-Preserving Tip!",
    "text": "#1 Sanity-Preserving Tip!\n\n(For our purposes) the answer to “what is Python?” is: an executable file that runs .py files!\n\ne.g., we can run python mycode.py in Terminal/PowerShell\n\nEverything else: pip, Jupyter, Pandas, etc., is an add-on to this basic functionality!"
  },
  {
    "objectID": "w01/index.html#code-blocks-via-indentation",
    "href": "w01/index.html#code-blocks-via-indentation",
    "title": "Week 1: Python Fundamentals",
    "section": "Code Blocks via Indentation",
    "text": "Code Blocks via Indentation\n\n\nCode\nfor i in range(5):\n    print(i)\n\n\n0\n1\n2\n3\n4\n\n\n\n\nCode\nfor i in range(5):\nprint(i)\n\n\nIndentationError: expected an indented block after 'for' statement on line 1 (3695896917.py, line 2)"
  },
  {
    "objectID": "w01/index.html#type-hints",
    "href": "w01/index.html#type-hints",
    "title": "Week 1: Python Fundamentals",
    "section": "Type Hints",
    "text": "Type Hints\n\nNot a “standard” Python feature, not enforced by the Python interpreter, but can help you maintain sanity!\n\n\n\n\n\nCode\ndef multiply(thing1, thing2):\n  return thing1 * thing2\nprint(multiply(5, 3))\nprint(multiply(\"fiveee\", 3))\n\n\n15\nfiveeefiveeefiveee\n\n\n\n\n\nCode\nfrom numbers import Number\ndef multiply(thing1: Number, thing2: Number) -&gt; Number:\n  return thing1 * thing2\nprint(multiply(5, 3))\nprint(multiply(\"fiveee\", 3))\n\n\n15\nfiveeefiveeefiveee\n\n\n\n\n\n\nCode\nfrom mypy import api\nresult = api.run(['-c',_i])\nprint(result[0])\n\n\n&lt;string&gt;:3: error: Unsupported left operand type for * (\"Number\")  [operator]\n&lt;string&gt;:4: error: Argument 1 to \"multiply\" has incompatible type \"int\"; expected \"Number\"  [arg-type]\n&lt;string&gt;:4: note: Types from \"numbers\" aren't supported for static type checking\n&lt;string&gt;:4: note: See https://peps.python.org/pep-0484/#the-numeric-tower\n&lt;string&gt;:4: note: Consider using a protocol instead, such as typing.SupportsFloat\n&lt;string&gt;:4: error: Argument 2 to \"multiply\" has incompatible type \"int\"; expected \"Number\"  [arg-type]\n&lt;string&gt;:5: error: Argument 1 to \"multiply\" has incompatible type \"str\"; expected \"Number\"  [arg-type]\n&lt;string&gt;:5: note: Types from \"numbers\" aren't supported for static type checking\n&lt;string&gt;:5: note: See https://peps.python.org/pep-0484/#the-numeric-tower\n&lt;string&gt;:5: note: Consider using a protocol instead, such as typing.SupportsFloat\n&lt;string&gt;:5: error: Argument 2 to \"multiply\" has incompatible type \"int\"; expected \"Number\"  [arg-type]\nFound 5 errors in 1 file (checked 1 source file)"
  },
  {
    "objectID": "w02/slides.html#creating-classes",
    "href": "w02/slides.html#creating-classes",
    "title": "Week 2: Software Design Patterns and Object-Oriented Programming",
    "section": "Creating Classes",
    "text": "Creating Classes\n\nUse case: Creating an inventory system for a Bookstore\n\n\n\n\n\nCode\nclass Bookstore:\n    def __init__(self, name, location):\n        self.name = name\n        self.location = location\n        self.books = []\n\n    def __getitem__(self, index):\n        return self.books[index]\n\n    def __repr__(self):\n        return self.__str__()\n\n    def __str__(self):\n        return f\"Bookstore[{self.get_num_books()} books]\"\n\n    def add_books(self, book_list):\n        self.books.extend(book_list)\n\n    def get_books(self):\n        return self.books\n\n    def get_inventory(self):\n        book_lines = []\n        for book_index, book in enumerate(self.get_books()):\n            cur_book_line = f\"{book_index}. {str(book)}\"\n            book_lines.append(cur_book_line)\n        return \"\\n\".join(book_lines)\n\n    def get_num_books(self):\n        return len(self.get_books())\n\n    def sort_books(self, sort_key):\n        self.books.sort(key=sort_key)\n\nclass Book:\n    def __init__(self, title, authors, num_pages):\n        self.title = title\n        self.authors = authors\n        self.num_pages = num_pages\n\n    def __str__(self):\n        return f\"Book[title={self.get_title()}, authors={self.get_authors()}, pages={self.get_num_pages()}]\"\n\n    def get_authors(self):\n        return self.authors\n\n    def get_first_author(self):\n        return self.authors[0]\n\n    def get_num_pages(self):\n        return self.num_pages\n\n    def get_title(self):\n        return self.title\n\nclass Person:\n    def __init__(self, family_name, given_name):\n        self.family_name = family_name\n        self.given_name = given_name\n\n    def __repr__(self):\n        return self.__str__()\n\n    def __str__(self):\n        return f\"Person[{self.get_family_name()}, {self.get_given_name()}]\"\n\n    def get_family_name(self):\n        return self.family_name\n\n    def get_given_name(self):\n        return self.given_name\n\n\n\n\n\nCode\nmy_bookstore = Bookstore(\"Bookland\", \"Washington, DC\")\nplath = Person(\"Plath\", \"Sylvia\")\nbell_jar = Book(\"The Bell Jar\", [plath], 244)\nmarx = Person(\"Marx\", \"Karl\")\nengels = Person(\"Engels\", \"Friedrich\")\nmanifesto = Book(\"The Communist Manifesto\", [marx, engels], 43)\nelster = Person(\"Elster\", \"Jon\")\ncement = Book(\"The Cement of Society\", [elster], 311)\nmy_bookstore.add_books([bell_jar, manifesto, cement])\nprint(my_bookstore)\nprint(my_bookstore[0])\nprint(\"Inventory:\")\nprint(my_bookstore.get_inventory())\n\n\nBookstore[3 books]\nBook[title=The Bell Jar, authors=[Person[Plath, Sylvia]], pages=244]\nInventory:\n0. Book[title=The Bell Jar, authors=[Person[Plath, Sylvia]], pages=244]\n1. Book[title=The Communist Manifesto, authors=[Person[Marx, Karl], Person[Engels, Friedrich]], pages=43]\n2. Book[title=The Cement of Society, authors=[Person[Elster, Jon]], pages=311]"
  },
  {
    "objectID": "w02/slides.html#doing-things-with-classes",
    "href": "w02/slides.html#doing-things-with-classes",
    "title": "Week 2: Software Design Patterns and Object-Oriented Programming",
    "section": "Doing Things With Classes",
    "text": "Doing Things With Classes\n\nNow we can use our OOP structure, for example to sort the inventory in different ways!\n\n\n\n\nAlphabetical (By First Author)\n\n\n\nCode\nsort_alpha = lambda x: x.get_first_author().get_family_name()\nmy_bookstore.sort_books(sort_key = sort_alpha)\nprint(my_bookstore.get_inventory())\n\n\n0. Book[title=The Cement of Society, authors=[Person[Elster, Jon]], pages=311]\n1. Book[title=The Communist Manifesto, authors=[Person[Marx, Karl], Person[Engels, Friedrich]], pages=43]\n2. Book[title=The Bell Jar, authors=[Person[Plath, Sylvia]], pages=244]\n\n\n\n\nBy Page Count\n\n\n\nCode\nsort_pages = lambda x: x.get_num_pages()\nmy_bookstore.sort_books(sort_key = sort_pages)\nprint(my_bookstore.get_inventory())\n\n\n0. Book[title=The Communist Manifesto, authors=[Person[Marx, Karl], Person[Engels, Friedrich]], pages=43]\n1. Book[title=The Bell Jar, authors=[Person[Plath, Sylvia]], pages=244]\n2. Book[title=The Cement of Society, authors=[Person[Elster, Jon]], pages=311]"
  },
  {
    "objectID": "w02/slides.html#in-pictures",
    "href": "w02/slides.html#in-pictures",
    "title": "Week 2: Software Design Patterns and Object-Oriented Programming",
    "section": "In Pictures",
    "text": "In Pictures\n\n\n\n\n\n\n\nG\n\n Bookstore Relational Diagram  \n\nBookstore\n\n Bookstore  Name  Location  Booklist  Get_Inventory()  Sort_Inventory()   \n\nPlace\n\n Place  City  State  Country  Print_Map()   \n\nBookstore:loc-&gt;Place:placehead\n\n  Has One   \n\nBook\n\n Book  Title  Authors  Num Pages  Preview()   \n\nBookstore:bl-&gt;Book:bookhead\n\n  Has Multiple   \n\nPerson\n\n Person  Family Name  Given Name   \n\nBook:auths-&gt;Person:personhead\n\n  Has Multiple"
  },
  {
    "objectID": "w02/slides.html#design-choices",
    "href": "w02/slides.html#design-choices",
    "title": "Week 2: Software Design Patterns and Object-Oriented Programming",
    "section": "Design Choices",
    "text": "Design Choices\n\nThe goal is to encapsulate as best as possible: which objects should have which properties, and which methods?\nExample: Fiction vs. Non-Fiction. How important is this distinction for your use case?\n\n\n\n\nOption 1: As Property of Book\n\n\n\nCode\nfrom enum import Enum\nclass BookType(Enum):\n    NONFICTION = 0\n    FICTION = 1\n\nclass Book:\n    def __init__(self, title: str, authors: list[Person], num_pages: int, type: BookType):\n        self.title = title\n        self.authors = authors\n        self.num_pages = num_pages\n        self.type = type\n\n    def __str__(self):\n        return f\"Book[title={self.title}, authors={self.authors}, pages={self.num_pages}, type={self.type}]\"\n\n\n\n\nCode\njoyce = Person(\"Joyce\", \"James\")\nulysses = Book(\"Ulysses\", [joyce], 732, BookType.FICTION)\nschelling = Person(\"Schelling\", \"Thomas\")\nmicromotives = Book(\"Micromotives and Macrobehavior\", [schelling], 252, BookType.NONFICTION)\nprint(ulysses)\nprint(micromotives)\n\n\nBook[title=Ulysses, authors=[Person[Joyce, James]], pages=732, type=BookType.FICTION]\nBook[title=Micromotives and Macrobehavior, authors=[Person[Schelling, Thomas]], pages=252, type=BookType.NONFICTION]\n\n\n\n\nOption 2: Separate Classes\n\n\n\nCode\n# class Book defined as earlier\nclass FictionBook(Book):\n    def __init__(self, title, authors, num_pages, characters):\n        super().__init__(title, authors, num_pages)\n        self.characters = characters\n\nclass NonfictionBook(Book):\n    def __init__(self, title, authors, num_pages, topic):\n        super().__init__(title, authors, num_pages)\n        self.topic = topic\n\n\n\n\nCode\njoyce = Person(\"Joyce\", \"James\")\nulysses = FictionBook(\"Ulysses\", [joyce], 732, [\"Daedalus\"])\nschelling = Person(\"Schelling\", \"Thomas\")\nmicromotives = NonfictionBook(\"Micromotives and Macrobehavior\", [schelling], 252, \"Economics\")\nprint(ulysses)\nprint(micromotives)\n\n\nBook[title=Ulysses, authors=[Person[Joyce, James]], pages=732]\nBook[title=Micromotives and Macrobehavior, authors=[Person[Schelling, Thomas]], pages=252]\n\n\n\n\n\n\nDSAN 5500 Week 2: Software Design Patterns and OOP"
  },
  {
    "objectID": "w02/index.html",
    "href": "w02/index.html",
    "title": "Week 2: Software Design Patterns and Object-Oriented Programming",
    "section": "",
    "text": "Open slides in new window →"
  },
  {
    "objectID": "w02/index.html#creating-classes",
    "href": "w02/index.html#creating-classes",
    "title": "Week 2: Software Design Patterns and Object-Oriented Programming",
    "section": "Creating Classes",
    "text": "Creating Classes\n\nUse case: Creating an inventory system for a Bookstore\n\n\n\n\n\nCode\nclass Bookstore:\n    def __init__(self, name, location):\n        self.name = name\n        self.location = location\n        self.books = []\n\n    def __getitem__(self, index):\n        return self.books[index]\n\n    def __repr__(self):\n        return self.__str__()\n\n    def __str__(self):\n        return f\"Bookstore[{self.get_num_books()} books]\"\n\n    def add_books(self, book_list):\n        self.books.extend(book_list)\n\n    def get_books(self):\n        return self.books\n\n    def get_inventory(self):\n        book_lines = []\n        for book_index, book in enumerate(self.get_books()):\n            cur_book_line = f\"{book_index}. {str(book)}\"\n            book_lines.append(cur_book_line)\n        return \"\\n\".join(book_lines)\n\n    def get_num_books(self):\n        return len(self.get_books())\n\n    def sort_books(self, sort_key):\n        self.books.sort(key=sort_key)\n\nclass Book:\n    def __init__(self, title, authors, num_pages):\n        self.title = title\n        self.authors = authors\n        self.num_pages = num_pages\n\n    def __str__(self):\n        return f\"Book[title={self.get_title()}, authors={self.get_authors()}, pages={self.get_num_pages()}]\"\n\n    def get_authors(self):\n        return self.authors\n\n    def get_first_author(self):\n        return self.authors[0]\n\n    def get_num_pages(self):\n        return self.num_pages\n\n    def get_title(self):\n        return self.title\n\nclass Person:\n    def __init__(self, family_name, given_name):\n        self.family_name = family_name\n        self.given_name = given_name\n\n    def __repr__(self):\n        return self.__str__()\n\n    def __str__(self):\n        return f\"Person[{self.get_family_name()}, {self.get_given_name()}]\"\n\n    def get_family_name(self):\n        return self.family_name\n\n    def get_given_name(self):\n        return self.given_name\n\n\n\n\n\nCode\nmy_bookstore = Bookstore(\"Bookland\", \"Washington, DC\")\nplath = Person(\"Plath\", \"Sylvia\")\nbell_jar = Book(\"The Bell Jar\", [plath], 244)\nmarx = Person(\"Marx\", \"Karl\")\nengels = Person(\"Engels\", \"Friedrich\")\nmanifesto = Book(\"The Communist Manifesto\", [marx, engels], 43)\nelster = Person(\"Elster\", \"Jon\")\ncement = Book(\"The Cement of Society\", [elster], 311)\nmy_bookstore.add_books([bell_jar, manifesto, cement])\nprint(my_bookstore)\nprint(my_bookstore[0])\nprint(\"Inventory:\")\nprint(my_bookstore.get_inventory())\n\n\nBookstore[3 books]\nBook[title=The Bell Jar, authors=[Person[Plath, Sylvia]], pages=244]\nInventory:\n0. Book[title=The Bell Jar, authors=[Person[Plath, Sylvia]], pages=244]\n1. Book[title=The Communist Manifesto, authors=[Person[Marx, Karl], Person[Engels, Friedrich]], pages=43]\n2. Book[title=The Cement of Society, authors=[Person[Elster, Jon]], pages=311]"
  },
  {
    "objectID": "w02/index.html#doing-things-with-classes",
    "href": "w02/index.html#doing-things-with-classes",
    "title": "Week 2: Software Design Patterns and Object-Oriented Programming",
    "section": "Doing Things With Classes",
    "text": "Doing Things With Classes\n\nNow we can use our OOP structure, for example to sort the inventory in different ways!\n\n\n\n\nAlphabetical (By First Author)\n\n\n\nCode\nsort_alpha = lambda x: x.get_first_author().get_family_name()\nmy_bookstore.sort_books(sort_key = sort_alpha)\nprint(my_bookstore.get_inventory())\n\n\n0. Book[title=The Cement of Society, authors=[Person[Elster, Jon]], pages=311]\n1. Book[title=The Communist Manifesto, authors=[Person[Marx, Karl], Person[Engels, Friedrich]], pages=43]\n2. Book[title=The Bell Jar, authors=[Person[Plath, Sylvia]], pages=244]\n\n\n\n\nBy Page Count\n\n\n\nCode\nsort_pages = lambda x: x.get_num_pages()\nmy_bookstore.sort_books(sort_key = sort_pages)\nprint(my_bookstore.get_inventory())\n\n\n0. Book[title=The Communist Manifesto, authors=[Person[Marx, Karl], Person[Engels, Friedrich]], pages=43]\n1. Book[title=The Bell Jar, authors=[Person[Plath, Sylvia]], pages=244]\n2. Book[title=The Cement of Society, authors=[Person[Elster, Jon]], pages=311]"
  },
  {
    "objectID": "w02/index.html#in-pictures",
    "href": "w02/index.html#in-pictures",
    "title": "Week 2: Software Design Patterns and Object-Oriented Programming",
    "section": "In Pictures",
    "text": "In Pictures\n\n\n\n\n\n\n\nG\n\n Bookstore Relational Diagram  \n\nBookstore\n\n Bookstore  Name  Location  Booklist  Get_Inventory()  Sort_Inventory()   \n\nPlace\n\n Place  City  State  Country  Print_Map()   \n\nBookstore:loc-&gt;Place:placehead\n\n  Has One   \n\nBook\n\n Book  Title  Authors  Num Pages  Preview()   \n\nBookstore:bl-&gt;Book:bookhead\n\n  Has Multiple   \n\nPerson\n\n Person  Family Name  Given Name   \n\nBook:auths-&gt;Person:personhead\n\n  Has Multiple"
  },
  {
    "objectID": "w02/index.html#design-choices",
    "href": "w02/index.html#design-choices",
    "title": "Week 2: Software Design Patterns and Object-Oriented Programming",
    "section": "Design Choices",
    "text": "Design Choices\n\nThe goal is to encapsulate as best as possible: which objects should have which properties, and which methods?\nExample: Fiction vs. Non-Fiction. How important is this distinction for your use case?\n\n\n\n\nOption 1: As Property of Book\n\n\n\nCode\nfrom enum import Enum\nclass BookType(Enum):\n    NONFICTION = 0\n    FICTION = 1\n\nclass Book:\n    def __init__(self, title: str, authors: list[Person], num_pages: int, type: BookType):\n        self.title = title\n        self.authors = authors\n        self.num_pages = num_pages\n        self.type = type\n\n    def __str__(self):\n        return f\"Book[title={self.title}, authors={self.authors}, pages={self.num_pages}, type={self.type}]\"\n\n\n\n\nCode\njoyce = Person(\"Joyce\", \"James\")\nulysses = Book(\"Ulysses\", [joyce], 732, BookType.FICTION)\nschelling = Person(\"Schelling\", \"Thomas\")\nmicromotives = Book(\"Micromotives and Macrobehavior\", [schelling], 252, BookType.NONFICTION)\nprint(ulysses)\nprint(micromotives)\n\n\nBook[title=Ulysses, authors=[Person[Joyce, James]], pages=732, type=BookType.FICTION]\nBook[title=Micromotives and Macrobehavior, authors=[Person[Schelling, Thomas]], pages=252, type=BookType.NONFICTION]\n\n\n\n\nOption 2: Separate Classes\n\n\n\nCode\n# class Book defined as earlier\nclass FictionBook(Book):\n    def __init__(self, title, authors, num_pages, characters):\n        super().__init__(title, authors, num_pages)\n        self.characters = characters\n\nclass NonfictionBook(Book):\n    def __init__(self, title, authors, num_pages, topic):\n        super().__init__(title, authors, num_pages)\n        self.topic = topic\n\n\n\n\nCode\njoyce = Person(\"Joyce\", \"James\")\nulysses = FictionBook(\"Ulysses\", [joyce], 732, [\"Daedalus\"])\nschelling = Person(\"Schelling\", \"Thomas\")\nmicromotives = NonfictionBook(\"Micromotives and Macrobehavior\", [schelling], 252, \"Economics\")\nprint(ulysses)\nprint(micromotives)\n\n\nBook[title=Ulysses, authors=[Person[Joyce, James]], pages=732]\nBook[title=Micromotives and Macrobehavior, authors=[Person[Schelling, Thomas]], pages=252]"
  },
  {
    "objectID": "w03/slides.html#data-structure-choice-leftrightarrow-efficiency-for-task",
    "href": "w03/slides.html#data-structure-choice-leftrightarrow-efficiency-for-task",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "Data Structure Choice \\(\\Leftrightarrow\\) Efficiency for Task",
    "text": "Data Structure Choice \\(\\Leftrightarrow\\) Efficiency for Task\n\nDo we need to be able to insert quickly?\nDo we need to be able to sort quickly?\nDo we need to be able to search quickly?\nAre we searching for individual items or for ranges?"
  },
  {
    "objectID": "w03/slides.html#recall-primitives",
    "href": "w03/slides.html#recall-primitives",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "Recall: Primitives",
    "text": "Recall: Primitives\n\nboolean\nint\nfloat\nstring\nNone\nNow we want to put these together, to form… structures! 👀"
  },
  {
    "objectID": "w03/slides.html#tuples",
    "href": "w03/slides.html#tuples",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "Tuples",
    "text": "Tuples\n\nFixed-size collection of \\(N\\) objects\nUnless otherwise specified, we’re talking about \\(2\\)-tuples\nExample: We can locate something on the Earth by specifying two floats: latitude and longitude!\n\n\n\nCode\ngtown_loc = (38.9076, -77.0723)\ngtown_loc\n\n\n(38.9076, -77.0723)\n\n\n\nBut what if we don’t know in advance how many items we want to store? Ex: how can we store users for a new app?"
  },
  {
    "objectID": "w03/slides.html#sequences",
    "href": "w03/slides.html#sequences",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "Sequences",
    "text": "Sequences\n\nIn General: Mapping of integer indices to objects\nx = ['a','b','c']\n\n\\(\\implies\\) x[0] = 'a'\n\\(\\implies\\) x[1] = 'b'\n\\(\\implies\\) x[2] = 'c'\n\nIn Python: list\nNice built-in language constructs for looping over lists, and especially for performing operations on each element"
  },
  {
    "objectID": "w03/slides.html#looping-over-sequences",
    "href": "w03/slides.html#looping-over-sequences",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "Looping Over Sequences",
    "text": "Looping Over Sequences\n\n\n\nC/C++/Java:\n\nList&lt;String&gt; myList = Arrays.asList(\"a\", \"b\", \"c\");\nfor (int i = 0; i &lt; x.size(); i++) {\n    System.out.println(myList.get(i));\n}\n\na\nb\nc\n\n\n\nPython:\n\n\n\nCode\nmy_list = ['a','b','c']\nfor list_element in my_list:\n  print(list_element)\n\n\na\nb\nc"
  },
  {
    "objectID": "w03/slides.html#list-comprehensions-apply-function-to-each-element",
    "href": "w03/slides.html#list-comprehensions-apply-function-to-each-element",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "List Comprehensions: Apply Function to Each Element",
    "text": "List Comprehensions: Apply Function to Each Element\n\nConstruct new list by applying operation to each element:\n\n\n\nCode\nmy_nums = [4,5,6,7]\nmy_squares = [num ** 2 for num in my_nums]\nmy_squares\n\n\n[16, 25, 36, 49]\n\n\n\nCan also filter the elements of the list with if:\n\n\n\nCode\nmy_odd_squares = [num ** 2 for num in my_nums if num % 2 == 1]\nmy_odd_squares\n\n\n[25, 49]"
  },
  {
    "objectID": "w03/slides.html#sets",
    "href": "w03/slides.html#sets",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "Sets",
    "text": "Sets\n\n\n\nExtremely helpful + efficient for finding unique elements:\n\n\n\nCode\nanimals_i_saw = ['bird','bird','fish','bird','cat','bird','lizard']\nprint(f\"Number of animals I saw: {len(animals_i_saw)}\")\n\n\nNumber of animals I saw: 7\n\n\n\n\nCode\nunique_animals_me = set(animals_i_saw)\nprint(f\"Set of unique animals: {unique_animals_me}\")\nprint(f\"Number of unique animals: {len(unique_animals_me)}\")\n\n\nSet of unique animals: {'lizard', 'bird', 'cat', 'fish'}\nNumber of unique animals: 4\n\n\n\n\nSupports all set operators from math:\n\n\n\nCode\nanimals_you_saw = ['lizard','dog','bird','bird','bird']\nunique_animals_you = set(animals_you_saw)\nunique_animals_both = unique_animals_me.intersection(unique_animals_you)\nprint(f\"Animals we both saw: {unique_animals_both}\")\n\n\nAnimals we both saw: {'lizard', 'bird'}\n\n\n\n\nCode\nunique_animals_either = unique_animals_me.union(unique_animals_you)\nprint(f\"Animals either of us saw: {unique_animals_either}\")\n\n\nAnimals either of us saw: {'dog', 'bird', 'fish', 'lizard', 'cat'}\n\n\n\n\nCode\nunique_animals_meonly = unique_animals_me - unique_animals_you\nprint(f\"Animals I saw that you didn't see: {unique_animals_meonly}\")\nunique_animals_youonly = unique_animals_you - unique_animals_me\nprint(f\"Animals you saw that I didn't see: {unique_animals_youonly}\")\n\n\nAnimals I saw that you didn't see: {'cat', 'fish'}\nAnimals you saw that I didn't see: {'dog'}"
  },
  {
    "objectID": "w03/slides.html#maps-dictionaries",
    "href": "w03/slides.html#maps-dictionaries",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "Maps / Dictionaries",
    "text": "Maps / Dictionaries\n\n\n\nWhile other language like Java have lots of fancy types of Map, Python has a single type, the dictionary:\n\n\n\nCode\ngtown_data = {\n  'name': 'Georgetown University',\n  'founded': 1789,\n  'coordinates': (38.9076, -77.0723),\n  'location': {\n    'city': 'Washington',\n    'state': 'DC', # &lt;__&lt;\n    'country': 'USA'\n  }\n}\nprint(gtown_data.keys())\nprint(gtown_data.values())\n\n\ndict_keys(['name', 'founded', 'coordinates', 'location'])\ndict_values(['Georgetown University', 1789, (38.9076, -77.0723), {'city': 'Washington', 'state': 'DC', 'country': 'USA'}])\n\n\n\n\nBe careful when looping! Default behavior is iteration over keys:\n\n\n\nCode\nfor k in gtown_data:\n  print(k)\n\n\nname\nfounded\ncoordinates\nlocation\n\n\n\nFor key-value pairs use .items():\n\n\n\nCode\nfor k, v in gtown_data.items():\n  print(k, v)\n\n\nname Georgetown University\nfounded 1789\ncoordinates (38.9076, -77.0723)\nlocation {'city': 'Washington', 'state': 'DC', 'country': 'USA'}"
  },
  {
    "objectID": "w03/slides.html#looking-under-the-hood",
    "href": "w03/slides.html#looking-under-the-hood",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "Looking Under the Hood",
    "text": "Looking Under the Hood\n\nWe want to understand these structures independently of the specifics of their implementation in Python, for now\nSo, let’s construct our own simplified versions of the basic structures"
  },
  {
    "objectID": "w03/slides.html#tuples-1",
    "href": "w03/slides.html#tuples-1",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "Tuples",
    "text": "Tuples\n\n\nCode\nclass MyTuple:\n  def __init__(self, thing1, thing2):\n    self.thing1 = thing1\n    self.thing2 = thing2\n\n  def __repr__(self):\n    return f\"({self.thing1}, {self.thing2})\"\n\n  def __str__(self):\n    return self.__repr__()\n\nt1 = MyTuple('a','b')\nt2 = MyTuple(111, 222)\nprint(t1, t2)\n\n\n(a, b) (111, 222)"
  },
  {
    "objectID": "w03/slides.html#lists",
    "href": "w03/slides.html#lists",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "Lists",
    "text": "Lists\n\n\n\nThe list itself just points to a root item:\n\n\n\nCode\nclass MyList:\n  def __init__(self):\n    self.root = None\n\n  def append(self, new_item):\n    if self.root is None:\n      self.root = MyListItem(new_item)\n    else:\n      self.root.append(new_item)\n\n  def __repr__(self):\n    return self.root.__repr__()\n\n\n\n\nAn item has contents, pointer to next item:\n\n\n\nCode\nclass MyListItem:\n  def __init__(self, content):\n    self.content = content\n    self.next = None\n\n  def append(self, new_item):\n    if self.next is None:\n      self.next = MyListItem(new_item)\n    else:\n      self.next.append(new_item)\n\n  def __repr__(self):\n    my_content = self.content\n    return my_content if self.next is None else f\"{my_content}, {self.next.__repr__()}\"\n\n\n\n\n\n\nCode\nusers = MyList()\nusers.append('Jeff')\nusers.append('Alma')\nusers.append('Bo')\nprint(users)\n\n\nJeff, Alma, Bo"
  },
  {
    "objectID": "w03/slides.html#so-how-many-steps-are-required",
    "href": "w03/slides.html#so-how-many-steps-are-required",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "So, How Many “Steps” Are Required…",
    "text": "So, How Many “Steps” Are Required…\n\nTo retrieve the first element in a MyTuple?\nTo retrieve the last element in a MyTuple?\nTo retrieve the first element in a MyList?\nTo retrieve the last element in a MyList?"
  },
  {
    "objectID": "w03/slides.html#how-many-steps",
    "href": "w03/slides.html#how-many-steps",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "How Many Steps?",
    "text": "How Many Steps?\n\n\n\nWith a MyTuple:\n\n\n\nCode\nt1.thing1\n\n\n'a'\n\n\n\n\\(\\implies\\) 1 step\n\n\n\nCode\nt1.thing2\n\n\n'b'\n\n\n\n\\(\\implies\\) 1 step\n\n\n\nWith a MyList:\n\n\n\nCode\nprint(users.root.content)\n\n\nJeff\n\n\n\n\\(\\implies\\) 1 step\n\n\n\nCode\ncurrent_node = users.root\nwhile current_node.next is not None:\n  current_node = current_node.next\nprint(current_node.content)\n\n\nBo\n\n\n\n\\(\\implies\\) (3 steps)\n…But why 3? How many steps if the list contained 5 elements? \\(N\\) elements?"
  },
  {
    "objectID": "w03/slides.html#pairwise-concatenating-list-elements",
    "href": "w03/slides.html#pairwise-concatenating-list-elements",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "Pairwise-Concatenating List Elements",
    "text": "Pairwise-Concatenating List Elements\n\nNow rather than just printing, let’s pairwise concatenate:\n\n\n\nCode\ncur_pointer1 = users.root\nwhile cur_pointer1 is not None:\n  cur_pointer2 = users.root\n  while cur_pointer2 is not None:\n    print(cur_pointer1.content + cur_pointer2.content)\n    cur_pointer2 = cur_pointer2.next\n  cur_pointer1 = cur_pointer1.next\n\n\nJeffJeff\nJeffAlma\nJeffBo\nAlmaJeff\nAlmaAlma\nAlmaBo\nBoJeff\nBoAlma\nBoBo\n\n\n\nHow many steps did this take? How about for a list with \\(5\\) elements? \\(N\\) elements?"
  },
  {
    "objectID": "w03/slides.html#last-example-pairwise-concatenation-with-end-check",
    "href": "w03/slides.html#last-example-pairwise-concatenation-with-end-check",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "Last Example: Pairwise-Concatenation with End Check",
    "text": "Last Example: Pairwise-Concatenation with End Check\n\n\nCode\nprinted_items = []\ncur_pointer1 = users.root\nwhile cur_pointer1 is not None:\n  cur_pointer2 = users.root\n  while cur_pointer2 is not None:\n    print(cur_pointer1.content + cur_pointer2.content)\n    printed_items.append(cur_pointer1.content)\n    printed_items.append(cur_pointer2.content)\n    cur_pointer2 = cur_pointer2.next\n  cur_pointer1 = cur_pointer1.next\ncheck_pointer = users.root\nwhile check_pointer is not None:\n  if check_pointer.content in printed_items:\n    print(f\"Phew. {check_pointer.content} printed at least once.\")\n  else:\n    print(f\"Oh no! {check_pointer.content} was never printed!!!\")\n  check_pointer = check_pointer.next\n\n\nJeffJeff\nJeffAlma\nJeffBo\nAlmaJeff\nAlmaAlma\nAlmaBo\nBoJeff\nBoAlma\nBoBo\nPhew. Jeff printed at least once.\nPhew. Alma printed at least once.\nPhew. Bo printed at least once."
  },
  {
    "objectID": "w03/slides.html#generalizing",
    "href": "w03/slides.html#generalizing",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "Generalizing",
    "text": "Generalizing\n\nAlgorithms are “efficient” relative to how their runtime scales as the objects grow larger and larger!\nTuple operations take 1 step no matter what\nFor lists, retrieving the first element takes 1 step no matter what, but retrieving the last element takes \\(n\\) steps!\nPairwise concatenation requires \\(n^2\\) steps!\nWe write the complexity of an algorithm as \\(O(f(n))\\), where \\(f(n)\\) is a “complexity class” representing how long it takes to run, in the limit, as \\(n \\rightarrow \\infty\\)"
  },
  {
    "objectID": "w03/slides.html#the-complexity-of-our-examples",
    "href": "w03/slides.html#the-complexity-of-our-examples",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "The Complexity of Our Examples",
    "text": "The Complexity of Our Examples\n\nTuple operations: \\(O(1)\\)\nRetrieving the first element of a list: \\(O(1)\\)\nRetrieving the last element of a list: \\(O(n)\\)\nPairwise concatenation: \\(O(n^2)\\)\nPairwise concatenation+check: \\(O(n^2 + n) = O(n^2) \\leftarrow !!!\\)\nCrucial to think asymptotically to wrap our heads around this!"
  },
  {
    "objectID": "w03/slides.html#the-figure-you-should-make-in-your-brain-every-time",
    "href": "w03/slides.html#the-figure-you-should-make-in-your-brain-every-time",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "The Figure You Should Make In Your Brain Every Time",
    "text": "The Figure You Should Make In Your Brain Every Time\n\n\nCode\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nn_vals = [np.power(10, k) for k in np.arange(1, 2.75, 0.25)]\nruntime_df = pd.DataFrame({'$n$': n_vals})\nruntime_df['$n^2 + 50n$'] = runtime_df['$n$'].apply(lambda x: np.power(x, 2) + 50*x)\nruntime_df['$n^2 + 10000$'] = runtime_df['$n$'].apply(lambda x: np.power(x, 2) + 10000)\nruntime_df['$O(n)$'] = runtime_df['$n$'].copy()\nruntime_df['$O(nlogn)$'] = runtime_df['$n$'].apply(lambda x: x * np.log(x))\nruntime_df['$O(n^2)$'] = runtime_df['$n$'].apply(lambda x: np.power(x, 2))\nruntime_df['$O(n^2logn)$'] = runtime_df['$n$'].apply(lambda x: np.power(x,2) * np.log(x))\nruntime_df['$O(n^3)$'] = runtime_df['$n$'].apply(lambda x: np.power(x, 3))\nruntime_df['$O(n^3logn)$'] = runtime_df['$n$'].apply(lambda x: np.power(x, 3) * np.log(x))\n# Get the max values, for labeling the ends of lines\nmax_vals = runtime_df.max().to_dict()\nplot_df = runtime_df.melt(id_vars=['$n$'])\n#print(plot_df)\nstyle_map = {col: '' if (col == '$n^2 + 50n$') or (col == '$n^2 + 10000$') else (2,1) for col in runtime_df.columns}\nfig, ax = plt.subplots(figsize=(11,5))\nsns.lineplot(plot_df, x='$n$', y='value', hue='variable', style='variable', dashes=style_map)\n#plt.xscale('log')\nplt.yscale('log')\n# extract the existing handles and labels\nh, l = ax.get_legend_handles_labels()\n# slice the appropriate section of l and h to include in the legend\nax.legend(h[0:2], l[0:2])\nfor label, val in max_vals.items():\n  if (label == '$n$') or (label == '$n^2 + 50n$') or (label == '$n^2 + 10000$'):\n    continue\n  if 'logn' in label:\n    label = label.replace('logn', r'\\log(n)')\n  ax.text(x = max_vals['$n$'] + 2, y = val, s=label, va='center')\n# Hide the right and top spines\nax.spines[['right', 'top']].set_visible(False)\nplt.show()\n\n\n\n\n\n\n\n\n\n\nTakeaway: As \\(n \\rightarrow \\infty\\), highest-degree terms dominate!"
  },
  {
    "objectID": "w03/slides.html#constants-on-highest-degree-terms-also-go-away",
    "href": "w03/slides.html#constants-on-highest-degree-terms-also-go-away",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "Constants On Highest-Degree Terms Also Go Away",
    "text": "Constants On Highest-Degree Terms Also Go Away\n\n(Though this is harder to see, without a log-log plot:)\n\n\n\nCode\nn_vals = [np.power(10, k) for k in np.arange(1, 6, 0.5)]\nrt_const_df = pd.DataFrame({'$n$': n_vals})\nrt_const_df['$20n^2$'] = rt_const_df['$n$'].apply(lambda x: 20*np.power(x,2))\nrt_const_df['$n^2$'] = rt_const_df['$n$'].apply(lambda x: np.power(x,2))\nrt_const_df['$n^2logn$'] = rt_const_df['$n$'].apply(lambda x: np.power(x,2) * np.power(np.log(x),2))\nrt_const_df['$n^3$'] = rt_const_df['$n$'].apply(lambda x: np.power(x,3))\n# Get the max values, for labeling the ends of lines\nmax_vals = rt_const_df.max().to_dict()\nplot_df_const = rt_const_df.melt(id_vars=['$n$'])\nstyle_map = {col: '' if (col == '$20n^2$') else (2,1) for col in rt_const_df.columns}\nfig_const, ax_const = plt.subplots(figsize=(11,5))\nsns.lineplot(plot_df_const, x='$n$', y='value', hue='variable', style='variable', dashes=style_map)\nplt.xscale('log')\nplt.yscale('log')\n# extract the existing handles and labels\nh_const, l_const = ax_const.get_legend_handles_labels()\n# slice the appropriate section of l and h to include in the legend\nax_const.legend(h_const[0:1], l_const[0:1])\nfor label, val in max_vals.items():\n  if (label == '$n$') or (label == '$20n^2$'):\n    continue\n  if 'logn' in label:\n    label = label.replace('logn', r'\\log(n)')\n  ax_const.text(x = max_vals['$n$'] + 10**4, y = val, s=label, va='center')\n# Hide the right and top spines\nax_const.spines[['right', 'top']].set_visible(False)\nplt.show()"
  },
  {
    "objectID": "w03/slides.html#formalizing-big-o-notation",
    "href": "w03/slides.html#formalizing-big-o-notation",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "Formalizing Big-O Notation",
    "text": "Formalizing Big-O Notation\n\nLet \\(f, g: \\mathbb{N} \\rightarrow \\mathbb{N}\\). Then we write \\(f(n) = O(g(n))\\) when there exists a threshold \\(n_0 &gt; 0\\) and a constant \\(K &gt; 0\\) such that \\[\n\\forall n \\geq n_0 \\left[ f(n) \\leq K\\cdot g(n) \\right]\n\\]\nIn words: beyond a certain point \\(n_0\\), \\(f(n)\\) is bounded above by \\(K\\cdot g(n)\\).\nDefinition from Savage (1998, pg. 13)"
  },
  {
    "objectID": "w03/slides.html#intuition-rightarrow-proof",
    "href": "w03/slides.html#intuition-rightarrow-proof",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "Intuition \\(\\rightarrow\\) Proof",
    "text": "Intuition \\(\\rightarrow\\) Proof\n\nUsing this definition, we can now prove \\(f(n) = n^2 + 50n = O(n^2)\\)!\nHere \\(f(n) = n^2 + 50n\\), \\(g(n) = n^2\\)\nTheorem: \\(\\exists \\; n_0 \\; \\text{ s.t. } \\forall n \\geq n_0 \\left[ n^2 + 50n \\leq Kn^2 \\right]\\)\nProof: Let \\(K = 50\\). Then \\[\n\\begin{align*}\n&n^2 + 50n \\leq 50n^2 \\iff n + 50 \\leq 50n \\\\\n&\\iff 49n \\geq 50 \\iff n \\geq \\frac{50}{49}.\n\\end{align*}\n\\]\nSo if we choose \\(n_0 = 2\\), the chain of statements holds. \\(\\blacksquare\\)"
  },
  {
    "objectID": "w03/slides.html#references",
    "href": "w03/slides.html#references",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "References",
    "text": "References\n\n\nSavage, John E. 1998. Models of Computation: Exploring the Power of Computing. Addison-Wesley.\n\n\n\n\nDSAN 5500 Week 3: Data Structures, Computational Complexity"
  },
  {
    "objectID": "w03/index.html",
    "href": "w03/index.html",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "",
    "text": "Open slides in new window →"
  },
  {
    "objectID": "w03/index.html#data-structure-choice-leftrightarrow-efficiency-for-task",
    "href": "w03/index.html#data-structure-choice-leftrightarrow-efficiency-for-task",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "Data Structure Choice \\(\\Leftrightarrow\\) Efficiency for Task",
    "text": "Data Structure Choice \\(\\Leftrightarrow\\) Efficiency for Task\n\nDo we need to be able to insert quickly?\nDo we need to be able to sort quickly?\nDo we need to be able to search quickly?\nAre we searching for individual items or for ranges?"
  },
  {
    "objectID": "w03/index.html#recall-primitives",
    "href": "w03/index.html#recall-primitives",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "Recall: Primitives",
    "text": "Recall: Primitives\n\nboolean\nint\nfloat\nstring\nNone\nNow we want to put these together, to form… structures! 👀"
  },
  {
    "objectID": "w03/index.html#tuples",
    "href": "w03/index.html#tuples",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "Tuples",
    "text": "Tuples\n\nFixed-size collection of \\(N\\) objects\nUnless otherwise specified, we’re talking about \\(2\\)-tuples\nExample: We can locate something on the Earth by specifying two floats: latitude and longitude!\n\n\n\nCode\ngtown_loc = (38.9076, -77.0723)\ngtown_loc\n\n\n(38.9076, -77.0723)\n\n\n\nBut what if we don’t know in advance how many items we want to store? Ex: how can we store users for a new app?"
  },
  {
    "objectID": "w03/index.html#sequences",
    "href": "w03/index.html#sequences",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "Sequences",
    "text": "Sequences\n\nIn General: Mapping of integer indices to objects\nx = ['a','b','c']\n\n\\(\\implies\\) x[0] = 'a'\n\\(\\implies\\) x[1] = 'b'\n\\(\\implies\\) x[2] = 'c'\n\nIn Python: list\nNice built-in language constructs for looping over lists, and especially for performing operations on each element"
  },
  {
    "objectID": "w03/index.html#looping-over-sequences",
    "href": "w03/index.html#looping-over-sequences",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "Looping Over Sequences",
    "text": "Looping Over Sequences\n\n\n\nC/C++/Java:\n\nList&lt;String&gt; myList = Arrays.asList(\"a\", \"b\", \"c\");\nfor (int i = 0; i &lt; x.size(); i++) {\n    System.out.println(myList.get(i));\n}\n\na\nb\nc\n\n\n\nPython:\n\n\n\nCode\nmy_list = ['a','b','c']\nfor list_element in my_list:\n  print(list_element)\n\n\na\nb\nc"
  },
  {
    "objectID": "w03/index.html#list-comprehensions-apply-function-to-each-element",
    "href": "w03/index.html#list-comprehensions-apply-function-to-each-element",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "List Comprehensions: Apply Function to Each Element",
    "text": "List Comprehensions: Apply Function to Each Element\n\nConstruct new list by applying operation to each element:\n\n\n\nCode\nmy_nums = [4,5,6,7]\nmy_squares = [num ** 2 for num in my_nums]\nmy_squares\n\n\n[16, 25, 36, 49]\n\n\n\nCan also filter the elements of the list with if:\n\n\n\nCode\nmy_odd_squares = [num ** 2 for num in my_nums if num % 2 == 1]\nmy_odd_squares\n\n\n[25, 49]"
  },
  {
    "objectID": "w03/index.html#sets",
    "href": "w03/index.html#sets",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "Sets",
    "text": "Sets\n\n\n\nExtremely helpful + efficient for finding unique elements:\n\n\n\nCode\nanimals_i_saw = ['bird','bird','fish','bird','cat','bird','lizard']\nprint(f\"Number of animals I saw: {len(animals_i_saw)}\")\n\n\nNumber of animals I saw: 7\n\n\n\n\nCode\nunique_animals_me = set(animals_i_saw)\nprint(f\"Set of unique animals: {unique_animals_me}\")\nprint(f\"Number of unique animals: {len(unique_animals_me)}\")\n\n\nSet of unique animals: {'fish', 'cat', 'bird', 'lizard'}\nNumber of unique animals: 4\n\n\n\n\nSupports all set operators from math:\n\n\n\nCode\nanimals_you_saw = ['lizard','dog','bird','bird','bird']\nunique_animals_you = set(animals_you_saw)\nunique_animals_both = unique_animals_me.intersection(unique_animals_you)\nprint(f\"Animals we both saw: {unique_animals_both}\")\n\n\nAnimals we both saw: {'bird', 'lizard'}\n\n\n\n\nCode\nunique_animals_either = unique_animals_me.union(unique_animals_you)\nprint(f\"Animals either of us saw: {unique_animals_either}\")\n\n\nAnimals either of us saw: {'fish', 'cat', 'dog', 'bird', 'lizard'}\n\n\n\n\nCode\nunique_animals_meonly = unique_animals_me - unique_animals_you\nprint(f\"Animals I saw that you didn't see: {unique_animals_meonly}\")\nunique_animals_youonly = unique_animals_you - unique_animals_me\nprint(f\"Animals you saw that I didn't see: {unique_animals_youonly}\")\n\n\nAnimals I saw that you didn't see: {'fish', 'cat'}\nAnimals you saw that I didn't see: {'dog'}"
  },
  {
    "objectID": "w03/index.html#maps-dictionaries",
    "href": "w03/index.html#maps-dictionaries",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "Maps / Dictionaries",
    "text": "Maps / Dictionaries\n\n\n\nWhile other language like Java have lots of fancy types of Map, Python has a single type, the dictionary:\n\n\n\nCode\ngtown_data = {\n  'name': 'Georgetown University',\n  'founded': 1789,\n  'coordinates': (38.9076, -77.0723),\n  'location': {\n    'city': 'Washington',\n    'state': 'DC', # &lt;__&lt;\n    'country': 'USA'\n  }\n}\nprint(gtown_data.keys())\nprint(gtown_data.values())\n\n\ndict_keys(['name', 'founded', 'coordinates', 'location'])\ndict_values(['Georgetown University', 1789, (38.9076, -77.0723), {'city': 'Washington', 'state': 'DC', 'country': 'USA'}])\n\n\n\n\nBe careful when looping! Default behavior is iteration over keys:\n\n\n\nCode\nfor k in gtown_data:\n  print(k)\n\n\nname\nfounded\ncoordinates\nlocation\n\n\n\nFor key-value pairs use .items():\n\n\n\nCode\nfor k, v in gtown_data.items():\n  print(k, v)\n\n\nname Georgetown University\nfounded 1789\ncoordinates (38.9076, -77.0723)\nlocation {'city': 'Washington', 'state': 'DC', 'country': 'USA'}"
  },
  {
    "objectID": "w03/index.html#looking-under-the-hood",
    "href": "w03/index.html#looking-under-the-hood",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "Looking Under the Hood",
    "text": "Looking Under the Hood\n\nWe want to understand these structures independently of the specifics of their implementation in Python, for now\nSo, let’s construct our own simplified versions of the basic structures"
  },
  {
    "objectID": "w03/index.html#tuples-1",
    "href": "w03/index.html#tuples-1",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "Tuples",
    "text": "Tuples\n\n\nCode\nclass MyTuple:\n  def __init__(self, thing1, thing2):\n    self.thing1 = thing1\n    self.thing2 = thing2\n\n  def __repr__(self):\n    return f\"({self.thing1}, {self.thing2})\"\n\n  def __str__(self):\n    return self.__repr__()\n\nt1 = MyTuple('a','b')\nt2 = MyTuple(111, 222)\nprint(t1, t2)\n\n\n(a, b) (111, 222)"
  },
  {
    "objectID": "w03/index.html#lists",
    "href": "w03/index.html#lists",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "Lists",
    "text": "Lists\n\n\n\nThe list itself just points to a root item:\n\n\n\nCode\nclass MyList:\n  def __init__(self):\n    self.root = None\n\n  def append(self, new_item):\n    if self.root is None:\n      self.root = MyListItem(new_item)\n    else:\n      self.root.append(new_item)\n\n  def __repr__(self):\n    return self.root.__repr__()\n\n\n\n\nAn item has contents, pointer to next item:\n\n\n\nCode\nclass MyListItem:\n  def __init__(self, content):\n    self.content = content\n    self.next = None\n\n  def append(self, new_item):\n    if self.next is None:\n      self.next = MyListItem(new_item)\n    else:\n      self.next.append(new_item)\n\n  def __repr__(self):\n    my_content = self.content\n    return my_content if self.next is None else f\"{my_content}, {self.next.__repr__()}\"\n\n\n\n\n\n\nCode\nusers = MyList()\nusers.append('Jeff')\nusers.append('Alma')\nusers.append('Bo')\nprint(users)\n\n\nJeff, Alma, Bo"
  },
  {
    "objectID": "w03/index.html#so-how-many-steps-are-required",
    "href": "w03/index.html#so-how-many-steps-are-required",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "So, How Many “Steps” Are Required…",
    "text": "So, How Many “Steps” Are Required…\n\nTo retrieve the first element in a MyTuple?\nTo retrieve the last element in a MyTuple?\nTo retrieve the first element in a MyList?\nTo retrieve the last element in a MyList?"
  },
  {
    "objectID": "w03/index.html#how-many-steps",
    "href": "w03/index.html#how-many-steps",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "How Many Steps?",
    "text": "How Many Steps?\n\n\n\nWith a MyTuple:\n\n\n\nCode\nt1.thing1\n\n\n'a'\n\n\n\n\\(\\implies\\) 1 step\n\n\n\nCode\nt1.thing2\n\n\n'b'\n\n\n\n\\(\\implies\\) 1 step\n\n\n\nWith a MyList:\n\n\n\nCode\nprint(users.root.content)\n\n\nJeff\n\n\n\n\\(\\implies\\) 1 step\n\n\n\nCode\ncurrent_node = users.root\nwhile current_node.next is not None:\n  current_node = current_node.next\nprint(current_node.content)\n\n\nBo\n\n\n\n\\(\\implies\\) (3 steps)\n…But why 3? How many steps if the list contained 5 elements? \\(N\\) elements?"
  },
  {
    "objectID": "w03/index.html#pairwise-concatenating-list-elements",
    "href": "w03/index.html#pairwise-concatenating-list-elements",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "Pairwise-Concatenating List Elements",
    "text": "Pairwise-Concatenating List Elements\n\nNow rather than just printing, let’s pairwise concatenate:\n\n\n\nCode\ncur_pointer1 = users.root\nwhile cur_pointer1 is not None:\n  cur_pointer2 = users.root\n  while cur_pointer2 is not None:\n    print(cur_pointer1.content + cur_pointer2.content)\n    cur_pointer2 = cur_pointer2.next\n  cur_pointer1 = cur_pointer1.next\n\n\nJeffJeff\nJeffAlma\nJeffBo\nAlmaJeff\nAlmaAlma\nAlmaBo\nBoJeff\nBoAlma\nBoBo\n\n\n\nHow many steps did this take? How about for a list with \\(5\\) elements? \\(N\\) elements?"
  },
  {
    "objectID": "w03/index.html#last-example-pairwise-concatenation-with-end-check",
    "href": "w03/index.html#last-example-pairwise-concatenation-with-end-check",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "Last Example: Pairwise-Concatenation with End Check",
    "text": "Last Example: Pairwise-Concatenation with End Check\n\n\nCode\nprinted_items = []\ncur_pointer1 = users.root\nwhile cur_pointer1 is not None:\n  cur_pointer2 = users.root\n  while cur_pointer2 is not None:\n    print(cur_pointer1.content + cur_pointer2.content)\n    printed_items.append(cur_pointer1.content)\n    printed_items.append(cur_pointer2.content)\n    cur_pointer2 = cur_pointer2.next\n  cur_pointer1 = cur_pointer1.next\ncheck_pointer = users.root\nwhile check_pointer is not None:\n  if check_pointer.content in printed_items:\n    print(f\"Phew. {check_pointer.content} printed at least once.\")\n  else:\n    print(f\"Oh no! {check_pointer.content} was never printed!!!\")\n  check_pointer = check_pointer.next\n\n\nJeffJeff\nJeffAlma\nJeffBo\nAlmaJeff\nAlmaAlma\nAlmaBo\nBoJeff\nBoAlma\nBoBo\nPhew. Jeff printed at least once.\nPhew. Alma printed at least once.\nPhew. Bo printed at least once."
  },
  {
    "objectID": "w03/index.html#generalizing",
    "href": "w03/index.html#generalizing",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "Generalizing",
    "text": "Generalizing\n\nAlgorithms are “efficient” relative to how their runtime scales as the objects grow larger and larger!\nTuple operations take 1 step no matter what\nFor lists, retrieving the first element takes 1 step no matter what, but retrieving the last element takes \\(n\\) steps!\nPairwise concatenation requires \\(n^2\\) steps!\nWe write the complexity of an algorithm as \\(O(f(n))\\), where \\(f(n)\\) is a “complexity class” representing how long it takes to run, in the limit, as \\(n \\rightarrow \\infty\\)"
  },
  {
    "objectID": "w03/index.html#the-complexity-of-our-examples",
    "href": "w03/index.html#the-complexity-of-our-examples",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "The Complexity of Our Examples",
    "text": "The Complexity of Our Examples\n\nTuple operations: \\(O(1)\\)\nRetrieving the first element of a list: \\(O(1)\\)\nRetrieving the last element of a list: \\(O(n)\\)\nPairwise concatenation: \\(O(n^2)\\)\nPairwise concatenation+check: \\(O(n^2 + n) = O(n^2) \\leftarrow !!!\\)\nCrucial to think asymptotically to wrap our heads around this!"
  },
  {
    "objectID": "w03/index.html#the-figure-you-should-make-in-your-brain-every-time",
    "href": "w03/index.html#the-figure-you-should-make-in-your-brain-every-time",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "The Figure You Should Make In Your Brain Every Time",
    "text": "The Figure You Should Make In Your Brain Every Time\n\n\nCode\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nn_vals = [np.power(10, k) for k in np.arange(1, 2.75, 0.25)]\nruntime_df = pd.DataFrame({'$n$': n_vals})\nruntime_df['$n^2 + 50n$'] = runtime_df['$n$'].apply(lambda x: np.power(x, 2) + 50*x)\nruntime_df['$n^2 + 10000$'] = runtime_df['$n$'].apply(lambda x: np.power(x, 2) + 10000)\nruntime_df['$O(n)$'] = runtime_df['$n$'].copy()\nruntime_df['$O(nlogn)$'] = runtime_df['$n$'].apply(lambda x: x * np.log(x))\nruntime_df['$O(n^2)$'] = runtime_df['$n$'].apply(lambda x: np.power(x, 2))\nruntime_df['$O(n^2logn)$'] = runtime_df['$n$'].apply(lambda x: np.power(x,2) * np.log(x))\nruntime_df['$O(n^3)$'] = runtime_df['$n$'].apply(lambda x: np.power(x, 3))\nruntime_df['$O(n^3logn)$'] = runtime_df['$n$'].apply(lambda x: np.power(x, 3) * np.log(x))\n# Get the max values, for labeling the ends of lines\nmax_vals = runtime_df.max().to_dict()\nplot_df = runtime_df.melt(id_vars=['$n$'])\n#print(plot_df)\nstyle_map = {col: '' if (col == '$n^2 + 50n$') or (col == '$n^2 + 10000$') else (2,1) for col in runtime_df.columns}\nfig, ax = plt.subplots(figsize=(11,5))\nsns.lineplot(plot_df, x='$n$', y='value', hue='variable', style='variable', dashes=style_map)\n#plt.xscale('log')\nplt.yscale('log')\n# extract the existing handles and labels\nh, l = ax.get_legend_handles_labels()\n# slice the appropriate section of l and h to include in the legend\nax.legend(h[0:2], l[0:2])\nfor label, val in max_vals.items():\n  if (label == '$n$') or (label == '$n^2 + 50n$') or (label == '$n^2 + 10000$'):\n    continue\n  if 'logn' in label:\n    label = label.replace('logn', r'\\log(n)')\n  ax.text(x = max_vals['$n$'] + 2, y = val, s=label, va='center')\n# Hide the right and top spines\nax.spines[['right', 'top']].set_visible(False)\nplt.show()\n\n\n\n\n\n\n\n\n\n\nTakeaway: As \\(n \\rightarrow \\infty\\), highest-degree terms dominate!"
  },
  {
    "objectID": "w03/index.html#constants-on-highest-degree-terms-also-go-away",
    "href": "w03/index.html#constants-on-highest-degree-terms-also-go-away",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "Constants On Highest-Degree Terms Also Go Away",
    "text": "Constants On Highest-Degree Terms Also Go Away\n\n(Though this is harder to see, without a log-log plot:)\n\n\n\nCode\nn_vals = [np.power(10, k) for k in np.arange(1, 6, 0.5)]\nrt_const_df = pd.DataFrame({'$n$': n_vals})\nrt_const_df['$20n^2$'] = rt_const_df['$n$'].apply(lambda x: 20*np.power(x,2))\nrt_const_df['$n^2$'] = rt_const_df['$n$'].apply(lambda x: np.power(x,2))\nrt_const_df['$n^2logn$'] = rt_const_df['$n$'].apply(lambda x: np.power(x,2) * np.power(np.log(x),2))\nrt_const_df['$n^3$'] = rt_const_df['$n$'].apply(lambda x: np.power(x,3))\n# Get the max values, for labeling the ends of lines\nmax_vals = rt_const_df.max().to_dict()\nplot_df_const = rt_const_df.melt(id_vars=['$n$'])\nstyle_map = {col: '' if (col == '$20n^2$') else (2,1) for col in rt_const_df.columns}\nfig_const, ax_const = plt.subplots(figsize=(11,5))\nsns.lineplot(plot_df_const, x='$n$', y='value', hue='variable', style='variable', dashes=style_map)\nplt.xscale('log')\nplt.yscale('log')\n# extract the existing handles and labels\nh_const, l_const = ax_const.get_legend_handles_labels()\n# slice the appropriate section of l and h to include in the legend\nax_const.legend(h_const[0:1], l_const[0:1])\nfor label, val in max_vals.items():\n  if (label == '$n$') or (label == '$20n^2$'):\n    continue\n  if 'logn' in label:\n    label = label.replace('logn', r'\\log(n)')\n  ax_const.text(x = max_vals['$n$'] + 10**4, y = val, s=label, va='center')\n# Hide the right and top spines\nax_const.spines[['right', 'top']].set_visible(False)\nplt.show()"
  },
  {
    "objectID": "w03/index.html#formalizing-big-o-notation",
    "href": "w03/index.html#formalizing-big-o-notation",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "Formalizing Big-O Notation",
    "text": "Formalizing Big-O Notation\n\nLet \\(f, g: \\mathbb{N} \\rightarrow \\mathbb{N}\\). Then we write \\(f(n) = O(g(n))\\) when there exists a threshold \\(n_0 &gt; 0\\) and a constant \\(K &gt; 0\\) such that \\[\n\\forall n \\geq n_0 \\left[ f(n) \\leq K\\cdot g(n) \\right]\n\\]\nIn words: beyond a certain point \\(n_0\\), \\(f(n)\\) is bounded above by \\(K\\cdot g(n)\\).\nDefinition from Savage (1998, pg. 13)"
  },
  {
    "objectID": "w03/index.html#intuition-rightarrow-proof",
    "href": "w03/index.html#intuition-rightarrow-proof",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "Intuition \\(\\rightarrow\\) Proof",
    "text": "Intuition \\(\\rightarrow\\) Proof\n\nUsing this definition, we can now prove \\(f(n) = n^2 + 50n = O(n^2)\\)!\nHere \\(f(n) = n^2 + 50n\\), \\(g(n) = n^2\\)\nTheorem: \\(\\exists \\; n_0 \\; \\text{ s.t. } \\forall n \\geq n_0 \\left[ n^2 + 50n \\leq Kn^2 \\right]\\)\nProof: Let \\(K = 50\\). Then \\[\n\\begin{align*}\n&n^2 + 50n \\leq 50n^2 \\iff n + 50 \\leq 50n \\\\\n&\\iff 49n \\geq 50 \\iff n \\geq \\frac{50}{49}.\n\\end{align*}\n\\]\nSo if we choose \\(n_0 = 2\\), the chain of statements holds. \\(\\blacksquare\\)"
  },
  {
    "objectID": "w03/index.html#references",
    "href": "w03/index.html#references",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "References",
    "text": "References\n\n\nSavage, John E. 1998. Models of Computation: Exploring the Power of Computing. Addison-Wesley."
  },
  {
    "objectID": "w04/index.html",
    "href": "w04/index.html",
    "title": "Week 4: Heaps, Stacks, Trees, Graphs",
    "section": "",
    "text": "Open slides in new window →"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "DSAN 5500: Data Structures, Objects, and Algorithms in Python",
    "section": "",
    "text": "Welcome to the homepage for DSAN 5500: Data Structures, Objects, and Algorithms in Python, Spring 2024, at Georgetown University! The course takes place on Mondays from 12:30 to 3:00pm in Car Barn Room 204. More details are provided on the syllabus.\n\n\n\n\n\n\n\n\n\n\nTitle\n\n\nDate\n\n\n\n\n\n\nWeek 1: Python Fundamentals\n\n\nJanuary 10\n\n\n\n\nWeek 2: Software Design Patterns and Object-Oriented Programming\n\n\nJanuary 22\n\n\n\n\nWeek 3: Data Structures and Computational Complexity\n\n\nJanuary 29\n\n\n\n\nWeek 4: Heaps, Stacks, Trees, Graphs\n\n\nJanuary 10\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "syllabus.html",
    "href": "syllabus.html",
    "title": "Syllabus",
    "section": "",
    "text": "Welcome to DSAN 5500: Data Structures, Objects, and Algorithms in Python! The course meets on Mondays from 12:30pm to 3:00pm in Car Barn Room 204."
  },
  {
    "objectID": "syllabus.html#course-staff",
    "href": "syllabus.html#course-staff",
    "title": "Syllabus",
    "section": "Course Staff",
    "text": "Course Staff\n\nProf. Jeff Jacobs, jj1088@georgetown.edu\n\nOffice hours (Click to reserve): Monday, Tuesday 3:30-6pm, held in Car Barn Room 207-04A\n\nTA Yihan Bian, yb214@georgetown.edu\nTA Binhui Chen, bc928@georgetown.edu\nTA Brian Kwon, sk2338@georgetown.edu"
  },
  {
    "objectID": "syllabus.html#course-overview",
    "href": "syllabus.html#course-overview",
    "title": "Syllabus",
    "section": "Course Overview",
    "text": "Course Overview\nMy goal, in creating the course, is to take the general, language-agnostic data science concepts you’ve learned in (e.g.) DSAN 5000 and work through how to implement these concepts efficiently in Python, where we can define “efficient” in different ways based on different goals that we may have in different settings while working as Data Scientists.\nThe graded components for the course consist of five homework assignments, an in-class midterm, and a final project. Grades will be allocated as follows:\n\n\n\nCategory\nPercent of Final Grade\n\n\n\n\nIn-Class Midterm\n30%\n\n\nFinal Project\n30%\n\n\nHomeworks\n40%\n\n\nHW1: Python Fundamentals\n8%\n\n\nHW2: Data Structures\n8%\n\n\nHW3: Basic Algorithms\n8%\n\n\nHW4: Advanced Algorithms\n8%\n\n\nHW5: Parallel Computing\n8%\n\n\n\nThe course does not have any “official” prerequisites, but a general comfort with Python is strongly recommended. If you have never used Python before, however (or if you haven’t used it in a while and feel like your skills are rusty), you can browse the materials on the Resources page!"
  },
  {
    "objectID": "syllabus.html#course-topics-calendar",
    "href": "syllabus.html#course-topics-calendar",
    "title": "Syllabus",
    "section": "Course Topics / Calendar",
    "text": "Course Topics / Calendar\nThe following is a rough map of what we will work through together throughout the semester; given that everyone learns at a different pace, my aim is to leave us with a good amount of flexibility in terms of how much time we spend on each topic: if I find that it takes me longer than a week to convey a certain topic in sufficient depth, for example, then I view it as a strength rather than a weakness of the course that we can then rearrange the calendar below by adding an extra week on that particular topic! Similarly, if it seems like I am spending too much time on a topic, to the point that students seem bored or impatient to move onto the next topic, we can move a topic intended for the next week to the current week!\n\n\n\nUnit\nWeek\nDate\nTopic\n\n\n\n\nUnit 1: Python Fundamentals\n1\nJan 10 (Wednesday)\nPython Fundamentals\n\n\n\n\nJan 15\nNo Class (Martin Luther King, Jr. Day)\n\n\n\n2\nJan 22\nSoftware Design Patterns and Object-Oriented Programming (OOP)\n\n\n\n\nJan 26 (Friday), 11:59pm EST\nHW1 (Python Fundamentals) Due\n\n\nUnit 2: Data Structures\n3\nJan 29\nData Structures and Computational Complexity\n\n\n\n4\nFeb 5\nHeaps, Stacks, Trees, Graphs\n\n\n\n\nFeb 9 (Friday), 11:59pm EST\nHW2 (Data Structures) Due\n\n\nUnit 3: Basic Algorithms\n5\nFeb 12\nSearch Trees\n\n\n\n6\nFeb 20 (Tuesday)\nSorting Algorithms\n\n\n\n\nFeb 23 (Friday), 11:59pm EST\nHW3 (Basic Algorithms) Due\n\n\nMidterm\n7\nFeb 26\nIn-Class Midterm\n\n\n\n\nMar 4\nNo Class (Spring Break)\n\n\nUnit 4: Advanced Algorithms\n8\nMar 11\nGraph Algorithms\n\n\n\n9\nMar 18\nAlgorithms for Spatial Data\n\n\n\n10\nMar 25\nBuilding Efficient Data Pipelines\n\n\n\n\nMar 27 (Wednesday), 11:59pm EST\nHW4 (Advanced Algorithms) Due\n\n\n\n\nApr 1\nNo Class (Easter Break)\n\n\nUnit 5: Parallel Computing\n11\nApr 8\nParallel Computing and MapReduce\n\n\n\n12\nApr 15\nParallel Computing Part 2\n\n\n\n\nApr 19 (Friday), 11:59pm EST\nHW5 (Parallel Computing) Due\n\n\nUnit 6: Advanced Topics and Applications\n13\nApr 22\nApplications in Bioinformatics\n\n\n\n14\nApr 29\nApplications in NLP"
  },
  {
    "objectID": "syllabus.html#assignment-distribution-submission-and-grading",
    "href": "syllabus.html#assignment-distribution-submission-and-grading",
    "title": "Syllabus",
    "section": "Assignment Distribution, Submission, and Grading",
    "text": "Assignment Distribution, Submission, and Grading\nThe programming assignments for the course will be managed through Google Classroom. This means that, to work on and submit the assignments, you will use the following workflow:\n\nOpen the .ipynb file for the assignment from within Google Classroom\nWork on the problems within the file, saving your progress early and often! You can try things out or create drafts of your solutions however you’d like (for example, in VSCode or JupyterLab or any other IDE), but your final submission for each assignment must be submitted through the Google Classroom interface!\nSubmit the completed version of the assignment by clicking the blue “Hand in” button on the assignment page.\n\nThe interface allows you to unsubmit and continue working on an assignment, for example if you find a mistake, but be careful and make sure you resubmit once you’ve fixed the mistake, since submissions will not be accepted after the grace period for late submission has ended."
  },
  {
    "objectID": "syllabus.html#final-letter-grade-determination",
    "href": "syllabus.html#final-letter-grade-determination",
    "title": "Syllabus",
    "section": "Final Letter Grade Determination",
    "text": "Final Letter Grade Determination\nOnce all assignments have been graded, we will compute your final numeric grade according to the above weighting, rounded to two decimal places. The letter grade that we report to Georgetown on the basis of this numeric grade will then follow the DSAN letter grade policy as follows, where the start and end points for each range are inclusive:\n\n\n\nRange Start\nRange End\nLetter Grade\n\n\n\n\n92.50\n100.00\nA\n\n\n89.50\n92.49\nA-\n\n\n87.99\n89.49\nB+\n\n\n81.50\n87.98\nB\n\n\n79.50\n81.49\nB-\n\n\n69.50\n79.49\nC\n\n\n59.50\n69.49\nD\n\n\n0.00\n59.49\nF"
  },
  {
    "objectID": "syllabus.html#official-course-description",
    "href": "syllabus.html#official-course-description",
    "title": "Syllabus",
    "section": "Official Course Description",
    "text": "Official Course Description\nThe Data Structures, Objects, and Algorithms in Python course will look at built-in data structures, such as dictionaries, lists, tuples, sets, strings, and frozen sets. The course will also cover objects and classes in Python, as well as building new structures and objects. The class will cover algorithms including runtime, recurrence, and development. Applications will include data science problems. Prerequisite: A working or intermediate knowledge of Python. 3 credits."
  },
  {
    "objectID": "syllabus.html#title-ixsexual-misconduct-statement",
    "href": "syllabus.html#title-ixsexual-misconduct-statement",
    "title": "Syllabus",
    "section": "Title IX/Sexual Misconduct Statement",
    "text": "Title IX/Sexual Misconduct Statement\nGeorgetown University and its faculty are committed to supporting survivors and those impacted by sexual misconduct, which includes sexual assault, sexual harassment, relationship violence, and stalking. Georgetown requires faculty members, unless otherwise designated as confidential, to report all disclosures of sexual misconduct to the University Title IX Coordinator or a Deputy Title IX Coordinator.\nIf you disclose an incident of sexual misconduct to a professor in or outside of the classroom (with the exception of disclosures in papers), that faculty member must report the incident to the Title IX Coordinator, or Deputy Title IX Coordinator. The coordinator will, in turn, reach out to the student to provide support, resources, and the option to meet. [Please note that the student is not required to meet with the Title IX coordinator.]. More information about reporting options and resources can be found in the Sexual Misconduct Resource Center.\nIf you would prefer to speak to someone confidentially, Georgetown has a number of fully confidential professional resources that can provide support and assistance. These resources include:\n\nHealth Education Services for Sexual Assault Response and Prevention: Confidential email sarp@georgetown.edu\nCounseling and Psychiatric Services (CAPS): 202-687-6985\n\nAfter hours you can call 833-960-3006 to reach Fonemed, a telehealth service, and ask for the on-call CAPS clinician"
  },
  {
    "objectID": "syllabus.html#gsas-resources-and-policies-for-students",
    "href": "syllabus.html#gsas-resources-and-policies-for-students",
    "title": "Syllabus",
    "section": "GSAS Resources and Policies for Students",
    "text": "GSAS Resources and Policies for Students\nYou can find a collection of relevant resources and policies for students on the GSAS website, and the Provost’s policy on accommodating students’ religious observances on the Campus Ministry website.\nYou can also make use of the Student Academic Resource Center. In particular, within the Resource Center there is a link to Georgetown’s Disability Support page. If you believe you have a disability, you can contact the Academic Resource Center (arc@georgetown.edu) for further information. The ARC is located in the Leavey Center, Suite 335 (202-687-8354), and it is the campus office responsible for reviewing documentation provided by students with disabilities and for determining reasonable accommodations in accordance with the Americans with Disabilities Act (ADA) and University policies."
  }
]