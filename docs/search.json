[
  {
    "objectID": "resources.html",
    "href": "resources.html",
    "title": "Resources",
    "section": "",
    "text": "Note\n\n\n\nYou are viewing a draft version of the DSAN 5500 webpage for Spring 2024 – materials here are subject to change, before being finalized at the start of the Spring 2024 semester!"
  },
  {
    "objectID": "resources.html#textbooks",
    "href": "resources.html#textbooks",
    "title": "Resources",
    "section": "Textbooks",
    "text": "Textbooks\nFor those looking to get a head start on the course material, you can look over the following two textbooks, which cover the course topics in the same general order that we will cover them (although with very different approaches: the target audience for these tends to be software engineers, who have slightly different needs from us data scientists!)\n\nGoodrich, Michael T., Roberto Tamassia, and Michael H. Goldwasser. 2013. Data Structures and Algorithms in Python. [PDF] [EPUB]\nLee, Kent D., and Steve Hubbard. 2015. Data Structures and Algorithms with Python. [PDF] [EPUB]"
  },
  {
    "objectID": "resources.html#online-resources",
    "href": "resources.html#online-resources",
    "title": "Resources",
    "section": "Online Resources",
    "text": "Online Resources\nIn terms of resources specifically aimed at data scientists, Datacamp has the following sequence of Python-based courses:\n\nIntroduction to Python for Data Science\nPython Data Science Toolbox (Part 1)\nPython Data Science Toolbox (Part 2)\nObject-Oriented Programming in Python"
  },
  {
    "objectID": "w01/slides.html#developing-a-comparative-understanding",
    "href": "w01/slides.html#developing-a-comparative-understanding",
    "title": "Week 1: Coding in General and Python Specifically",
    "section": "Developing a Comparative Understanding",
    "text": "Developing a Comparative Understanding\n\n\n\n\n\n\n“We hardly know ourselves, if we know nobody else”\n\n\n–(Blue Scholars, “Sagaba”)\n\n\n\n\n\n\nThe course focuses on Python, but part of understanding Python is understanding how Python does things differently from other languages!\nJust as C was “overtaken” by Java, then Java was “overtaken” by Python, Python will someday be overtaken"
  },
  {
    "objectID": "w01/slides.html#the-numbers",
    "href": "w01/slides.html#the-numbers",
    "title": "Week 1: Coding in General and Python Specifically",
    "section": "The Numbers",
    "text": "The Numbers\n\n\nCode\nimport pandas as pd\nimport numpy as np\nimport plotly.express as px\nimport plotly.io as pio\npio.renderers.default = \"notebook\"\nlang_df = pd.read_csv(\"assets/gh_issues.csv\")\n# The data for 2022 is essentially useless\nlang_df = lang_df[lang_df['year'] &lt;= 2021].copy()\nlang_df['time'] = lang_df['year'].astype(str) + \"_\" + lang_df['quarter'].astype(str)\nlang_df['prop'] = lang_df['count'] / lang_df.groupby('time')['count'].transform('sum')\nlang_df.head()\n#sns.lineplot(data=lang_df, x='year', y='count', color='name')\n# Keep only most popular languages\nkeep_langs = ['Python','JavaScript','C','C++','C#','Java','Ruby']\npop_df = lang_df[lang_df['name'].isin(keep_langs)].copy()\nfig = px.line(pop_df,\n  x='time', y='prop', color='name',\n  template='simple_white', title='Programming Language Popularity Since 2012',\n  labels = {\n    'time': 'Year',\n    'prop': 'Proportion of GitHub Issues'\n  }\n)\nfig.update_layout(\n  xaxis = dict(\n    tickmode = 'array',\n    tickvals = [f\"{year}_1\" for year in range(2012,2022)],\n    ticktext = [f\"{year}\" for year in range(2012,2022)]\n  )\n)\nfig.show()"
  },
  {
    "objectID": "w01/slides.html#avoid-analysis-paralysis",
    "href": "w01/slides.html#avoid-analysis-paralysis",
    "title": "Week 1: Coding in General and Python Specifically",
    "section": "Avoid Analysis Paralysis",
    "text": "Avoid Analysis Paralysis\n\n(Easier said than done, admittedly…)\n\n\nImage source: XKCD"
  },
  {
    "objectID": "w01/slides.html#tie-yourself-to-the-mast",
    "href": "w01/slides.html#tie-yourself-to-the-mast",
    "title": "Week 1: Coding in General and Python Specifically",
    "section": "Tie Yourself to the Mast",
    "text": "Tie Yourself to the Mast\n\nThe 3am, exhausted, brain-barely-working version of you will thank present you for writing useful exceptions and type hints!\n\n\nJohn William Waterhouse, Public domain, via Wikimedia Commons"
  },
  {
    "objectID": "w01/slides.html#types-of-languages",
    "href": "w01/slides.html#types-of-languages",
    "title": "Week 1: Coding in General and Python Specifically",
    "section": "Types of Languages",
    "text": "Types of Languages\n\nCompiled\nInterpreted"
  },
  {
    "objectID": "w01/slides.html#primitive-types",
    "href": "w01/slides.html#primitive-types",
    "title": "Week 1: Coding in General and Python Specifically",
    "section": "Primitive Types",
    "text": "Primitive Types\n\nBoolean (True or False)\nNumbers (Integers, Decimals)\nStrings\nNone"
  },
  {
    "objectID": "w01/slides.html#stacks-and-heaps",
    "href": "w01/slides.html#stacks-and-heaps",
    "title": "Week 1: Coding in General and Python Specifically",
    "section": "Stacks and Heaps",
    "text": "Stacks and Heaps\nLet’s look at what happens, in the computer’s memory, when we run the following code:\n\n\n\n\nCode\nimport datetime\nimport pandas as pd\ncountry_df = pd.read_csv(\"assets/country_pop.csv\")\npop_col = country_df['pop']\nnum_rows = len(country_df)\nfilled = all(~pd.isna(country_df))\nalg_row = country_df.loc[country_df['name'] == \"Algeria\"]\nnum_cols = len(country_df.columns)\nusername = \"Jeff\"\ncur_date = datetime.datetime.now()\ni = 0\nj = None\nz = 314\ncountry_df\n\n\n\n\n\n\n\n\n\nname\npop\n\n\n\n\n0\nAlbania\n2.8\n\n\n1\nAlgeria\n44.2\n\n\n2\nAngola\n34.5"
  },
  {
    "objectID": "w01/slides.html#sanity-preserving-tip",
    "href": "w01/slides.html#sanity-preserving-tip",
    "title": "Week 1: Coding in General and Python Specifically",
    "section": "#1 Sanity-Preserving Tip!",
    "text": "#1 Sanity-Preserving Tip!\n\n(For our purposes) the answer to “what is Python?” is: an executable file that runs .py files!\n\ne.g., we can run python mycode.py in Terminal/PowerShell\n\nEverything else: pip, Jupyter, Pandas, etc., is an add-on to this basic functionality!"
  },
  {
    "objectID": "w01/slides.html#code-blocks-via-indentation",
    "href": "w01/slides.html#code-blocks-via-indentation",
    "title": "Week 1: Coding in General and Python Specifically",
    "section": "Code Blocks via Indentation",
    "text": "Code Blocks via Indentation\n\n\nCode\nfor i in range(5):\n    print(i)\n\n\n0\n1\n2\n3\n4\n\n\n\n\nCode\nfor i in range(5):\nprint(i)\n\n\nIndentationError: expected an indented block after 'for' statement on line 1 (3695896917.py, line 2)"
  },
  {
    "objectID": "w01/slides.html#type-hints",
    "href": "w01/slides.html#type-hints",
    "title": "Week 1: Coding in General and Python Specifically",
    "section": "Type Hints",
    "text": "Type Hints\n\nNot a “standard” Python feature, not enforced by the Python interpreter, but can help you maintain sanity!\n\n\n\n\n\nCode\ndef multiply(thing1, thing2):\n  return thing1 * thing2\nprint(multiply(5, 3))\nprint(multiply(\"fiveee\", 3))\n\n\n15\nfiveeefiveeefiveee\n\n\n\n\n\nCode\nfrom numbers import Number\ndef multiply(thing1: Number, thing2: Number) -&gt; Number:\n  return thing1 * thing2\nprint(multiply(5, 3))\nprint(multiply(\"fiveee\", 3))\n\n\n15\nfiveeefiveeefiveee\n\n\n\n\n\n\nCode\nfrom mypy import api\nresult = api.run(['-c',_i])\nprint(result[0])\n\n\n&lt;string&gt;:3: error: Unsupported left operand type for * (\"Number\")  [operator]\n&lt;string&gt;:4: error: Argument 1 to \"multiply\" has incompatible type \"int\"; expected \"Number\"  [arg-type]\n&lt;string&gt;:4: note: Types from \"numbers\" aren't supported for static type checking\n&lt;string&gt;:4: note: See https://peps.python.org/pep-0484/#the-numeric-tower\n&lt;string&gt;:4: note: Consider using a protocol instead, such as typing.SupportsFloat\n&lt;string&gt;:4: error: Argument 2 to \"multiply\" has incompatible type \"int\"; expected \"Number\"  [arg-type]\n&lt;string&gt;:5: error: Argument 1 to \"multiply\" has incompatible type \"str\"; expected \"Number\"  [arg-type]\n&lt;string&gt;:5: note: Types from \"numbers\" aren't supported for static type checking\n&lt;string&gt;:5: note: See https://peps.python.org/pep-0484/#the-numeric-tower\n&lt;string&gt;:5: note: Consider using a protocol instead, such as typing.SupportsFloat\n&lt;string&gt;:5: error: Argument 2 to \"multiply\" has incompatible type \"int\"; expected \"Number\"  [arg-type]\nFound 5 errors in 1 file (checked 1 source file)\n\n\n\n\n\nDSAN 5500 W01: Coding and Python"
  },
  {
    "objectID": "w01/index.html",
    "href": "w01/index.html",
    "title": "Week 1: Coding in General and Python Specifically",
    "section": "",
    "text": "Open slides in new window →"
  },
  {
    "objectID": "w01/index.html#developing-a-comparative-understanding",
    "href": "w01/index.html#developing-a-comparative-understanding",
    "title": "Week 1: Coding in General and Python Specifically",
    "section": "Developing a Comparative Understanding",
    "text": "Developing a Comparative Understanding\n\n\n\n\n\n\n\n\n\n“We hardly know ourselves, if we know nobody else”\n\n\n–(Blue Scholars, “Sagaba”)\n\n\n\n\n\n\nThe course focuses on Python, but part of understanding Python is understanding how Python does things differently from other languages!\nJust as C was “overtaken” by Java, then Java was “overtaken” by Python, Python will someday be overtaken"
  },
  {
    "objectID": "w01/index.html#the-numbers",
    "href": "w01/index.html#the-numbers",
    "title": "Week 1: Coding in General and Python Specifically",
    "section": "The Numbers",
    "text": "The Numbers\n\n\nCode\nimport pandas as pd\nimport numpy as np\nimport plotly.express as px\nimport plotly.io as pio\npio.renderers.default = \"notebook\"\nlang_df = pd.read_csv(\"assets/gh_issues.csv\")\n# The data for 2022 is essentially useless\nlang_df = lang_df[lang_df['year'] &lt;= 2021].copy()\nlang_df['time'] = lang_df['year'].astype(str) + \"_\" + lang_df['quarter'].astype(str)\nlang_df['prop'] = lang_df['count'] / lang_df.groupby('time')['count'].transform('sum')\nlang_df.head()\n#sns.lineplot(data=lang_df, x='year', y='count', color='name')\n# Keep only most popular languages\nkeep_langs = ['Python','JavaScript','C','C++','C#','Java','Ruby']\npop_df = lang_df[lang_df['name'].isin(keep_langs)].copy()\nfig = px.line(pop_df,\n  x='time', y='prop', color='name',\n  template='simple_white', title='Programming Language Popularity Since 2012',\n  labels = {\n    'time': 'Year',\n    'prop': 'Proportion of GitHub Issues'\n  }\n)\nfig.update_layout(\n  xaxis = dict(\n    tickmode = 'array',\n    tickvals = [f\"{year}_1\" for year in range(2012,2022)],\n    ticktext = [f\"{year}\" for year in range(2012,2022)]\n  )\n)\nfig.show()"
  },
  {
    "objectID": "w01/index.html#avoid-analysis-paralysis",
    "href": "w01/index.html#avoid-analysis-paralysis",
    "title": "Week 1: Coding in General and Python Specifically",
    "section": "Avoid Analysis Paralysis",
    "text": "Avoid Analysis Paralysis\n\n(Easier said than done, admittedly…)\n\n\n\n\nImage source: XKCD"
  },
  {
    "objectID": "w01/index.html#tie-yourself-to-the-mast",
    "href": "w01/index.html#tie-yourself-to-the-mast",
    "title": "Week 1: Coding in General and Python Specifically",
    "section": "Tie Yourself to the Mast",
    "text": "Tie Yourself to the Mast\n\nThe 3am, exhausted, brain-barely-working version of you will thank present you for writing useful exceptions and type hints!\n\n\n\n\nJohn William Waterhouse, Public domain, via Wikimedia Commons"
  },
  {
    "objectID": "w01/index.html#types-of-languages",
    "href": "w01/index.html#types-of-languages",
    "title": "Week 1: Coding in General and Python Specifically",
    "section": "Types of Languages",
    "text": "Types of Languages\n\nCompiled\nInterpreted"
  },
  {
    "objectID": "w01/index.html#primitive-types",
    "href": "w01/index.html#primitive-types",
    "title": "Week 1: Coding in General and Python Specifically",
    "section": "Primitive Types",
    "text": "Primitive Types\n\nBoolean (True or False)\nNumbers (Integers, Decimals)\nStrings\nNone"
  },
  {
    "objectID": "w01/index.html#stacks-and-heaps",
    "href": "w01/index.html#stacks-and-heaps",
    "title": "Week 1: Coding in General and Python Specifically",
    "section": "Stacks and Heaps",
    "text": "Stacks and Heaps\nLet’s look at what happens, in the computer’s memory, when we run the following code:\n\n\n\n\nCode\nimport datetime\nimport pandas as pd\ncountry_df = pd.read_csv(\"assets/country_pop.csv\")\npop_col = country_df['pop']\nnum_rows = len(country_df)\nfilled = all(~pd.isna(country_df))\nalg_row = country_df.loc[country_df['name'] == \"Algeria\"]\nnum_cols = len(country_df.columns)\nusername = \"Jeff\"\ncur_date = datetime.datetime.now()\ni = 0\nj = None\nz = 314\ncountry_df\n\n\n\n\n\n\n\n\n\nname\npop\n\n\n\n\n0\nAlbania\n2.8\n\n\n1\nAlgeria\n44.2\n\n\n2\nAngola\n34.5"
  },
  {
    "objectID": "w01/index.html#sanity-preserving-tip",
    "href": "w01/index.html#sanity-preserving-tip",
    "title": "Week 1: Coding in General and Python Specifically",
    "section": "#1 Sanity-Preserving Tip!",
    "text": "#1 Sanity-Preserving Tip!\n\n(For our purposes) the answer to “what is Python?” is: an executable file that runs .py files!\n\ne.g., we can run python mycode.py in Terminal/PowerShell\n\nEverything else: pip, Jupyter, Pandas, etc., is an add-on to this basic functionality!"
  },
  {
    "objectID": "w01/index.html#code-blocks-via-indentation",
    "href": "w01/index.html#code-blocks-via-indentation",
    "title": "Week 1: Coding in General and Python Specifically",
    "section": "Code Blocks via Indentation",
    "text": "Code Blocks via Indentation\n\n\nCode\nfor i in range(5):\n    print(i)\n\n\n0\n1\n2\n3\n4\n\n\n\n\nCode\nfor i in range(5):\nprint(i)\n\n\nIndentationError: expected an indented block after 'for' statement on line 1 (3695896917.py, line 2)"
  },
  {
    "objectID": "w01/index.html#type-hints",
    "href": "w01/index.html#type-hints",
    "title": "Week 1: Coding in General and Python Specifically",
    "section": "Type Hints",
    "text": "Type Hints\n\nNot a “standard” Python feature, not enforced by the Python interpreter, but can help you maintain sanity!\n\n\n\n\n\nCode\ndef multiply(thing1, thing2):\n  return thing1 * thing2\nprint(multiply(5, 3))\nprint(multiply(\"fiveee\", 3))\n\n\n15\nfiveeefiveeefiveee\n\n\n\n\n\nCode\nfrom numbers import Number\ndef multiply(thing1: Number, thing2: Number) -&gt; Number:\n  return thing1 * thing2\nprint(multiply(5, 3))\nprint(multiply(\"fiveee\", 3))\n\n\n15\nfiveeefiveeefiveee\n\n\n\n\n\n\nCode\nfrom mypy import api\nresult = api.run(['-c',_i])\nprint(result[0])\n\n\n&lt;string&gt;:3: error: Unsupported left operand type for * (\"Number\")  [operator]\n&lt;string&gt;:4: error: Argument 1 to \"multiply\" has incompatible type \"int\"; expected \"Number\"  [arg-type]\n&lt;string&gt;:4: note: Types from \"numbers\" aren't supported for static type checking\n&lt;string&gt;:4: note: See https://peps.python.org/pep-0484/#the-numeric-tower\n&lt;string&gt;:4: note: Consider using a protocol instead, such as typing.SupportsFloat\n&lt;string&gt;:4: error: Argument 2 to \"multiply\" has incompatible type \"int\"; expected \"Number\"  [arg-type]\n&lt;string&gt;:5: error: Argument 1 to \"multiply\" has incompatible type \"str\"; expected \"Number\"  [arg-type]\n&lt;string&gt;:5: note: Types from \"numbers\" aren't supported for static type checking\n&lt;string&gt;:5: note: See https://peps.python.org/pep-0484/#the-numeric-tower\n&lt;string&gt;:5: note: Consider using a protocol instead, such as typing.SupportsFloat\n&lt;string&gt;:5: error: Argument 2 to \"multiply\" has incompatible type \"int\"; expected \"Number\"  [arg-type]\nFound 5 errors in 1 file (checked 1 source file)"
  },
  {
    "objectID": "w02/slides.html#creating-classes",
    "href": "w02/slides.html#creating-classes",
    "title": "Week 2: Software Design Patterns and Object-Oriented Programming",
    "section": "Creating Classes",
    "text": "Creating Classes\n\nUse case: Creating an inventory system for a Bookstore\n\n\n\n\n\nCode\nclass Bookstore:\n    def __init__(self, name, location):\n        self.name = name\n        self.location = location\n        self.books = []\n\n    def __getitem__(self, index):\n        return self.books[index]\n\n    def __repr__(self):\n        return self.__str__()\n\n    def __str__(self):\n        return f\"Bookstore[{self.get_num_books()} books]\"\n\n    def add_books(self, book_list):\n        self.books.extend(book_list)\n\n    def get_books(self):\n        return self.books\n\n    def get_inventory(self):\n        book_lines = []\n        for book_index, book in enumerate(self.get_books()):\n            cur_book_line = f\"{book_index}. {str(book)}\"\n            book_lines.append(cur_book_line)\n        return \"\\n\".join(book_lines)\n\n    def get_num_books(self):\n        return len(self.get_books())\n\n    def sort_books(self, sort_key):\n        self.books.sort(key=sort_key)\n\nclass Book:\n    def __init__(self, title, authors, num_pages):\n        self.title = title\n        self.authors = authors\n        self.num_pages = num_pages\n\n    def __str__(self):\n        return f\"Book[title={self.get_title()}, authors={self.get_authors()}, pages={self.get_num_pages()}]\"\n\n    def get_authors(self):\n        return self.authors\n\n    def get_first_author(self):\n        return self.authors[0]\n\n    def get_num_pages(self):\n        return self.num_pages\n\n    def get_title(self):\n        return self.title\n\nclass Person:\n    def __init__(self, family_name, given_name):\n        self.family_name = family_name\n        self.given_name = given_name\n\n    def __repr__(self):\n        return self.__str__()\n\n    def __str__(self):\n        return f\"Person[{self.get_family_name()}, {self.get_given_name()}]\"\n\n    def get_family_name(self):\n        return self.family_name\n\n    def get_given_name(self):\n        return self.given_name\n\n\n\n\n\nCode\nmy_bookstore = Bookstore(\"Bookland\", \"Washington, DC\")\nplath = Person(\"Plath\", \"Sylvia\")\nbell_jar = Book(\"The Bell Jar\", [plath], 244)\nmarx = Person(\"Marx\", \"Karl\")\nengels = Person(\"Engels\", \"Friedrich\")\nmanifesto = Book(\"The Communist Manifesto\", [marx, engels], 43)\nelster = Person(\"Elster\", \"Jon\")\ncement = Book(\"The Cement of Society\", [elster], 311)\nmy_bookstore.add_books([bell_jar, manifesto, cement])\nprint(my_bookstore)\nprint(my_bookstore[0])\nprint(\"Inventory:\")\nprint(my_bookstore.get_inventory())\n\n\nBookstore[3 books]\nBook[title=The Bell Jar, authors=[Person[Plath, Sylvia]], pages=244]\nInventory:\n0. Book[title=The Bell Jar, authors=[Person[Plath, Sylvia]], pages=244]\n1. Book[title=The Communist Manifesto, authors=[Person[Marx, Karl], Person[Engels, Friedrich]], pages=43]\n2. Book[title=The Cement of Society, authors=[Person[Elster, Jon]], pages=311]"
  },
  {
    "objectID": "w02/slides.html#doing-things-with-classes",
    "href": "w02/slides.html#doing-things-with-classes",
    "title": "Week 2: Software Design Patterns and Object-Oriented Programming",
    "section": "Doing Things With Classes",
    "text": "Doing Things With Classes\n\nNow we can use our OOP structure, for example to sort the inventory in different ways!\n\n\n\n\nAlphabetical (By First Author)\n\n\n\nCode\nsort_alpha = lambda x: x.get_first_author().get_family_name()\nmy_bookstore.sort_books(sort_key = sort_alpha)\nprint(my_bookstore.get_inventory())\n\n\n0. Book[title=The Cement of Society, authors=[Person[Elster, Jon]], pages=311]\n1. Book[title=The Communist Manifesto, authors=[Person[Marx, Karl], Person[Engels, Friedrich]], pages=43]\n2. Book[title=The Bell Jar, authors=[Person[Plath, Sylvia]], pages=244]\n\n\n\n\nBy Page Count\n\n\n\nCode\nsort_pages = lambda x: x.get_num_pages()\nmy_bookstore.sort_books(sort_key = sort_pages)\nprint(my_bookstore.get_inventory())\n\n\n0. Book[title=The Communist Manifesto, authors=[Person[Marx, Karl], Person[Engels, Friedrich]], pages=43]\n1. Book[title=The Bell Jar, authors=[Person[Plath, Sylvia]], pages=244]\n2. Book[title=The Cement of Society, authors=[Person[Elster, Jon]], pages=311]"
  },
  {
    "objectID": "w02/slides.html#in-pictures",
    "href": "w02/slides.html#in-pictures",
    "title": "Week 2: Software Design Patterns and Object-Oriented Programming",
    "section": "In Pictures",
    "text": "In Pictures\n\n\n\n\n\n\n\nG\n\n Bookstore Relational Diagram  \n\nBookstore\n\n Bookstore  Name  Location  Booklist  Get_Inventory()  Sort_Inventory()   \n\nPlace\n\n Place  City  State  Country  Print_Map()   \n\nBookstore:loc-&gt;Place:placehead\n\n  Has One   \n\nBook\n\n Book  Title  Authors  Num Pages  Preview()   \n\nBookstore:bl-&gt;Book:bookhead\n\n  Has Multiple   \n\nPerson\n\n Person  Family Name  Given Name   \n\nBook:auths-&gt;Person:personhead\n\n  Has Multiple"
  },
  {
    "objectID": "w02/slides.html#design-choices",
    "href": "w02/slides.html#design-choices",
    "title": "Week 2: Software Design Patterns and Object-Oriented Programming",
    "section": "Design Choices",
    "text": "Design Choices\n\nThe goal is to encapsulate as best as possible: which objects should have which properties, and which methods?\nExample: Fiction vs. Non-Fiction. How important is this distinction for your use case?\n\n\n\n\nOption 1: As Property of Book\n\n\n\nCode\nfrom enum import Enum\nclass BookType(Enum):\n    NONFICTION = 0\n    FICTION = 1\n\nclass Book:\n    def __init__(self, title: str, authors: list[Person], num_pages: int, type: BookType):\n        self.title = title\n        self.authors = authors\n        self.num_pages = num_pages\n        self.type = type\n\n    def __str__(self):\n        return f\"Book[title={self.title}, authors={self.authors}, pages={self.num_pages}, type={self.type}]\"\n\n\n\n\nCode\njoyce = Person(\"Joyce\", \"James\")\nulysses = Book(\"Ulysses\", [joyce], 732, BookType.FICTION)\nschelling = Person(\"Schelling\", \"Thomas\")\nmicromotives = Book(\"Micromotives and Macrobehavior\", [schelling], 252, BookType.NONFICTION)\nprint(ulysses)\nprint(micromotives)\n\n\nBook[title=Ulysses, authors=[Person[Joyce, James]], pages=732, type=BookType.FICTION]\nBook[title=Micromotives and Macrobehavior, authors=[Person[Schelling, Thomas]], pages=252, type=BookType.NONFICTION]\n\n\n\n\nOption 2: Separate Classes\n\n\n\nCode\n# class Book defined as earlier\nclass FictionBook(Book):\n    def __init__(self, title, authors, num_pages, characters):\n        super().__init__(title, authors, num_pages)\n        self.characters = characters\n\nclass NonfictionBook(Book):\n    def __init__(self, title, authors, num_pages, topic):\n        super().__init__(title, authors, num_pages)\n        self.topic = topic\n\n\n\n\nCode\njoyce = Person(\"Joyce\", \"James\")\nulysses = FictionBook(\"Ulysses\", [joyce], 732, [\"Daedalus\"])\nschelling = Person(\"Schelling\", \"Thomas\")\nmicromotives = NonfictionBook(\"Micromotives and Macrobehavior\", [schelling], 252, \"Economics\")\nprint(ulysses)\nprint(micromotives)\n\n\nBook[title=Ulysses, authors=[Person[Joyce, James]], pages=732]\nBook[title=Micromotives and Macrobehavior, authors=[Person[Schelling, Thomas]], pages=252]\n\n\n\n\n\n\nDSAN 5500 Week 2: Software Design Patterns and OOP"
  },
  {
    "objectID": "w02/index.html",
    "href": "w02/index.html",
    "title": "Week 2: Software Design Patterns and Object-Oriented Programming",
    "section": "",
    "text": "Open slides in new window →"
  },
  {
    "objectID": "w02/index.html#creating-classes",
    "href": "w02/index.html#creating-classes",
    "title": "Week 2: Software Design Patterns and Object-Oriented Programming",
    "section": "Creating Classes",
    "text": "Creating Classes\n\nUse case: Creating an inventory system for a Bookstore\n\n\n\n\n\nCode\nclass Bookstore:\n    def __init__(self, name, location):\n        self.name = name\n        self.location = location\n        self.books = []\n\n    def __getitem__(self, index):\n        return self.books[index]\n\n    def __repr__(self):\n        return self.__str__()\n\n    def __str__(self):\n        return f\"Bookstore[{self.get_num_books()} books]\"\n\n    def add_books(self, book_list):\n        self.books.extend(book_list)\n\n    def get_books(self):\n        return self.books\n\n    def get_inventory(self):\n        book_lines = []\n        for book_index, book in enumerate(self.get_books()):\n            cur_book_line = f\"{book_index}. {str(book)}\"\n            book_lines.append(cur_book_line)\n        return \"\\n\".join(book_lines)\n\n    def get_num_books(self):\n        return len(self.get_books())\n\n    def sort_books(self, sort_key):\n        self.books.sort(key=sort_key)\n\nclass Book:\n    def __init__(self, title, authors, num_pages):\n        self.title = title\n        self.authors = authors\n        self.num_pages = num_pages\n\n    def __str__(self):\n        return f\"Book[title={self.get_title()}, authors={self.get_authors()}, pages={self.get_num_pages()}]\"\n\n    def get_authors(self):\n        return self.authors\n\n    def get_first_author(self):\n        return self.authors[0]\n\n    def get_num_pages(self):\n        return self.num_pages\n\n    def get_title(self):\n        return self.title\n\nclass Person:\n    def __init__(self, family_name, given_name):\n        self.family_name = family_name\n        self.given_name = given_name\n\n    def __repr__(self):\n        return self.__str__()\n\n    def __str__(self):\n        return f\"Person[{self.get_family_name()}, {self.get_given_name()}]\"\n\n    def get_family_name(self):\n        return self.family_name\n\n    def get_given_name(self):\n        return self.given_name\n\n\n\n\n\nCode\nmy_bookstore = Bookstore(\"Bookland\", \"Washington, DC\")\nplath = Person(\"Plath\", \"Sylvia\")\nbell_jar = Book(\"The Bell Jar\", [plath], 244)\nmarx = Person(\"Marx\", \"Karl\")\nengels = Person(\"Engels\", \"Friedrich\")\nmanifesto = Book(\"The Communist Manifesto\", [marx, engels], 43)\nelster = Person(\"Elster\", \"Jon\")\ncement = Book(\"The Cement of Society\", [elster], 311)\nmy_bookstore.add_books([bell_jar, manifesto, cement])\nprint(my_bookstore)\nprint(my_bookstore[0])\nprint(\"Inventory:\")\nprint(my_bookstore.get_inventory())\n\n\nBookstore[3 books]\nBook[title=The Bell Jar, authors=[Person[Plath, Sylvia]], pages=244]\nInventory:\n0. Book[title=The Bell Jar, authors=[Person[Plath, Sylvia]], pages=244]\n1. Book[title=The Communist Manifesto, authors=[Person[Marx, Karl], Person[Engels, Friedrich]], pages=43]\n2. Book[title=The Cement of Society, authors=[Person[Elster, Jon]], pages=311]"
  },
  {
    "objectID": "w02/index.html#doing-things-with-classes",
    "href": "w02/index.html#doing-things-with-classes",
    "title": "Week 2: Software Design Patterns and Object-Oriented Programming",
    "section": "Doing Things With Classes",
    "text": "Doing Things With Classes\n\nNow we can use our OOP structure, for example to sort the inventory in different ways!\n\n\n\n\nAlphabetical (By First Author)\n\n\n\nCode\nsort_alpha = lambda x: x.get_first_author().get_family_name()\nmy_bookstore.sort_books(sort_key = sort_alpha)\nprint(my_bookstore.get_inventory())\n\n\n0. Book[title=The Cement of Society, authors=[Person[Elster, Jon]], pages=311]\n1. Book[title=The Communist Manifesto, authors=[Person[Marx, Karl], Person[Engels, Friedrich]], pages=43]\n2. Book[title=The Bell Jar, authors=[Person[Plath, Sylvia]], pages=244]\n\n\n\n\nBy Page Count\n\n\n\nCode\nsort_pages = lambda x: x.get_num_pages()\nmy_bookstore.sort_books(sort_key = sort_pages)\nprint(my_bookstore.get_inventory())\n\n\n0. Book[title=The Communist Manifesto, authors=[Person[Marx, Karl], Person[Engels, Friedrich]], pages=43]\n1. Book[title=The Bell Jar, authors=[Person[Plath, Sylvia]], pages=244]\n2. Book[title=The Cement of Society, authors=[Person[Elster, Jon]], pages=311]"
  },
  {
    "objectID": "w02/index.html#in-pictures",
    "href": "w02/index.html#in-pictures",
    "title": "Week 2: Software Design Patterns and Object-Oriented Programming",
    "section": "In Pictures",
    "text": "In Pictures\n\n\n\n\n\n\n\nG\n\n Bookstore Relational Diagram  \n\nBookstore\n\n Bookstore  Name  Location  Booklist  Get_Inventory()  Sort_Inventory()   \n\nPlace\n\n Place  City  State  Country  Print_Map()   \n\nBookstore:loc-&gt;Place:placehead\n\n  Has One   \n\nBook\n\n Book  Title  Authors  Num Pages  Preview()   \n\nBookstore:bl-&gt;Book:bookhead\n\n  Has Multiple   \n\nPerson\n\n Person  Family Name  Given Name   \n\nBook:auths-&gt;Person:personhead\n\n  Has Multiple"
  },
  {
    "objectID": "w02/index.html#design-choices",
    "href": "w02/index.html#design-choices",
    "title": "Week 2: Software Design Patterns and Object-Oriented Programming",
    "section": "Design Choices",
    "text": "Design Choices\n\nThe goal is to encapsulate as best as possible: which objects should have which properties, and which methods?\nExample: Fiction vs. Non-Fiction. How important is this distinction for your use case?\n\n\n\n\nOption 1: As Property of Book\n\n\n\nCode\nfrom enum import Enum\nclass BookType(Enum):\n    NONFICTION = 0\n    FICTION = 1\n\nclass Book:\n    def __init__(self, title: str, authors: list[Person], num_pages: int, type: BookType):\n        self.title = title\n        self.authors = authors\n        self.num_pages = num_pages\n        self.type = type\n\n    def __str__(self):\n        return f\"Book[title={self.title}, authors={self.authors}, pages={self.num_pages}, type={self.type}]\"\n\n\n\n\nCode\njoyce = Person(\"Joyce\", \"James\")\nulysses = Book(\"Ulysses\", [joyce], 732, BookType.FICTION)\nschelling = Person(\"Schelling\", \"Thomas\")\nmicromotives = Book(\"Micromotives and Macrobehavior\", [schelling], 252, BookType.NONFICTION)\nprint(ulysses)\nprint(micromotives)\n\n\nBook[title=Ulysses, authors=[Person[Joyce, James]], pages=732, type=BookType.FICTION]\nBook[title=Micromotives and Macrobehavior, authors=[Person[Schelling, Thomas]], pages=252, type=BookType.NONFICTION]\n\n\n\n\nOption 2: Separate Classes\n\n\n\nCode\n# class Book defined as earlier\nclass FictionBook(Book):\n    def __init__(self, title, authors, num_pages, characters):\n        super().__init__(title, authors, num_pages)\n        self.characters = characters\n\nclass NonfictionBook(Book):\n    def __init__(self, title, authors, num_pages, topic):\n        super().__init__(title, authors, num_pages)\n        self.topic = topic\n\n\n\n\nCode\njoyce = Person(\"Joyce\", \"James\")\nulysses = FictionBook(\"Ulysses\", [joyce], 732, [\"Daedalus\"])\nschelling = Person(\"Schelling\", \"Thomas\")\nmicromotives = NonfictionBook(\"Micromotives and Macrobehavior\", [schelling], 252, \"Economics\")\nprint(ulysses)\nprint(micromotives)\n\n\nBook[title=Ulysses, authors=[Person[Joyce, James]], pages=732]\nBook[title=Micromotives and Macrobehavior, authors=[Person[Schelling, Thomas]], pages=252]"
  },
  {
    "objectID": "w03/index.html",
    "href": "w03/index.html",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "",
    "text": "Do we need to be able to insert quickly?\nDo we need to be able to sort quickly?\nDo we need to be able to search quickly?\nAre we searching for individual items or for ranges?\n\n\n\n\n\nIn General: Mapping of integer indices to objects\n\nx = ['a','b','c'] \\(\\implies\\) x[0] = 'a', x[1] = 'b', x[2] = 'c'\n\nIn Python: list"
  },
  {
    "objectID": "w03/index.html#data-structure-choice-leftrightarrow-efficiency-for-task",
    "href": "w03/index.html#data-structure-choice-leftrightarrow-efficiency-for-task",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "",
    "text": "Do we need to be able to insert quickly?\nDo we need to be able to sort quickly?\nDo we need to be able to search quickly?\nAre we searching for individual items or for ranges?"
  },
  {
    "objectID": "w03/index.html#sequences",
    "href": "w03/index.html#sequences",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "",
    "text": "In General: Mapping of integer indices to objects\n\nx = ['a','b','c'] \\(\\implies\\) x[0] = 'a', x[1] = 'b', x[2] = 'c'\n\nIn Python: list"
  },
  {
    "objectID": "w03/slides.html#data-structure-choice-leftrightarrow-efficiency-for-task",
    "href": "w03/slides.html#data-structure-choice-leftrightarrow-efficiency-for-task",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "Data Structure Choice \\(\\Leftrightarrow\\) Efficiency for Task",
    "text": "Data Structure Choice \\(\\Leftrightarrow\\) Efficiency for Task\n\nDo we need to be able to insert quickly?\nDo we need to be able to sort quickly?\nDo we need to be able to search quickly?\nAre we searching for individual items or for ranges?"
  },
  {
    "objectID": "w03/slides.html#sequences",
    "href": "w03/slides.html#sequences",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "Sequences",
    "text": "Sequences\n\nIn General: Mapping of integer indices to objects\n\nx = ['a','b','c'] \\(\\implies\\) x[0] = 'a', x[1] = 'b', x[2] = 'c'\n\nIn Python: list"
  },
  {
    "objectID": "w03/slides.html#sets",
    "href": "w03/slides.html#sets",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "Sets",
    "text": "Sets"
  },
  {
    "objectID": "w03/slides.html#maps",
    "href": "w03/slides.html#maps",
    "title": "Week 3: Data Structures and Computational Complexity",
    "section": "Maps",
    "text": "Maps\n\n\nDSAN 5500 Week 3: Data Structures, Computational Complexity"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "DSAN 5500: Data Structures, Objects, and Algorithms in Python",
    "section": "",
    "text": "Note\n\n\n\nYou are viewing a draft version of the DSAN 5500 webpage for Spring 2024 – materials here are subject to change, before being finalized at the start of the Spring 2024 semester!\n\n\nWelcome to the homepage for DSAN 5500: Data Structures, Georgetown University, Spring 2024! The course takes place on Mondays from 12:30-3:00pm in Car Barn room 204.\nMore details are provided on the syllabus, but as an overview, the only graded materials for the course will be:\n\nFour problem sets, evenly spaced throughout the semester,\nOne in-class midterm exam, and\nOne final project, due at the end of the semester (instead of a final exam)\n\nThe course does not have any “official” prerequisites, but a general comfort with Python is strongly recommended. If you have never used Python before, however (or if you haven’t used it in a while and feel like your skills are rusty), I will be releasing a set of preparation materials over winter break, to help make sure that everyone is on the same page coming into class in the Spring!\nMy goal, in creating the course, is to take the general, language-agnostic data science concepts you’ve learned in (e.g.) DSAN 5000 and work through how to implement these concepts efficiently in Python, where we can define “efficient” in different ways based on different goals that we may have in different settings while working as Data Scientists.\nCourse Description:\nThe Data Structures, Objects, and Algorithms in Python course will look at built-in data structures, such as dictionaries, lists, tuples, sets, strings, and frozen sets. The course will also cover objects and classes in Python, as well as building new structures and objects. The class will cover algorithms including runtime, recurrence, and development. Applications will include data science problems. Prerequisite: A working or intermediate knowledge of Python. 3 credits."
  },
  {
    "objectID": "syllabus.html",
    "href": "syllabus.html",
    "title": "Syllabus",
    "section": "",
    "text": "Note\n\n\n\nYou are viewing a draft version of the DSAN 5500 webpage for Spring 2024 – materials here are subject to change, before being finalized at the start of the Spring 2024 semester!\nWelcome to DSAN 5500: Data Structures, Objects, and Algorithms in Python!"
  },
  {
    "objectID": "syllabus.html#course-overview",
    "href": "syllabus.html#course-overview",
    "title": "Syllabus",
    "section": "Course Overview",
    "text": "Course Overview\nMy goal, in creating the course, is to take the general, language-agnostic data science concepts you’ve learned in (e.g.) DSAN 5000 and work through how to implement these concepts efficiently in Python, where we can define “efficient” in different ways based on different goals that we may have in different settings while working as Data Scientists.\nThe graded components for the course consist of four problem sets, an in-class midterm, and a final project. Grades will be allocated as follows:\n\n\n\nAssignment\nPercent of Final Grade\n\n\n\n\nProblem Set 1: Python Fundamentals\n8%\n\n\nProblem Set 2: Computational Complexity\n8%\n\n\nIn-Class Midterm\n34%\n\n\nProblem Set 3: Data Structures\n8%\n\n\nProblem Set 4: Algorithms\n8%\n\n\nFinal Project\n34%\n\n\n\nThe course does not have any “official” prerequisites, but a general comfort with Python is strongly recommended. If you have never used Python before, however (or if you haven’t used it in a while and feel like your skills are rusty), I will be releasing a set of preparation materials over winter break, to help make sure that everyone is on the same page coming into class in the Spring!"
  },
  {
    "objectID": "syllabus.html#course-topics",
    "href": "syllabus.html#course-topics",
    "title": "Syllabus",
    "section": "Course Topics",
    "text": "Course Topics\nThe following is a rough map of what we will work through together throughout the semester; given that everyone learns at a different pace, my aim is to leave us with a good amount of flexibility in terms of how much time we spend on each topic: if I find that it takes me longer than a week to convey a certain topic in sufficient depth, for example, then I view it as a strength rather than a weakness of the course that we can then rearrange the calendar below by adding an extra week on that particular topic! Similarly, if it seems like I am spending too much time on a topic, to the point that students seem bored or impatient to move onto the next topic, we can move a topic intended for the next week to the current week!\n\n\n\nUnit\nWeek\nDate\nTopic\n\n\n\n\nUnit 1: Python Fundamentals\n1\nJan 10 (Wednesday)\nPython Fundamentals\n\n\n\n\nJan 15\nNo Class (Martin Luther King, Jr. Day)\n\n\n\n2\nJan 22\nSoftware Design Patterns and Object-Oriented Programming (OOP)\n\n\nUnit 2: Data Structures\n3\nJan 29\nData Structures and Computational Complexity\n\n\n\n4\nFeb 5\nHeaps, Stacks, Trees, Graphs\n\n\nUnit 3: Basic Algorithms\n5\nFeb 12\nSearch Trees\n\n\n\n6\nFeb 19\nSorting Algorithms\n\n\nMidterm\n7\nFeb 26\nIn-Class Midterm\n\n\n\n\nMar 4\nNo Class (Spring Break)\n\n\nUnit 4: Advanced Algorithms\n8\nMar 11\nGraph Algorithms\n\n\n\n9\nMar 18\nAlgorithms for Spatial Data\n\n\n\n10\nMar 25\nBuilding Efficient Data Pipelines\n\n\n\n\nApr 1\nNo Class (Easter Break)\n\n\nUnit 5: Parallel Computing\n11\nApr 8\nParallel Computing and MapReduce\n\n\n\n12\nApr 15\nParallel Computing Part 2\n\n\nUnit 6: Advanced Topics and Applications\n13\nApr 22\nApplications in Bioinformatics\n\n\n\n14\nApr 29\nApplications in NLP"
  },
  {
    "objectID": "syllabus.html#official-course-description",
    "href": "syllabus.html#official-course-description",
    "title": "Syllabus",
    "section": "Official Course Description",
    "text": "Official Course Description\nThe Data Structures, Objects, and Algorithms in Python course will look at built-in data structures, such as dictionaries, lists, tuples, sets, strings, and frozen sets. The course will also cover objects and classes in Python, as well as building new structures and objects. The class will cover algorithms including runtime, recurrence, and development. Applications will include data science problems. Prerequisite: A working or intermediate knowledge of Python. 3 credits."
  }
]