import numpy as np


def return_big_object(i):
    time.sleep(.1)
    return i * np.ones((10000, 200), dtype=np.float64)

```{python}
from sympy.ntheory import factorint
start, end = 500, 600
def find_prime_factors(num):
  return factorint(num, multiple=True)
[(i,find_prime_factors(i)) for i in range(start,end+1)]
```

```{python}
from sympy.ntheory import factorint
from joblib import Parallel, delayed
start, end = 500, 600
def find_prime_factors(num):
  return factorint(num, multiple=True)
parallel_runner = Parallel(n_jobs=2)
output = parallel_runner(delayed(find_prime_factors)(i) for i in range(start, end+1))
print(output)
```

```{python}
#| echo: false
import time
from psutil import Process
from threading import Thread


class MemoryMonitor(Thread):
    """Monitor the memory usage in MB in a separate thread.

    Note that this class is good enough to highlight the memory profile of
    Parallel in this example, but is not a general purpose profiler fit for
    all cases.
    """
    def __init__(self):
        super().__init__()
        self.stop = False
        self.memory_buffer = []
        self.start()

    def get_memory(self):
        "Get memory of a process and its children."
        p = Process()
        memory = p.memory_info().rss
        for c in p.children():
            memory += c.memory_info().rss
        return memory

    def run(self):
        memory_start = self.get_memory()
        while not self.stop:
            self.memory_buffer.append(self.get_memory() - memory_start)
            time.sleep(0.2)

    def join(self):
        self.stop = True
        super().join()
```