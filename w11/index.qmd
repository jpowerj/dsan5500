---
title: "Week 11: Parallel Pipelines and Map-Reduce"
subtitle: "*DSAN 5500: Data Structures, Objects, and Algorithms in Python*"
date: "Monday, April 8, 2024"
date-format: full
author: "Jeff Jacobs"
institute: "<a href='mailto:jj1088@georgetown.edu' target='_blank'>`jj1088@georgetown.edu`</a>"
lecnum: 11
bibliography: "../_DSAN5500.bib"
categories:
  - "Class Sessions"
format:
  revealjs:
    df-print: kable
    output-file: "slides.html"
    footer: "DSAN 5500 Week 11: {{< var w11.footer >}}"
    echo: true
    code-fold: show
    scrollable: true
    slide-number: true
    html-math-method: mathjax
    include-in-header:
      text: "<link rel='stylesheet' href='https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css'><link rel='preconnect' href='https://fonts.googleapis.com'>
<link rel='preconnect' href='https://fonts.gstatic.com' crossorigin>
<link href='https://fonts.googleapis.com/css2?family=Honk&display=swap' rel='stylesheet'>"
    theme: ["../_jjslides.scss"]
    simplemenu:
      flat: true
      barhtml:
        header: "<div class='menubar'><span style='position: absolute; left: 8; padding-left: 8px;'><a href='./index.html'>&larr; Return to Notes</a></span><ul class='menu'></ul></div>"
      scale: 0.5
    revealjs-plugins:
      - simplemenu
  html:
    df-print: kable
    output-file: "index.html"
    echo: true
    code-fold: show
    html-math-method: mathjax
---

::: {.content-visible unless-format="revealjs"}

<center>
<a class="h2" href="./slides.html" target="_blank">Open slides in new window &rarr;</a>
</center>

:::

# Beyond Embarrassingly Parallel Code... {data-stack-name="Beyond Embarrassingly Parallel"}

## Last Week: Embarrassingly Parallel {.smaller .crunch-title .crunch-ul}

* Technical definition: tasks within pipeline can easily be parallelized bc **no dependence** and **no need for communication** (see next slide). Better video explanation:

<center>

{{< video "images/triple_spatula.mp4" height="500" >}}

</center>

## What Happens When Code is *Not* Embarrassingly Parallel? {.smaller .crunch-title .crunch-math .crunch-ul .title-09}

* Think of the difference between **linear** and **quadratic equations** in algebra:
* $3x - 1 = 0$ is "embarrassingly" solvable, on its own: you can solve it directly, by adding 3 to both sides $\implies x = \frac{1}{3}$. Same for $2x + 3 = 0 \implies x = -\frac{3}{2}$
* Now consider $6x^2 + 7x - 3 = 0$: Harder to solve "directly", so your instinct might be to turn to the laborious **quadratic equation**:

$$
\begin{align*}
x = \frac{-b \pm \sqrt{b^2 - 4ac}}{2a} = \frac{-7 \pm \sqrt{49 - 4(6)(-3)}}{2(6)} = \frac{-7 \pm 11}{12} = \left\{\frac{1}{3},-\frac{3}{2}\right\}
\end{align*}
$$

* And yet, $6x^2 + 7x - 3 = (3x - 1)(2x + 3)$, meaning that we could have **split** the problem into two "embarrassingly" solvable pieces, then **multiplied** to get result!

## The Analogy to Map-Reduce

| | |
|:- |:-:|
| $\leadsto$ If code is **not** embarrassingly parallel (instinctually requiring laborious serial execution), | $\underbrace{6x^2 + 7x - 3 = 0}_{\text{Solve using Quadratic Eqn}}$ |
| But can be **split** into... | $(3x - 1)(2x + 3) = 0$ |
| Embarrassingly parallel **pieces** which **combine** to same result, | $\underbrace{3x - 1 = 0}_{\text{Solve directly}}, \underbrace{2x + 3 = 0}_{\text{Solve directly}}$ |
| We can use **map-reduce** to achieve ultra speedup (running "pieces" on **GPU!**) | $\underbrace{(3x-1)(2x+3) = 0}_{\text{Solutions satisfy this product}}$ |

: {tbl-colwidths="[75,25]"}

## The Direct Analogy: Map-Reduce! {.smaller .crunch-title .crunch-details}

* Problem you've seen in DSAN 5000/5100: Computing SSR (**Sum of Squared Residuals**)
* $y = (1,3,2), \widehat{y} = (2, 5, 0) \implies \text{SSR} = (1-2)^2 + (3-5)^2 + (2-0)^2 = 9$
* Computing pieces separately:

```python
map(do_something_with_piece, list_of_pieces)
```

```{python}
my_map = map(lambda input: input**2, [(1-2), (3-5), (2-0)])
map_result = list(my_map)
map_result
```

* Combining solved pieces

```python
reduce(how_to_combine_pair_of_pieces, pieces_to_combine)
```

```{python}
from functools import reduce
my_reduce = reduce(lambda piece1, piece2: piece1 + piece2, map_result)
my_reduce
```

## Example with Non-Embarrassing Code

* Matrix multiplication

# But... Why is All This Weird Mapping and Reducing Necessary? {data-stack-name="Map-Reduce Rationale"}

* Without knowing a bit more of the **internals** of **computing efficiency**, it may seem like a huge cost in terms of overly-complicated overhead

## The "Killer Application": Matrix Multiplication {.crunch-title .smaller .title-08}

* *(I learned from <a href='http://infolab.stanford.edu/~ullman/' target='_blank'>Jeff Ullman</a>, who did the obnoxious Stanford thing of mentioning in passing how "two previous students in the <a href='http://web.stanford.edu/class/cs246/' target='_blank'>class</a> did this for a cool final project on web crawling and, well, it escalated quickly", aka became Google)*

![From @leskovec_mining_2014, which is (legally) <a href='http://www.mmds.org/' target='_blank'>free online</a>!](images/map_reduce3.svg){fig-align="center"}

## The Killer Way-To-Learn: Text Counts! {.smaller .crunch-title .crunch-ul .crunch-p}

* [-@leskovec_mining_2014]: Text counts (2.2) $\rightarrow$ Matrix multiplication (2.3) $\rightarrow \cdots \rightarrow$ PageRank (5.1)
* *(And yall thought it was just busywork for HW3* üòè*)*
* Scenario: User searches "Denzel Curry"... How **relevant** is a given webpage?

```{dot}
//| echo: false
digraph G {
    rankdir="LR";
    nodesep="10";
	edge [penwidth=1.2,arrowsize=0.85]
    node [
        shape=plaintext;
        fontname="Courier";
    ];
    # Chunked
    chunked [shape=none label=<
<table border="1" cellborder="0">
<tr>
  <td border="1" sides="b"><font face="Helvetica">Chunked Document</font></td>
</tr>
<tr>
  <td port="p1" border="1" align="text" balign="left" sides="b">Today Denzel Washington<br />ate a big bowl of Yum's<br />curry. Denzel allegedly<br />rubbed his tum and said</td>
</tr>
<tr>
  <td port="p2" border="1" align="text" balign="left" sides="b">"yum yum yum" when he<br />tasted today's curry.<br />"Yum! It is me Denzel,<br />curry is my fav!", he</td>
</tr>
<tr>
  <td port="p3" border="1" align="text" balign="left" sides="b">exclaimed. According to<br />his friend Steph, curry<br />is indeed Denzel's fav.<br />We are live with Del</td>
</tr>
<tr>
  <td port="p4" align="text" balign="left">Curry in Washington for<br />a Denzel curry update.</td>
</tr>
</table>>];
    // orig:p1 -> chunked:p1;
    // orig:p2 -> chunked:p2;
    // orig:p3 -> chunked:p3;
    // orig:p4 -> chunked:p4;

    # Chunked counts
    chcounts [shape=none label=<
<table border="1">
<tr>
  <td border="1" sides="b"><font face="Helvetica">Chunked Counts</font></td>
</tr>
<tr>
  <td port="p1" border="1" align="text" balign="left" sides="b">('today',1)<br />('denzel',1)<br />...<br />('tum',1)<br />('said',1)</td>
</tr>
<tr>
  <td port="p2" border="1" align="text" balign="left" sides="b">('yum',1)<br />('yum',1)<br />('yum',1)<br />...<br />('fav',1)</td>
</tr>
<tr>
  <td port="p3" border="1" align="text" balign="left" sides="b">('exclaimed',1)<br />...<br />('del',1)</td>
</tr>
<tr>
  <td port="p4" border="0" align="text" balign="left">('curry',1)<br />('washington',1)<br />('denzel',1)<br />('curry',1)<br />('update',1)</td>
</tr>
</table>>];
    chunked:p1 -> chcounts:p1;
    chunked:p2 -> chcounts:p2;
    chunked:p3 -> chcounts:p3;
    chunked:p4 -> chcounts:p4;

    # Sorted counts
    scounts [shape=none label=<
<table border="1">
<tr>
  <td border="1" sides="b"><font face="Helvetica">Hashed Counts</font></td>
</tr>
<tr>
  <td port="p1" border="1" align="text" balign="left" sides="b">('allegedly',1)<br />...<br />('curry',1)<br />('denzel',2)<br />...<br />('yum',1)</td>
</tr>
<tr>
  <td port="p2" border="1" align="text" balign="left" sides="b">('curry',2)<br />('denzel',1)<br />...<br />('yum',4)</td>
</tr>
<tr>
  <td port="p3" border="1" align="text" balign="left" sides="b">('according',1)<br />('curry',1)<br />('del',1)<br />('denzel',1)<br />...</td>
</tr>
<tr>
  <td port="p4" border="0" align="text" balign="left">('curry',2)<br />('denzel',1)<br />('update',1)<br />('washington',1)</td>
</tr>
</table>>];
    chcounts:p1 -> scounts:p1;
    chcounts:p2 -> scounts:p2;
    chcounts:p3 -> scounts:p3;
    chcounts:p4 -> scounts:p4;

    # Combined counts
    ccounts [shape=none label=<
<table border="1" cellborder="0">
<tr>
  <td port="p0" border="1" sides="b"><font face="Helvetica">Overall Counts</font></td>
</tr>
<tr>
  <td port="p1" align="text" balign="left">('according',1)<br />('allegedly',1)<br />('ate',1)<br />('big',1)<br />('bowl',1)<br />('curry',6)<br />('del',1)<br />('denzel',5)<br />('exclaimed',1)<br />('fav',2)<br />('friend',1)<br />('indeed',1)<br />('live',1)<br />('rubbed',1)<br />('said',1)<br />('steph',1)<br />('tasted',1)<br />('today',2)<br />('tum',1)<br />('update',1)<br />('washington',2)<br />('yum',4)</td>
</tr>
</table>>];
    scounts:p1 -> ccounts:p1;
    scounts:p2 -> ccounts:p1;
    scounts:p3 -> ccounts:p1;
    scounts:p4 -> ccounts:p1;
}
```

## References

::: {#refs}
:::
