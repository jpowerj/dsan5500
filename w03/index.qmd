---
title: "Week 3: Data Structures and Computational Complexity"
subtitle: "*DSAN 5500: Data Structures, Objects, and Algorithms in Python*"
date: "Monday, January 29, 2024"
date-format: full
lecnum: 3
categories:
  - "Class Sessions"
author: "Jeff Jacobs"
institute: "<a href='mailto:jj1088@georgetown.edu' target='_blank'>`jj1088@georgetown.edu`</a>"
bibliography: "../_DSAN5500.bib"
format:
  revealjs:
    df-print: kable
    output-file: "slides.html"
    footer: "DSAN 5500 Week 3: Data Structures, Computational Complexity"
    echo: true
    code-fold: show
    scrollable: true
    slide-number: true
    theme: ["../_jjslides.scss"]
    html-math-method: mathjax
    simplemenu:
      flat: true
      barhtml:
        header: "<div class='menubar'><span style='position: absolute; left: 8; padding-left: 8px;'><a href='./index.html'>&larr; Return to Notes</a></span><ul class='menu'></ul></div>"
      scale: 0.5
    revealjs-plugins:
      - simplemenu
  html:
    df-print: kable
    output-file: "index.html"
    echo: true
    code-fold: show
    html-math-method: mathjax
---

::: {.content-visible unless-format="revealjs"}

<center>
<a class="h2" href="./slides.html" target="_blank">Open slides in new window &rarr;</a>
</center>

:::

# Why We Can't Learn These Topics Separately {data-stack-name="Overview"}

## Data Structure Choice $\Leftrightarrow$ Efficiency for Task

* Do we need to be able to **insert** quickly?
* Do we need to be able to **sort** quickly?
* Do we need to be able to **search** quickly?
* Are we searching for **individual items** or for **ranges**?

# Basic Data Structures {data-stack-name="Structures"}

## Recall: Primitives

* `boolean`
* `int`
* `float`
* `string`
* `None`
* Now we want to put these together, to form... **structures!**  ðŸ‘€

## Tuples

* **Fixed-size** collection of $N$ objects
* Unless otherwise specified, we're talking about $2$-tuples
* Example: We can locate something on the Earth by specifying two `floats`: latitude and longitude!

```{python}
gtown_loc = (38.9076, -77.0723)
gtown_loc
```

* But what if we don't know in advance how many items we want to store? Ex: how can we store users for a new app?

## Sequences

* **In General**: Mapping of integer **indices** to objects
* `x = ['a','b','c']`
  * $\implies$ `x[0] = 'a'`
  * $\implies$ `x[1] = 'b'`
  * $\implies$ `x[2] = 'c'`
* In Python: `list`
* Nice built-in language constructs for **looping** over lists, and especially for **performing operations on each element**

## Looping Over Sequences

::: columns
::: {.column width="50%"}

* C/C++/Java:

```java
List<String> myList = Arrays.asList("a", "b", "c");
for (int i = 0; i < x.size(); i++) {
    System.out.println(myList.get(i));
}
```
<br>
<pre>
a
b
c
</pre>

:::
::: {.column width="50%"}

* Python:

```{python}
my_list = ['a','b','c']
for list_element in my_list:
  print(list_element)
```

:::
:::

## *List Comprehensions*: Apply Function to Each Element {.crunch-title .title-07}

* Construct **new** list by applying operation to each element:

```{python}
my_nums = [4,5,6,7]
my_squares = [num ** 2 for num in my_nums]
my_squares
```

* Can also **filter** the elements of the list with `if`:

```{python}
my_odd_squares = [num ** 2 for num in my_nums if num % 2 == 1]
my_odd_squares
```

## Sets {.smaller .crunch-title}

::: columns
::: {.column width="50%"}

* Extremely helpful + efficient for finding **unique** elements:

```{python}
animals_i_saw = ['bird','bird','fish','bird','cat','bird','lizard']
print(f"Number of animals I saw: {len(animals_i_saw)}")
```

```{python}
unique_animals_me = set(animals_i_saw)
print(f"Set of unique animals: {unique_animals_me}")
print(f"Number of unique animals: {len(unique_animals_me)}")
```

:::
::: {.column width="50%"}

* Supports all set operators from math:

```{python}
animals_you_saw = ['lizard','dog','bird','bird','bird']
unique_animals_you = set(animals_you_saw)
unique_animals_both = unique_animals_me.intersection(unique_animals_you)
print(f"Animals we both saw: {unique_animals_both}")
```

```{python}
unique_animals_either = unique_animals_me.union(unique_animals_you)
print(f"Animals either of us saw: {unique_animals_either}")
```

```{python}
unique_animals_meonly = unique_animals_me - unique_animals_you
print(f"Animals I saw that you didn't see: {unique_animals_meonly}")
unique_animals_youonly = unique_animals_you - unique_animals_me
print(f"Animals you saw that I didn't see: {unique_animals_youonly}")
```

:::
:::

## Maps / Dictionaries {.smaller .crunch-title}

::: columns
::: {.column width="50%"}

* While other language like Java have lots of fancy types of Map, Python has a single type, the **dictionary**:

```{python}
gtown_data = {
  'name': 'Georgetown University',
  'founded': 1789,
  'coordinates': (38.9076, -77.0723),
  'location': {
    'city': 'Washington',
    'state': 'DC', # <__<
    'country': 'USA'
  }
}
print(gtown_data.keys())
print(gtown_data.values())
```

:::
::: {.column width="50%"}

* Be careful when looping! Default behavior is iteration over **keys**:

```{python}
for k in gtown_data:
  print(k)
```

* For **key-value pairs** use `.items()`:

```{python}
for k, v in gtown_data.items():
  print(k, v)
```

:::
:::

# Analyzing Computational Complexity {data-stack-name="Complexity"}

## Looking Under the Hood

* We want to understand these structures **independently** of the specifics of their implementation in Python, for now
* So, let's construct our own **simplified versions** of the basic structures

## Tuples

```{python}
class MyTuple:
  def __init__(self, thing1, thing2):
    self.thing1 = thing1
    self.thing2 = thing2

  def __repr__(self):
    return f"({self.thing1}, {self.thing2})"

  def __str__(self):
    return self.__repr__()

t1 = MyTuple('a','b')
t2 = MyTuple(111, 222)
print(t1, t2)
```

## Lists {.crunch-title .smaller}

::: columns
::: {.column width="50%"}

* The list itself just points to a root item:

```{python}
class MyList:
  def __init__(self):
    self.root = None

  def append(self, new_item):
    if self.root is None:
      self.root = MyListItem(new_item)
    else:
      self.root.append(new_item)

  def __repr__(self):
    return self.root.__repr__()
```

:::
::: {.column width="50%"}

* An item has contents, pointer to next item:

```{python}
class MyListItem:
  def __init__(self, content):
    self.content = content
    self.next = None

  def append(self, new_item):
    if self.next is None:
      self.next = MyListItem(new_item)
    else:
      self.next.append(new_item)

  def __repr__(self):
    my_content = self.content
    return my_content if self.next is None else f"{my_content}, {self.next.__repr__()}"
```

:::
:::

```{python}
users = MyList()
users.append('Jeff')
users.append('Alma')
users.append('Bo')
print(users)
```

## So, How Many "Steps" Are Required...

* To retrieve the **first** element in a `MyTuple`?
* To retrieve the **last** element in a `MyTuple`?
* To retrieve the **first** element in a `MyList`?
* To retrieve the **last** element in a `MyList`?

## How Many Steps? {.smaller}

::: columns
::: {.column width="50%"}

* With a `MyTuple`:

```{python}
t1.thing1
```

* $\implies$ 1 step

```{python}
t1.thing2
```

* $\implies$ 1 step

:::
::: {.column width="50%"}

* With a `MyList`:

```{python}
print(users.root.content)
```

* $\implies$ 1 step

```{python}
current_node = users.root
while current_node.next is not None:
  current_node = current_node.next
print(current_node.content)
```

* $\implies$ (3 steps) 
* ...But why 3? How many steps if the list contained 5 elements? $N$ elements?

:::
:::

## Pairwise-Concatenating List Elements {.smaller .crunch-title}

* Now rather than just printing, let's pairwise concatenate:

```{python}
cur_pointer1 = users.root
while cur_pointer1 is not None:
  cur_pointer2 = users.root
  while cur_pointer2 is not None:
    print(cur_pointer1.content + cur_pointer2.content)
    cur_pointer2 = cur_pointer2.next
  cur_pointer1 = cur_pointer1.next
```

* How many steps did this take? How about for a list with $5$ elements? $N$ elements?

## Last Example: Pairwise-Concatenation with End Check {.smaller}

```{python}
printed_items = []
cur_pointer1 = users.root
while cur_pointer1 is not None:
  cur_pointer2 = users.root
  while cur_pointer2 is not None:
    print(cur_pointer1.content + cur_pointer2.content)
    printed_items.append(cur_pointer1.content)
    printed_items.append(cur_pointer2.content)
    cur_pointer2 = cur_pointer2.next
  cur_pointer1 = cur_pointer1.next
check_pointer = users.root
while check_pointer is not None:
  if check_pointer.content in printed_items:
    print(f"Phew. {check_pointer.content} printed at least once.")
  else:
    print(f"Oh no! {check_pointer.content} was never printed!!!")
  check_pointer = check_pointer.next
```

## Generalizing

* Algorithms are **"efficient"** relative to how their runtime **scales** as the **objects** grow larger and larger!
* Tuple operations take 1 step no matter what
* For lists, retrieving the **first** element takes 1 step no matter what, but retrieving the **last** element takes $n$ steps!
* Pairwise concatenation requires $n^2$ steps!
* We write the complexity of an algorithm as $O(f(n))$, where $f(n)$ is a "complexity class" representing how long it takes to run, **in the limit**, as $n \rightarrow \infty$

## The Complexity of Our Examples

* Tuple operations: $O(1)$
* Retrieving the first element of a list: $O(1)$
* Retrieving the last element of a list: $O(n)$
* Pairwise concatenation: $O(n^2)$
* Pairwise concatenation+check: $O(n^2 + n) = O(n^2) \leftarrow !!!$
* Crucial to think **asymptotically** to wrap our heads around this!

## The Figure You Should Make In Your Brain Every Time {.smaller .crunch-title .title-10 .crunch-quarto-figure}

```{python}
#| code-fold: true
#| fig-align: center
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
n_vals = [np.power(10, k) for k in np.arange(1, 2.75, 0.25)]
runtime_df = pd.DataFrame({'$n$': n_vals})
runtime_df['$n^2 + 50n$'] = runtime_df['$n$'].apply(lambda x: np.power(x, 2) + 50*x)
runtime_df['$n^2 + 10000$'] = runtime_df['$n$'].apply(lambda x: np.power(x, 2) + 10000)
runtime_df['$O(n)$'] = runtime_df['$n$'].copy()
runtime_df['$O(nlogn)$'] = runtime_df['$n$'].apply(lambda x: x * np.log(x))
runtime_df['$O(n^2)$'] = runtime_df['$n$'].apply(lambda x: np.power(x, 2))
runtime_df['$O(n^2logn)$'] = runtime_df['$n$'].apply(lambda x: np.power(x,2) * np.log(x))
runtime_df['$O(n^3)$'] = runtime_df['$n$'].apply(lambda x: np.power(x, 3))
runtime_df['$O(n^3logn)$'] = runtime_df['$n$'].apply(lambda x: np.power(x, 3) * np.log(x))
# Get the max values, for labeling the ends of lines
max_vals = runtime_df.max().to_dict()
plot_df = runtime_df.melt(id_vars=['$n$'])
#print(plot_df)
style_map = {col: '' if (col == '$n^2 + 50n$') or (col == '$n^2 + 10000$') else (2,1) for col in runtime_df.columns}
fig, ax = plt.subplots(figsize=(11,5))
sns.lineplot(plot_df, x='$n$', y='value', hue='variable', style='variable', dashes=style_map)
#plt.xscale('log')
plt.yscale('log')
# extract the existing handles and labels
h, l = ax.get_legend_handles_labels()
# slice the appropriate section of l and h to include in the legend
ax.legend(h[0:2], l[0:2])
for label, val in max_vals.items():
  if (label == '$n$') or (label == '$n^2 + 50n$') or (label == '$n^2 + 10000$'):
    continue
  if 'logn' in label:
    label = label.replace('logn', r'\log(n)')
  ax.text(x = max_vals['$n$'] + 2, y = val, s=label, va='center')
# Hide the right and top spines
ax.spines[['right', 'top']].set_visible(False)
plt.show()
```

* Takeaway: As $n \rightarrow \infty$, **highest-degree terms dominate!**

## Constants On Highest-Degree Terms Also Go Away {.smaller .crunch-title .title-10}

* (Though this is harder to see, without a log-log plot:)

```{python}
#| code-fold: true
n_vals = [np.power(10, k) for k in np.arange(1, 6, 0.5)]
rt_const_df = pd.DataFrame({'$n$': n_vals})
rt_const_df['$20n^2$'] = rt_const_df['$n$'].apply(lambda x: 20*np.power(x,2))
rt_const_df['$n^2$'] = rt_const_df['$n$'].apply(lambda x: np.power(x,2))
rt_const_df['$n^2logn$'] = rt_const_df['$n$'].apply(lambda x: np.power(x,2) * np.power(np.log(x),2))
rt_const_df['$n^3$'] = rt_const_df['$n$'].apply(lambda x: np.power(x,3))
# Get the max values, for labeling the ends of lines
max_vals = rt_const_df.max().to_dict()
plot_df_const = rt_const_df.melt(id_vars=['$n$'])
style_map = {col: '' if (col == '$20n^2$') else (2,1) for col in rt_const_df.columns}
fig_const, ax_const = plt.subplots(figsize=(11,5))
sns.lineplot(plot_df_const, x='$n$', y='value', hue='variable', style='variable', dashes=style_map)
plt.xscale('log')
plt.yscale('log')
# extract the existing handles and labels
h_const, l_const = ax_const.get_legend_handles_labels()
# slice the appropriate section of l and h to include in the legend
ax_const.legend(h_const[0:1], l_const[0:1])
for label, val in max_vals.items():
  if (label == '$n$') or (label == '$20n^2$'):
    continue
  if 'logn' in label:
    label = label.replace('logn', r'\log(n)')
  ax_const.text(x = max_vals['$n$'] + 10**4, y = val, s=label, va='center')
# Hide the right and top spines
ax_const.spines[['right', 'top']].set_visible(False)
plt.show()
```

## Formalizing Big-O Notation

* Let $f, g: \mathbb{N} \rightarrow \mathbb{N}$. Then we write $f(n) = O(g(n))$ when there exists a **threshold** $n_0 > 0$ and a **constant** $K > 0$ such that
$$
\forall n \geq n_0 \left[ f(n) \leq K\cdot g(n) \right]
$$
* In words: beyond a certain point $n_0$, $f(n)$ is **bounded above** by $K\cdot g(n)$.
* *Definition from @savage_models_1998[pg. 13]*

## Intuition $\rightarrow$ Proof {.crunch-title .crunch-ul}

* Using this definition, we can now **prove** $f(n) = n^2 + 50n = O(n^2)$!
* Here $f(n) = n^2 + 50n$, $g(n) = n^2$
* **Theorem**: $\exists \; n_0 \; \text{ s.t. } \forall n \geq n_0 \left[ n^2 + 50n \leq Kn^2 \right]$
* **Proof**: Let $K = 50$. Then
$$
\begin{align*}
&n^2 + 50n \leq 50n^2 \iff n + 50 \leq 50n \\
&\iff 49n \geq 50 \iff n \geq \frac{50}{49}.
\end{align*}
$$
* So if we choose $n_0 = 2$, the chain of statements holds. $\blacksquare$

## References

::: {#refs}
:::
