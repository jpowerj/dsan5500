---
title: "Week 3: {{< var w03.title >}}"
subtitle: "*DSAN 5500: Data Structures, Objects, and Algorithms in Python*"
date: "Monday, January 29, 2024"
date-format: full
lecnum: 3
categories:
  - "Class Sessions"
author: "Jeff Jacobs"
institute: "<a href='mailto:jj1088@georgetown.edu' target='_blank'>`jj1088@georgetown.edu`</a>"
bibliography: "../_DSAN5500.bib"
format:
  revealjs:
    df-print: kable
    output-file: "slides.html"
    footer: "DSAN 5500 Week 3: {{< var w03.footer >}}"
    echo: true
    code-fold: show
    scrollable: true
    slide-number: true
    theme: ["../_jjslides.scss"]
    html-math-method: mathjax
    simplemenu:
      flat: true
      barhtml:
        header: "<div class='menubar'><span style='position: absolute; left: 8; padding-left: 8px;'><a href='./index.html'>&larr; Return to Notes</a></span><ul class='menu'></ul></div>"
      scale: 0.5
    revealjs-plugins:
      - simplemenu
  html:
    df-print: kable
    output-file: "index.html"
    echo: true
    code-fold: show
    html-math-method: mathjax
---

::: {.content-visible unless-format="revealjs"}

<center>
<a class="h2" href="./slides.html" target="_blank">Open slides in new window &rarr;</a>
</center>

:::

# Why We Can't Learn These Topics Separately {data-stack-name="Overview"}

## Data Structure Choice $\Leftrightarrow$ Efficiency for Task

* Do we need to be able to **insert** quickly?
* Do we need to be able to **sort** quickly?
* Do we need to be able to **search** quickly?
* Are we searching for **individual items** or for **ranges**?

# Basic Data Structures {data-stack-name="Structures"}

## Recall: Primitives

* `bool`
* `int`
* `float`
* `None`
* Now we want to put these together, to form... **structures!**  👀
* Structures are the things that live in the **heap**; the **stack** just **points to them**

## Tuples {.crunch-title .crunch-ul}

* **Fixed-size** collection of $N$ objects
* Unless otherwise specified, we're talking about $2$-tuples
* Example: We can locate something on the Earth by specifying two `floats`: latitude and longitude!

```{python}
gtown_loc = (38.9076, -77.0723)
gtown_loc
```

* But what if we don't know in advance how many items we want to store? Ex: how can we store users for a new app?

## Sequences

* **In General**: Mapping of integer **indices** to objects
* `x = ['a','b','c']`
  * $\implies$ `x[0] = 'a'`
  * $\implies$ `x[1] = 'b'`
  * $\implies$ `x[2] = 'c'`
* In Python: `list`
* Nice built-in language constructs for **looping** over lists, and especially for **performing operations on each element**

## Looping Over Sequences

::: columns
::: {.column width="50%"}

* C/C++/Java:

```java
List<String> myList = Arrays.asList("a", "b", "c");
for (int i = 0; i < x.size(); i++) {
    System.out.println(myList.get(i));
}
```
<br>
<pre>
a
b
c
</pre>

:::
::: {.column width="50%"}

* Python:

```{python}
my_list = ['a','b','c']
for list_element in my_list:
  print(list_element)
```

:::
:::

## *List Comprehensions*: Apply Function to Each Element {.crunch-title .title-07}

* Construct **new** list by applying operation to each element:

```{python}
my_nums = [4,5,6,7]
my_squares = [num ** 2 for num in my_nums]
my_squares
```

* Can also **filter** the elements of the list with `if`:

```{python}
my_odd_squares = [num ** 2 for num in my_nums if num % 2 == 1]
my_odd_squares
```

## Sets {.smaller .crunch-title}

::: columns
::: {.column width="50%"}

* Extremely helpful + efficient for finding **unique** elements:

```{python}
animals_i_saw = ['bird','bird','fish','bird','cat','bird','lizard']
print(f"Number of animals I saw: {len(animals_i_saw)}")
```

```{python}
unique_animals_me = set(animals_i_saw)
print(f"Set of unique animals: {unique_animals_me}")
print(f"Number of unique animals: {len(unique_animals_me)}")
```

:::
::: {.column width="50%"}

* Supports all set operators from math:

```{python}
animals_you_saw = ['lizard','dog','bird','bird','bird']
unique_animals_you = set(animals_you_saw)
unique_animals_both = unique_animals_me.intersection(unique_animals_you)
print(f"Animals we both saw: {unique_animals_both}")
```

```{python}
unique_animals_either = unique_animals_me.union(unique_animals_you)
print(f"Animals either of us saw: {unique_animals_either}")
```

```{python}
unique_animals_meonly = unique_animals_me - unique_animals_you
print(f"Animals I saw that you didn't see: {unique_animals_meonly}")
unique_animals_youonly = unique_animals_you - unique_animals_me
print(f"Animals you saw that I didn't see: {unique_animals_youonly}")
```

:::
:::

## Maps / Dictionaries {.smaller .crunch-title}

::: columns
::: {.column width="50%"}

* While other language like Java have lots of fancy types of Map, Python has a single type, the **dictionary**:

```{python}
gtown_data = {
  'name': 'Georgetown University',
  'founded': 1789,
  'coordinates': (38.9076, -77.0723),
  'location': {
    'city': 'Washington',
    'state': 'DC', # <__<
    'country': 'USA'
  }
}
print(gtown_data.keys())
print(gtown_data.values())
```

:::
::: {.column width="50%"}

* Be careful when looping! Default behavior is iteration over **keys**:

```{python}
for k in gtown_data:
  print(k)
```

* For **key-value pairs** use `.items()`:

```{python}
for k, v in gtown_data.items():
  print(k, v)
```

:::
:::

# Complexity With Respect To A *Structure*{data-stack-name="Complexity"}

* Last week: analyzing complexity of an **algorithm** (no broader context)
* This week: analyzing complexity of a **structure** as a **collection** of variables + algorithms
* Object-Oriented Programming: **Design pattern** for "organizing" data and algorithms into structures

## Looking Under the Hood of a Data Structure {.crunch-title .title-08}

* Last week we saw the **math** for why we can "abstract away from" the details of how a particular language works
* We want to understand these structures **independently** of the specifics of their implementation in Python (for now)
* So, let's construct our own **simplified versions** of the basic structures, and use these simplified versions to get a sense for their **efficiency**
  * (The "true" Python versions may be **hyper-optimized**, but as we saw, there are **fundamental constraints** on runtime, assuming $P \neq NP$)

## Tuples

```{python}
class MyTuple:
  def __init__(self, thing1, thing2):
    self.thing1 = thing1
    self.thing2 = thing2

  def __repr__(self):
    return f"({self.thing1}, {self.thing2})"

  def __str__(self):
    return self.__repr__()

t1 = MyTuple('a','b')
t2 = MyTuple(111, 222)
print(t1, t2)
```

## Lists {.crunch-title .smaller}

::: columns
::: {.column width="50%"}

* The list itself just points to a root item:

```{python}
class MyList:
  def __init__(self):
    self.root = None

  def append(self, new_item):
    if self.root is None:
      self.root = MyListItem(new_item)
    else:
      self.root.append(new_item)

  def __repr__(self):
    return self.root.__repr__()
```

:::
::: {.column width="50%"}

* An item has contents, pointer to next item:

```{python}
class MyListItem:
  def __init__(self, content):
    self.content = content
    self.next = None

  def append(self, new_item):
    if self.next is None:
      self.next = MyListItem(new_item)
    else:
      self.next.append(new_item)

  def __repr__(self):
    my_content = self.content
    return my_content if self.next is None else f"{my_content}, {self.next.__repr__()}"
```

:::
:::

```{python}
users = MyList()
users.append('Jeff')
users.append('Alma')
users.append('Bo')
print(users)
```

## So, How Many "Steps" Are Required...

* To retrieve the **first** element in a `MyTuple`?
* To retrieve the **last** element in a `MyTuple`?
* To retrieve the **first** element in a `MyList`?
* To retrieve the **last** element in a `MyList`?

## How Many Steps? {.smaller}

::: columns
::: {.column width="50%"}

* With a `MyTuple`:

```{python}
t1.thing1
```

* $\implies$ 1 step

```{python}
t1.thing2
```

* $\implies$ 1 step

:::
::: {.column width="50%"}

* With a `MyList`:

```{python}
print(users.root.content)
```

* $\implies$ 1 step

```{python}
current_node = users.root
while current_node.next is not None:
  current_node = current_node.next
print(current_node.content)
```

* $\implies$ (3 steps) 
* ...But why 3? How many steps if the list contained 5 elements? $N$ elements?

:::
:::

## Pairwise-Concatenating List Elements {.smaller .crunch-title}

* Now rather than just printing, let's pairwise concatenate:

```{python}
cur_pointer1 = users.root
while cur_pointer1 is not None:
  cur_pointer2 = users.root
  while cur_pointer2 is not None:
    print(cur_pointer1.content + cur_pointer2.content)
    cur_pointer2 = cur_pointer2.next
  cur_pointer1 = cur_pointer1.next
```

* How many steps did this take? How about for a list with $5$ elements? $N$ elements?

## Last Example: Pairwise-Concat + End Check {.smaller .crunch-title .title-12 .crunch-details}

```{python}
printed_items = []
cur_pointer1 = users.root
while cur_pointer1 is not None:
  cur_pointer2 = users.root
  while cur_pointer2 is not None:
    print(cur_pointer1.content + cur_pointer2.content)
    printed_items.append(cur_pointer1.content)
    printed_items.append(cur_pointer2.content)
    cur_pointer2 = cur_pointer2.next
  cur_pointer1 = cur_pointer1.next
check_pointer = users.root
while check_pointer is not None:
  if check_pointer.content in printed_items:
    print(f"Phew. {check_pointer.content} printed at least once.")
  else:
    print(f"Oh no! {check_pointer.content} was never printed!!!")
  check_pointer = check_pointer.next
```

## Generalizing

* Algorithms are **"efficient"** relative to how their runtime **scales** as the **objects** grow larger and larger!
* Tuple operations take 1 step no matter what
* For lists, retrieving the **first** element takes 1 step no matter what, but retrieving the **last** element takes $n$ steps!
* Pairwise concatenation requires $n^2$ steps!

## The Complexity of Our Examples

* Tuple operations: $O(1)$
* Retrieving the first element of a list: $O(1)$
* Retrieving the last element of a list: $O(n)$
* Pairwise concatenation: $O(n^2)$
* Pairwise concatenation+check: $O(n^2 + n) = O(n^2) \leftarrow !!!$
* Crucial to think **asymptotically** to wrap our heads around this!


## Doing Better Than Insertion Sort

* *Intuition Break* 🥳: **Finding a word in a dictionary!** <a href='https://dsan.io/dict-lookup' target='_blank' class='font-monospace'>dsan.io/dict-lookup<i class='bi bi-box-arrow-up-right ps-2'></i></a>

## How Can Merge Sort Work *That* Much Better!? {.crunch-title .title-08 .crunch-ul .crunch-quarto-layout-panel .crunch-quarto-figure}

* With the **linear** approach, each time we check a word and it's not our word we eliminate... one measly word 😞
* But with the **divide-and-conquer** approach... we eliminate 🔥**HALF OF THE REMAINING WORDS**🔥

::: {layout="[1,1]" layout-valign="center" layout-align="center"}

![](images/lakers.gif){fig-align="center"}

![](images/tuck_em_in.jpeg){fig-align="center" width="270"}

:::

## Merging Two Sorted Lists in $O(n)$ Time {.smaller .title-11 .crunch-figcaption}

<!-- .crunch-quarto-figure breaks the centering in newest Quarto version... -->

![From @cormen_introduction_2001, pg. 37](images/merge.svg){fig-align="center"}

## Merge Sort (Merging as Subroutine) {.smaller .crunch-figcaption}

![From @cormen_introduction_2001, pg. 40](images/merge_tree.svg){fig-align="center"}

## Complexity Analysis {.crunch-title}

* Hard way: re-do the line-by-line analysis we did for <span class='alg'>Insertion-Sort</span> 😣 Easy way: stand on shoulders of giants!
* Using a famous+fun theorem (the **Master Theorem**): Given a recurrence $T(n) = aT(n/b) + f(n)$, compute its:
  * **Watershed function** $W(n) = n^{\log_b(a)}$ and
  * **Driving function** $D(n) = f(n)$
* The Master Theorem gives **closed-form** asymptotic solution for $T(n)$, split into three cases: **(1)** $W(n)$ grows **faster** than $D(n)$, **(2)** grows at **same rate** as $D(n)$, or **(3)** grows **slower** than $D(n)$

## Bounding the Runtime of Merge Sort {.crunch-title .crunch-ul .crunch-callout .crunch-footnotes}

* How about <span class='alg'>Merge-Sort</span>? $T(n) = 2T(n/2) + \Theta(n)$
  * $a = b = 2$, $W(n) = n^{\log_2(2)} = n$, $D(n) = \Theta(n)$
* $W(n)$ and $D(n)$ grow at **same rate** $\implies$ *Case 2*[^full]:

::: {.callout-note icon="false" title="Applying the Master Theorem When $W(n) = \Theta(D(n))$ (Case 2)"}

1. Is there a $k \geq 0$ satisfying $D(n) = \Theta(n^{\log_b(a)}\log_2^k(n))$?
2. If so, your solution is $T(n) = \Theta(n^{\log_b(a)}\log_2^{k+1}(n))$

:::

* <span class='alg'>Merge-Sort</span>: $k = 0$ works! $\Theta(n^{\log_2(2)}\log_2^0(n)) = \Theta(n)$
* Thus $T(n) = \Theta(n^{\log_b(a)}\log_2^{k+1}(n)) = \boxed{\Theta(n\log_2n)}$ 😎

[^full]: See [appendix slide](#appendix-the-full-master-theorem) for all 3 cases, if you're some kind of masochist

# Object-Oriented Programming {data-stack-name="OOP"}

## Breaking a Problem into (Interacting) Parts {.title-08 .crunch-title}

* **Python so far**: "Data science mode"
  * Start at top of file with raw data
  * Write lines of code until problem solved
* **Python in this class**: "Software engineering mode"
  * Break system down into parts
  * Write each part separately
  * Link parts together to create the whole
* *(One implication: `.py` files may be easier than `.ipynb` for development!)*

## How Does A Calculator Work?

![(Calculator image from <a href="//commons.wikimedia.org/wiki/User:LoMit" title="User:LoMit">Wikimedia Commons</a>)](images/Calculator.drawio.svg){fig-align="center"}

## Key OOP Feature #1: *Encapsulation*

* Imagine you're on a **team** trying to make a calculator
* One person can write the `Screen` class, another person can write the `Button` class, and so on
* Natural division of labor! (May seem silly for a calculator, but imagine as your app **scales up**)

## Key OOP Feature #2: *Abstraction*

* **Abstraction** complements this **Encapsulation**: the `Screen` team **doesn't need to know** the **internal details** of `Button` (just it's API), and vice-versa
* Relevant data and functions can be "public", irrelevant internal data and functions "private"
* (Like with *type hints*), Python doesn't **enforce** this distinction, **but** (unlike with *type hints*) most libraries **do** separate public from private by a **variable-naming convention**...

## Public, Protected, Private Attributes in Python {.smaller .crunch-title .title-11}

* [**Public** (default)] No underscores: `public_var`
* [**Protected**] One underscore: `_protected_var`
* [**Private**] Two underscores: `__private_var`

::: {.columns}
::: {.column width="50%"}

```{python}
#| error: true
class MyTopSecretInfo:
  __the_info = "I love Carly Rae Jepsen"

info_obj = MyTopSecretInfo()
info_obj.__the_info
```

Guess we can't access it then, right? 😮‍💨

:::
::: {.column width="50%"}

```{python}
info_obj._MyTopSecretInfo__the_info
```

* NOO MY SECRET!!! 😭
* Pls don't tell anyone

:::
:::

## Key OOP Features #3-4: Inheritance, Polymorphism {.crunch-title .title-07 .crunch-ul}

* Better explained in **diagrams** than **words** (next 10 slides!), but we can get a sense by thinking about their **etymology**:
* **"Inheritance"** comes from **"heir"**, like "heir to the throne"
  * *Parent* passes on [things they possess] to their *children*
* **"Polymorphism"**: **Poly** = "many", **Morphe** = "forms"
  * How does Python know what to do when we `print()`?
  * It "just works" because `print()` (through `__str__()`) takes on **many** (!) **forms** (!): each type of object has its own **implementation** of `__str__()`

## Use Case: Bookstore Inventory Management {.smaller .title-12}

![<a href='https://washington.org/visit-dc/bookstores-sure-charm-you-washington-dc' target='_blank'>Image source</a>](images/spencerbeck_exterior-of-capitol-hill-books_yesmydccool.jpg){fig-align="center"}

## In Pictures {.smaller}

```{dot}
//| label: bookstore-diagram
//| echo: false
digraph G {
	graph [
		label="Bookstore Relational Diagram"
		labelloc="t"
	]
	node [
		shape=record,
        fontname="Courier",
	]
    rankdir=LR

	Bookstore[nojustify=false,label = "Bookstore|Name\l|<loc>Location\l|<bl>Booklist\l|Get_Inventory()\l|Sort_Inventory()\l"]

    Place[label="<placehead>Place|City\l|State\l|Country\l|Print_Map()\l"]

    Bookstore:loc -> Place:placehead[label="Has One"];

    Book[label="<bookhead>Book|<title>Title\l|<auths>Authors\l|Num Pages\l|Preview()"]

    Person[label="<personhead>Person|Family Name|Given Name"]

    Bookstore:bl -> Book:bookhead[label="Has Multiple",style="dashed"]
    Book:auths -> Person:personhead[label="Has Multiple",style="dashed"]
}
```

## Creating Classes {.smaller .crunch-title .crunch-ul .crunch-details}

* Use case: Creating an inventory system for a **Bookstore**

::: columns
::: {.column width="50%"}

```{python}
#| label: basic-class
class Bookstore:
    def __init__(self, name, location):
        self.name = name
        self.location = location
        self.books = []

    def __getitem__(self, index):
        return self.books[index]

    def __repr__(self):
        return self.__str__()

    def __str__(self):
        return f"Bookstore[{self.get_num_books()} books]"

    def add_books(self, book_list):
        self.books.extend(book_list)

    def get_books(self):
        return self.books

    def get_inventory(self):
        book_lines = []
        for book_index, book in enumerate(self.get_books()):
            cur_book_line = f"{book_index}. {str(book)}"
            book_lines.append(cur_book_line)
        return "\n".join(book_lines)

    def get_num_books(self):
        return len(self.get_books())

    def sort_books(self, sort_key):
        self.books.sort(key=sort_key)

class Book:
    def __init__(self, title, authors, num_pages):
        self.title = title
        self.authors = authors
        self.num_pages = num_pages

    def __str__(self):
        return f"Book[title={self.get_title()}, authors={self.get_authors()}, pages={self.get_num_pages()}]"

    def get_authors(self):
        return self.authors

    def get_first_author(self):
        return self.authors[0]

    def get_num_pages(self):
        return self.num_pages

    def get_title(self):
        return self.title

class Person:
    def __init__(self, family_name, given_name):
        self.family_name = family_name
        self.given_name = given_name

    def __repr__(self):
        return self.__str__()

    def __str__(self):
        return f"Person[{self.get_family_name()}, {self.get_given_name()}]"

    def get_family_name(self):
        return self.family_name

    def get_given_name(self):
        return self.given_name
```

:::
::: {.column width="50%"}

```{python}
#| label: create-objs
my_bookstore = Bookstore("Bookland", "Washington, DC")
plath = Person("Plath", "Sylvia")
bell_jar = Book("The Bell Jar", [plath], 244)
marx = Person("Marx", "Karl")
engels = Person("Engels", "Friedrich")
manifesto = Book("The Communist Manifesto", [marx, engels], 43)
elster = Person("Elster", "Jon")
cement = Book("The Cement of Society", [elster], 311)
my_bookstore.add_books([bell_jar, manifesto, cement])
print(my_bookstore)
print(my_bookstore[0])
print("Inventory:")
print(my_bookstore.get_inventory())
```

:::
:::

## Doing Things With Classes {.smaller}

* Now we can **use** our OOP structure, for example to sort the inventory in different ways!

::: columns
::: {.column width="50%"}

<center>
**Alphabetical (By First Author)**
</center>

```{python}
#| label: sort-alpha
sort_alpha = lambda x: x.get_first_author().get_family_name()
my_bookstore.sort_books(sort_key = sort_alpha)
print(my_bookstore.get_inventory())
```

:::
::: {.column width="50%"}

<center>
**By Page Count**
</center>

```{python}
#| label: sort-pages
sort_pages = lambda x: x.get_num_pages()
my_bookstore.sort_books(sort_key = sort_pages)
print(my_bookstore.get_inventory())
```

:::
:::

## *Inheritance* and *Polymorphism* {.smaller .crunch-title}

* Encapsulate **general properties** in **parent** class, **specific properties** in **child classes**

![(You can edit this or make your own UML diagrams in <a href='https://www.nomnoml.com/#view/%5B%3Cabstract%3E%20Vehicle%7C%0A%20%20numDoors%3A%20int%3B%20numWheels%3A%20int%3B%20balanced%3A%20bool%3B%7C%0A%20%20turnOn()%3B%20accelerate()%3B%20brake()%3B%20turnOff()%3B%0A%5D%0A%5BMotorcycle%7CnumDoors%20%3D%200%3BnumWheels%20%3D%202%3B%20balanced%20%3D%20false%3B%5D%0A%5B%3Cabstract%3E%20Car%7CnumWheels%20%3D%204%3Bbalanced%20%3D%20true%3B%5D%0A%5BCoupe%7CnumDoors%20%3D%202%3B%5D%0A%5BSedan%7CnumDoors%20%3D%204%3B%5D%0A%5BTruck%7CnumDoors%20%3D%202%3BnumWheels%20%3D%2018%3Bbalanced%20%3D%20true%3B%5D%0A%0A%5BVehicle%5D-%3A%3E%5BMotorcycle%5D%0A%5BVehicle%5D--%3A%3E%5BCar%5D%0A%5BVehicle%5D-%3A%3E%5BTruck%5D%0A%5BCar%5D-%3A%3E%5BCoupe%5D%0A%5BCar%5D-%3A%3E%5BSedan%5D%0A' target='_blank'>nomnoml<i class='bi bi-box-arrow-up-right ps-1'></i></a>!)](images/Inheritance.drawio.svg){fig-align="center"}

## Or... Is This Better? {.smaller .crunch-title}

![Edit in <a href='https://www.nomnoml.com/#view/%5B%3Cabstract%3E%20Vehicle%7CnumDoors%3A%20int%3BnumWheels%3A%20int%3Bbalanced%3A%20bool%3B%7CturnOn()%3Baccelerate()%3Bbrake()%3BturnOff()%3B%5D%0A%5B%3Cabstract%3E%20UnbalancedVehicle%7Cbalanced%20%3D%20false%3B%5D%0A%5B%3Cabstract%3E%20BalancedVehicle%7Cbalanced%20%3D%20true%3B%5D%0A%5BMotorcycle%7CnumDoors%20%3D%200%3BnumWheels%20%3D%202%3B%5D%0A%5B%3Cabstract%3E%20Car%7CnumWheels%20%3D%204%3B%5D%0A%5BCoupe%7CnumDoors%20%3D%202%3B%5D%0A%5BSedan%7CnumDoors%20%3D%204%3B%5D%0A%5BTruck%7CnumDoors%20%3D%202%3BnumWheels%20%3D%2018%3B%5D%0A%0A%5BVehicle%5D--%3A%3E%5BUnbalancedVehicle%5D%0A%5BUnbalancedVehicle%5D-%3A%3E%5BMotorcycle%5D%0A%5BVehicle%5D--%3A%3E%5BBalancedVehicle%5D%0A%5BBalancedVehicle%5D--%3A%3E%5BCar%5D%0A%5BBalancedVehicle%5D-%3A%3E%5BTruck%5D%0A%5BCar%5D-%3A%3E%5BCoupe%5D%0A%5BCar%5D-%3A%3E%5BSedan%5D%0A' target='_blank'>nomnoml<i class='bi bi-box-arrow-up-right ps-1'></i></a>](images/vehicle-fancy.svg){fig-align="center"}

## Design Choices {.smaller .crunch-title .crunch-details .crunch-ul}

* The goal is to **encapsulate** as best as possible: which **objects** should have which **properties**, and which **methods**?
* Example: Fiction vs. Non-Fiction. How important is this distinction **for your use case?**

::: columns
::: {.column width="50%"}

<center>
**Option 1: As Property of `Book`**
</center>

```{python}
#| label: fiction-property
from enum import Enum
class BookType(Enum):
    NONFICTION = 0
    FICTION = 1

class Book:
    def __init__(self, title: str, authors: list[Person], num_pages: int, type: BookType):
        self.title = title
        self.authors = authors
        self.num_pages = num_pages
        self.type = type

    def __str__(self):
        return f"Book[title={self.title}, authors={self.authors}, pages={self.num_pages}, type={self.type}]"
```

```{python}
#| label: use-fiction-property
joyce = Person("Joyce", "James")
ulysses = Book("Ulysses", [joyce], 732, BookType.FICTION)
schelling = Person("Schelling", "Thomas")
micromotives = Book("Micromotives and Macrobehavior", [schelling], 252, BookType.NONFICTION)
print(ulysses)
print(micromotives)
```

:::
::: {.column width="50%"}

<center>
**Option 2: Separate Classes**
</center>

```{python}
#| label: fiction-separate-classes-setup
#| echo: false
class Book:
    def __init__(self, title, authors, num_pages):
        self.title = title
        self.authors = authors
        self.num_pages = num_pages

    def __str__(self):
        return f"Book[title={self.get_title()}, authors={self.get_authors()}, pages={self.get_num_pages()}]"

    def get_authors(self):
        return self.authors

    def get_first_author(self):
        return self.authors[0]

    def get_num_pages(self):
        return self.num_pages

    def get_title(self):
        return self.title
```

```{python}
#| label: fiction-separate-classes
# class Book defined as earlier
class FictionBook(Book):
    def __init__(self, title, authors, num_pages, characters):
        super().__init__(title, authors, num_pages)
        self.characters = characters

class NonfictionBook(Book):
    def __init__(self, title, authors, num_pages, topic):
        super().__init__(title, authors, num_pages)
        self.topic = topic
```

```{python}
#| label: use-fiction-separate-classes
joyce = Person("Joyce", "James")
ulysses = FictionBook("Ulysses", [joyce], 732, ["Daedalus"])
schelling = Person("Schelling", "Thomas")
micromotives = NonfictionBook("Micromotives and Macrobehavior", [schelling], 252, "Economics")
print(ulysses)
print(micromotives)
```

:::
:::

# HW1: Python Fundamentals {data-name="HW1"}

* <a href='https://classroom.google.com/c/NjM5MzE2MTE4NTgx' target='_blank'>Google Classroom <i class='bi bi-box-arrow-up-right ps-1'></i></a>


## Appendix: The Full Master Theorem {.smaller .crunch-title .crunch-ol}

**Master Theorem**: Let $a > 0$ and $b > 1$ be constants, and let $f(n)$ be a driving function defined and nonnegative on all sufficiently large reals. Define $T(n)$ on $n \in \mathbb{N}$ by

$$
T(n) = aT(n/b) + f(n)
$$

where $aT(n/b) = a'T(\lfloor n/b \rfloor) + a''T(\lceil n/b \rceil)$ for some $a' \geq 0$ and $a'' \geq 0$ satisfying $a = a' + a''$. Then the asymptotic behavior of $T(n)$ can be characterized as follows:

1. If there exists $\epsilon > 0$ such that $f(n) = O(n^{\log_b(a) - \epsilon})$, then $T(n) = \Theta(n^{\log_b(a)})$
2. If there exists $k \geq 0$ such that $f(n) = \Theta(n^{\log_b(a)}\log_2^k(n))$, then $T(n) = \Theta(n^{\log_b(a)}\log_2^{k+1}(n))$.
3. If there exists $\epsilon > 0$ such that $f(n) = \Omega(n^{\log_b(a) + \epsilon})$, and if $f(n)$ satisfies the **regularity condition** $af(n/b) \leq cf(n)$ for some constant $c < 1$ and all sufficiently large $n$, then $T(n) = \Theta(f(n))$.

::: {.proof}
See @cormen_introduction_2001, pg. 107-114.
:::

*([&larr; Back to Merge Sort slides](#bounding-the-runtime-of-merge-sort))*

## References

::: {#refs}
:::
